/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2018
 * @compiler Bridge.NET 17.9.0
 */
Bridge.assembly("SocraLogicHtml5", function ($asm, globals) {
    "use strict";

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0App\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.App;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Mainpage\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.MainPage;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Proposition\u01c0\u01c0Eulercircles\u01c0\u01c0Eulercirclesview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.WorldviewExplorer.SubPages.EulerCircles.EulerCirclesView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Proposition\u01c0\u01c0Propositionproperties\u01c0\u01c0Propositionpropertiesview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.WorldviewExplorer.SubPages.PropositionProperties.PropositionPropertiesView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0System\u01c0\u01c0Systeminfo\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.System.SystemInfo;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Bottomregionview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.BottomRegionView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Centerregionview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.CenterRegionView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Instances\u01c0\u01c0Categoricallogicsyntaxtutorialview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.Instances.CategoricalLogicSyntax.CategoricalLogicSyntaxTutorialView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Instances\u01c0\u01c0Immediatedeductionstutorialview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.Instances.ImmediateDeductionsTutorialView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Instances\u01c0\u01c0Relationsbetweenpropositionstutorialview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.Instances.RelationsBetweenPropositionsTutorialView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Instances\u01c0\u01c0Syllogismstutorialview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.Instances.SyllogismsTutorialView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Instances\u01c0\u01c0Translatingintocategoricalpropositionstutorialview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.Instances.TranslatingIntoCategoricalPropositionsTutorialView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Leftregionexpaderview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.LeftRegionExpaderView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Leftregionview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.LeftRegionView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Propositioninspector\u01c0\u01c0Showorhidepropositioninspectorview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.PropositionInspector.ShowOrHidePropositionInspectorView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Rightregionview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.RightRegionView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Selectnextstep\u01c0\u01c0Selectnextstepview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.SelectNextStep.SelectNextStepView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Selectpreviousstep\u01c0\u01c0Selectpreviousstepview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.SelectPreviousStep.SelectPreviousStepView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Steplist\u01c0\u01c0Steplistview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.StepList.StepListView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Checkanswer\u01c0\u01c0Checkanswerview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.CheckAnswer.CheckAnswerView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Feedbackdetail\u01c0\u01c0Feedbackdetailview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.FeedbackDetail.FeedbackDetailView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Maincontent\u01c0\u01c0Maincontenttextview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainContent.MainContentTextView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Maincontent\u01c0\u01c0Maincontenttitleview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainContent.MainContentTitleView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Mainfeedback\u01c0\u01c0Mainfeedbackview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainFeedback.MainFeedbackView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Propositioninspector\u01c0\u01c0Propositioninspectorview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.PropositionInspector.PropositionInspectorView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Retryanswer\u01c0\u01c0Retryanswerview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.RetryAnswer.RetryAnswerView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Stats\u01c0\u01c0Statsview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.Stats.StatsView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Studentanswer\u01c0\u01c0Studentanswer2View\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswer2View;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Studentanswer\u01c0\u01c0Studentanswer3View\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswer3View;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Studentanswer\u01c0\u01c0Studentanswerlabelview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswerLabelView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Studentanswer\u01c0\u01c0Studentanswerview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswerView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialstep\u01c0\u01c0Tutorialsteplistitemview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialStep.TutorialStepListItemView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Tutorialview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.TutorialView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("\u01c0\u01c0Socralogichtml5\u01c0\u01c0Component\u01c0\u01c0Zeeportsandadapters\u01c0\u01c0User\u01c0\u01c0Interface\u01c0\u01c0Pages\u01c0\u01c0Tutorials\u01c0\u01c0Visitors\u01c0\u01c0Persisttutorial\u01c0\u01c0Xml\u01c0\u01c0Savetutorialresultsbuttonview\u01c0\u01c0Xaml\u01c0\u01c0Factory", {
        statics: {
            methods: {
                Instantiate: function () {
                    var type = SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.SaveTutorialResultsButtonView;
                    return Bridge.global.CSHTML5.Internal.TypeInstantiationHelper.Instantiate(type);
                }
            }
        }
    });

    Bridge.define("Analyzable.IAnalyzableEntity", {
        $kind: "interface"
    });

    Bridge.define("AppearanceManager.IAppearanceManagerWrapper", {
        $kind: "interface"
    });

    Bridge.define("Argument.Factory.IArgumentFactory", {
        $kind: "interface"
    });

    Bridge.define("CommandHandlers.CommandHandler", {
        inherits: [System.Windows.Input.ICommand],
        fields: {
            _action: null,
            _canExecute: false
        },
        events: {
            CanExecuteChanged: null
        },
        alias: [
            "CanExecute", "System$Windows$Input$ICommand$CanExecute",
            "addCanExecuteChanged", "System$Windows$Input$ICommand$addCanExecuteChanged",
            "removeCanExecuteChanged", "System$Windows$Input$ICommand$removeCanExecuteChanged",
            "Execute", "System$Windows$Input$ICommand$Execute"
        ],
        ctors: {
            ctor: function (action, canExecute) {
                this.$initialize();
                this._action = action;
                this._canExecute = canExecute;
            }
        },
        methods: {
            CanExecute: function (parameter) {
                return this._canExecute;
            },
            Execute: function (parameter) {
                if (this._canExecute) {
                    this._action();
                }
            }
        }
    });

    Bridge.define("CSHTML5.Extensions.FileSystem.FileSaver", {
        statics: {
            fields: {
                JSLibraryWasLoaded: false
            },
            methods: {
                SaveTextToFile: function (text, filename) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (text == null) {
                                                throw new System.ArgumentNullException.$ctor1("text");
                                            }

                                            if (filename == null) {
                                                throw new System.ArgumentNullException.$ctor1("filename");
                                            }

                                            $task1 = CSHTML5.Extensions.FileSystem.FileSaver.Initialize();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            if ($taskResult1) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 3;
                                            continue;
                                        }
                                        case 2: {
                                            
                                                            var blob = new Blob([text], { type: "text/plain;charset=utf-8"});
                                                            saveAs(blob, filename)
                                                        ;
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                SaveJavaScriptBlobToFile: function (javaScriptBlob, filename) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (javaScriptBlob == null) {
                                                throw new System.ArgumentNullException.$ctor1("javaScriptBlob");
                                            }

                                            if (filename == null) {
                                                throw new System.ArgumentNullException.$ctor1("filename");
                                            }

                                            $task1 = CSHTML5.Extensions.FileSystem.FileSaver.Initialize();
                                            $step = 1;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            if ($taskResult1) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 3;
                                            continue;
                                        }
                                        case 2: {
                                            saveAs(javaScriptBlob, filename);
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Initialize: function () {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (CSHTML5.Interop.IsRunningInTheSimulator) {
                                                Windows.UI.Xaml.MessageBox.Show("Saving files is currently not supported in the Simulator. Please run in the browser instead.");
                                                $tcs.setResult(false);
                                                return;
                                            }

                                            if (!CSHTML5.Extensions.FileSystem.FileSaver.JSLibraryWasLoaded) {
                                                $step = 1;
                                                continue;
                                            } 
                                            $step = 3;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = CSHTML5.Interop.LoadJavaScriptFile$1("https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2014-11-29/FileSaver.min.js");
                                            $step = 2;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            CSHTML5.Extensions.FileSystem.FileSaver.JSLibraryWasLoaded = true;
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            $tcs.setResult(true);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                }
            }
        }
    });

    Bridge.define("EulerCirclesVm.IEulerCirclesViewModel", {
        $kind: "interface"
    });

    Bridge.define("SocraLogicHtml5.Pages.NotifyPropertyChanged", {
        inherits: [System.ComponentModel.INotifyPropertyChanged],
        events: {
            PropertyChanged: null
        },
        alias: ["addPropertyChanged", "System$ComponentModel$INotifyPropertyChanged$addPropertyChanged",
        "removePropertyChanged", "System$ComponentModel$INotifyPropertyChanged$removePropertyChanged"],
        methods: {
            OnPropertyChanged: function (propertyName) {
                !Bridge.staticEquals(this.PropertyChanged, null) ? this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName)) : null;
            }
        }
    });

    Bridge.define("EulerCirclesVm.Factory.IEulerCirclesViewModelFactory", {
        $kind: "interface"
    });

    Bridge.define("FilePersistence.File.FileReader.IFileReader", {
        $kind: "interface"
    });

    Bridge.define("Items.AccessMode.ItemAccessMode", {
        $kind: "enum",
        statics: {
            fields: {
                ReadOnly: 0,
                Edit: 1
            }
        }
    });

    Bridge.define("Items.IItem", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.AnalysisFeedback.IAnalysisFeedback", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType", {
        $kind: "enum",
        statics: {
            fields: {
                Warning: 0,
                Error: 1,
                Information: 2,
                Success: 3
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Common.IFeedbackAppender", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.EntityToAnalyze", {
        $kind: "nested enum",
        statics: {
            fields: {
                Argument: 0,
                Proposition: 1
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.TermAnalysisSteps.TermAnalysisStep", {
        methods: {
            AddTermToCollectionOnlyIfNotThereAlready: function (termCollection, predicateTerm) {
                if (System.Linq.Enumerable.from(termCollection).count(function (x) {
                        return Bridge.referenceEquals(x.Term$ITerm$Name, predicateTerm.Term$ITerm$Name);
                    }) === 0) {
                    termCollection.add(predicateTerm);
                }
            },
            AddAllTermsTransitivelyFromSourceCollectionToDestinationCollection: function (sourceTermCollection, destinationTermCollection) {
                var $t;
                $t = Bridge.getEnumerator(sourceTermCollection);
                try {
                    while ($t.moveNext()) {
                        var term = $t.Current;
                        this.AddTermToCollectionOnlyIfNotThereAlready(destinationTermCollection, term);

                        if (term.Term$ITerm$UniversalAffirmativePropertyCollection.Count !== 0) {
                            this.AddAllTermsTransitivelyFromSourceCollectionToDestinationCollection(term.Term$ITerm$UniversalAffirmativePropertyCollection, destinationTermCollection);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.IValidSyllogismLogicalAnalysisEngineFactory", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain", {
        fields: {
            NextChain: null,
            _feedbackAppender: null
        },
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                this.NextChain = nextChain;
                this._feedbackAppender = feedbackAppender;
            }
        },
        methods: {
            AddSuccessFeedback: function (feedbackDescription) {
                this._feedbackAppender.LogicalAnalysisEngine$ArgumentAnalysis$Common$IFeedbackAppender$AddSuccess(feedbackDescription);

            },
            AddFailureFeedback: function (feedbackDescription) {
                this._feedbackAppender.LogicalAnalysisEngine$ArgumentAnalysis$Common$IFeedbackAppender$AddFailure(feedbackDescription);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.ChainFactory", {
        fields: {
            FeedbackAppender: null
        },
        ctors: {
            ctor: function (feedbackAppender) {
                this.$initialize();
                this.FeedbackAppender = feedbackAppender;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Data.IValidSyllogismData", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.DistributionCalculators.IDistributionCalculator", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Factory.IValidSyllogismStepFactory", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.NegativityCalculators.INegativityCalculator", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.Factory.ILogicalAnalysisEngineFactory", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.ILogicalAnalysisEngine", {
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory", {
        fields: {
            LogicalAnalysisEngine: null,
            TextAnswer: null
        },
        methods: {
            Create: function (textAnswer) {
                this.InitializeMembers(textAnswer);

                this.CreateLogicalAnalysisEngine();
                this.AddAnalysisSteps();

                return this.LogicalAnalysisEngine;
            },
            InitializeMembers: function (textAnswer) {
                this.TextAnswer = textAnswer;
            },
            CreateLogicalAnalysisEngine: function () {
                var propositionToAnalyze = this.GetPropositionToAnalyze();
                this.LogicalAnalysisEngine = new LogicalAnalysisEngine.LogicalAnalysisEngine.ctor(propositionToAnalyze);
            },
            AddAnalysisSteps: function () {
                this.AddQuestionSpecificAnalysisSteps();
                this.AddSetFinalAnalysisStateStep();
            },
            AddSetFinalAnalysisStateStep: function () {
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.SetFinalAnalysisStateStep(this.LogicalAnalysisEngine));
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.Status.LogicalAnalysisStatus", {
        $kind: "enum",
        statics: {
            fields: {
                NotStarted: 0,
                InProgress: 1,
                Pass: 2,
                Fail: 3,
                NotApplicable: 4
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.Status.StringToStatusTranslator", {
        statics: {
            fields: {
                LogicalAnalysisStatusDictionary: null
            },
            ctors: {
                init: function () {
                    this.LogicalAnalysisStatusDictionary = function (_o1) {
                            _o1.add("Fail", LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail);
                            _o1.add("InProgress", LogicalAnalysisEngine.Status.LogicalAnalysisStatus.InProgress);
                            _o1.add("NotApplicable", LogicalAnalysisEngine.Status.LogicalAnalysisStatus.NotApplicable);
                            _o1.add("NotStarted", LogicalAnalysisEngine.Status.LogicalAnalysisStatus.NotStarted);
                            _o1.add("Pass", LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass);
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(System.String,LogicalAnalysisEngine.Status.LogicalAnalysisStatus)).ctor());
                }
            },
            methods: {
                GetLogicalAnalysisStatus: function (text) {
                    return LogicalAnalysisEngine.Status.StringToStatusTranslator.LogicalAnalysisStatusDictionary.getItem(text);
                }
            }
        }
    });

    Bridge.define("Messaging.IMessenger", {
        $kind: "interface"
    });

    Bridge.define("Messaging.MessengerToken", {
        $kind: "enum",
        statics: {
            fields: {
                ThemeChanged: 0,
                AccentColorChanged: 1,
                OtherChange: 2,
                AddProposition: 3,
                SelectedPropositionChanged: 4,
                IgnoreNewTreeViewItemSelectionChanges: 5,
                DontIgnoreNewTreeViewItemSelectionChanges: 6,
                SerializeGuiSettings: 7,
                SerializeWordlviewCollection: 8,
                Save: 9,
                AnalyzeArgument: 10
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.IPropositionFactoryChain", {
        $kind: "interface"
    });

    Bridge.define("Proposition.Factory.IPropositionFactory", {
        $kind: "interface"
    });

    Bridge.define("Proposition.Factory.IPropositionFactoryData", {
        $kind: "interface"
    });

    Bridge.define("Proposition.Parts.Copula", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Is: 1,
                IsNot: 2,
                Are: 3,
                AreNot: 4
            }
        }
    });

    Bridge.define("Proposition.Parts.PropositionCategory", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                A: 1,
                E: 2,
                I: 3,
                O: 4
            }
        }
    });

    Bridge.define("Proposition.Parts.PropositionText", {
        statics: {
            fields: {
                CopulaAreNot: null,
                CopulaIsNot: null,
                CopulaAre: null,
                CopulaIs: null,
                QuantifierAll: null,
                QuantifierSome: null,
                QuantifierNo: null,
                QuantifierAllCamelCase: null,
                QuantifierSomeCamelCase: null,
                QuantifierNoCamelCase: null,
                Tbd: null,
                NotFound: null,
                Undetermined: null,
                CategoryA: null,
                CategoryE: null,
                CategoryI: null,
                CategoryO: null,
                CategoryNone: null
            },
            ctors: {
                init: function () {
                    this.CopulaAreNot = " ARE NOT ";
                    this.CopulaIsNot = " IS NOT ";
                    this.CopulaAre = " ARE ";
                    this.CopulaIs = " IS ";
                    this.QuantifierAll = "ALL ";
                    this.QuantifierSome = "SOME ";
                    this.QuantifierNo = "NO ";
                    this.QuantifierAllCamelCase = "All";
                    this.QuantifierSomeCamelCase = "Some";
                    this.QuantifierNoCamelCase = "No";
                    this.Tbd = "TBD";
                    this.NotFound = "Not Found";
                    this.Undetermined = "Undetermined";
                    this.CategoryA = "Universal Affirmative (A)";
                    this.CategoryE = "Universal Negative (E)";
                    this.CategoryI = "Particular Affirmative (I)";
                    this.CategoryO = "Particular Negative (O)";
                    this.CategoryNone = "Not a Categorical Propositions";
                }
            }
        }
    });

    Bridge.define("Proposition.Parts.Quantifier", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                All: 1,
                Some: 2,
                No: 3
            }
        }
    });

    Bridge.define("Proposition.Utilities.CategoryStringTranslator", {
        statics: {
            fields: {
                PropositionCategoryDictionary: null
            },
            ctors: {
                init: function () {
                    this.PropositionCategoryDictionary = function (_o1) {
                            _o1.add(Proposition.Parts.PropositionCategory.A, Proposition.Parts.PropositionText.CategoryA);
                            _o1.add(Proposition.Parts.PropositionCategory.E, Proposition.Parts.PropositionText.CategoryE);
                            _o1.add(Proposition.Parts.PropositionCategory.I, Proposition.Parts.PropositionText.CategoryI);
                            _o1.add(Proposition.Parts.PropositionCategory.O, Proposition.Parts.PropositionText.CategoryO);
                            _o1.add(Proposition.Parts.PropositionCategory.None, Proposition.Parts.PropositionText.CategoryNone);
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(Proposition.Parts.PropositionCategory,System.String)).ctor());
                }
            },
            methods: {
                GetString: function (propositionCategory) {
                    return Proposition.Utilities.CategoryStringTranslator.PropositionCategoryDictionary.getItem(propositionCategory);
                }
            }
        }
    });

    Bridge.define("Proposition.Utilities.StringCleaner", {
        statics: {
            methods: {
                RemoveUndesirableCharacters: function (text) {
                    return Proposition.Utilities.StringCleaner.RemoveAllExtraWhiteSpaces(System.Text.RegularExpressions.Regex.replace(text, "[^a-zA-Z0-9' -]", ""));
                },
                RemoveAllExtraWhiteSpaces: function (text) {
                    while (System.String.contains(text,"  ")) {
                        text = System.String.replaceAll(text, "  ", " ");
                    }
                    return text;
                }
            }
        }
    });

    Bridge.define("PropositionPropertiesVm.Factory.IPropositionPropertiesViewModelFactory", {
        $kind: "interface"
    });

    Bridge.define("PropositionPropertiesVm.IPropositionPropertiesViewModel", {
        $kind: "interface"
    });

    Bridge.define("PropositionVm.Factory.IPropositionViewModelFactory", {
        $kind: "interface"
    });

    Bridge.define("SocraLogicHtml5.App", {
        inherits: [Windows.UI.Xaml.Application],
        main: function Main () {
            new SocraLogicHtml5.App();
        },
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Application.ctor.call(this);
                this.InitializeComponent();

                var mainPage = new SocraLogicHtml5.MainPage();
                Windows.UI.Xaml.Window.Current.Content = mainPage;
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\App.xaml";
                }


                Bridge.global.CSHTML5.Internal.StartupAssemblyInfo.OutputRootPath = "Output\\";
                Bridge.global.CSHTML5.Internal.StartupAssemblyInfo.OutputAppFilesPath = "app-cshtml5\\app\\";
                Bridge.global.CSHTML5.Internal.StartupAssemblyInfo.OutputLibrariesPath = "app-cshtml5\\libs\\";
                Bridge.global.CSHTML5.Internal.StartupAssemblyInfo.OutputResourcesPath = "app-cshtml5\\res\\";


                var ResourceDictionary_cf813240c7914171a3ac579fc4894cf5 = new Bridge.global.Windows.UI.Xaml.ResourceDictionary();
                this.Resources = ResourceDictionary_cf813240c7914171a3ac579fc4894cf5;

                this.Resources = ResourceDictionary_cf813240c7914171a3ac579fc4894cf5;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.AppearanceManagerWrapper.FontSize", {
        $kind: "enum",
        statics: {
            fields: {
                Large: 0,
                Small: 1
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Common.ColorDepot", {
        statics: {
            methods: {
                GetErrorIconBrush: function (isSelected, _appearanceManagerWrapper) {
                    if (isSelected) {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.White;
                    } else {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Red;
                    }
                },
                GetListItemSuccessIconBrush: function (isSelected, _appearanceManagerWrapper) {
                    if (isSelected) {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.White;
                    } else {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Green;
                    }
                },
                GetItemIconBrush: function (isSelected, appearanceManagerWrapper) {
                    if (isSelected) {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.White;
                    } else {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Black;
                    }
                },
                GetItemBackgroundBrushForHtml5: function (isSelected) {
                    if (isSelected) {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Html5Theme;
                    } else {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Transparent;
                    }
                },
                GetSuccessIconBrush: function (appearanceManagerWrapper) {
                    return SocraLogicHtml5.Common.ColorDepot.Brushes.Green;
                },
                GetButtonIconBrush: function (buttonIsEnabled) {
                    if (buttonIsEnabled) {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Black;
                    } else {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Gray;
                    }
                },
                GetBlueTagPerTheme: function (appearanceManagerWrapper) {
                    return "";
                },
                GetGreenTagPerTheme: function (appearanceManagerWrapper) {
                    return "";
                },
                GetRedTag: function () {
                    return "";
                },
                GetEndColorTag: function () {
                    return "";
                }
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Common.ColorDepot.Brushes", {
        $kind: "nested class",
        statics: {
            fields: {
                Red: null,
                Black: null,
                Gainsboro: null,
                White: null,
                Green: null,
                Gray: null,
                Transparent: null,
                Html5Theme: null
            },
            ctors: {
                init: function () {
                    this.Red = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Colors.Red.$clone());
                    this.Black = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Colors.Black.$clone());
                    this.Gainsboro = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Colors.Gainsboro.$clone());
                    this.White = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Colors.White.$clone());
                    this.Green = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Colors.Green.$clone());
                    this.Gray = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Colors.Gray.$clone());
                    this.Transparent = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Colors.Transparent.$clone());
                    this.Html5Theme = new Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(Windows.UI.Color.FromArgb(255, 27, 161, 226));
                }
            }
        }
    });

    Bridge.define("SocraLogicHtml5.MainPage", {
        inherits: [Windows.UI.Xaml.Controls.Page],
        fields: {
            _currentState: 0,
            LeftColumn: null,
            MenuItemsContainer: null,
            TheMenu: null,
            EmptySpaceThatWillBeRemovedOnSmallScreens: null,
            PageContainer: null,
            CurrentPageScrollViewer: null,
            Page: null,
            LoadingMessage: null,
            BackToMainMenuButtonInBreadcrumb: null,
            CurrentTutorialTitleInBreadcrumb: null,
            BreadcrumbNavigationPanel: null,
            PatentInfo: null,
            LayoutRoot: null,
            _contentLoaded: false
        },
        ctors: {
            init: function () {
                this._currentState = SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeeMenuOnly;
            },
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.Page.ctor.call(this);
                this.InitializeComponent();

                this.UpdateUIBasedOnCurrentState();

                Windows.UI.Xaml.Window.Current.addSizeChanged$1(Bridge.fn.cacheBind(this, this.Window_SizeChanged));

                this.MenuItemsContainer.ItemsSource = function (_o1) {
                        var $t;
                        _o1.add(($t = new SocraLogicHtml5.MainPage.MenuItem(), $t.DisplayName = "Syllogisms Tutorial", $t.Type = SocraLogicHtml5.Pages.Tutorials.Instances.SyllogismsTutorialView, $t));
                        _o1.add(($t = new SocraLogicHtml5.MainPage.MenuItem(), $t.DisplayName = "System Info", $t.Type = SocraLogicHtml5.Pages.System.SystemInfo, $t));
                        return _o1;
                    }(new (System.Collections.Generic.List$1(SocraLogicHtml5.MainPage.MenuItem)).ctor());
            }
        },
        methods: {
            MenuItemsContainer_SelectionChanged: function (sender, e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    listBox, 
                    menuItem, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4], $step);
                            switch ($step) {
                                case 0: {
                                    listBox = Bridge.cast(sender, Windows.UI.Xaml.Controls.ListBox);
                                    if (listBox.SelectedItem != null) {
                                        $step = 1;
                                        continue;
                                    } else  {
                                        $step = 3;
                                        continue;
                                    }
                                }
                                case 1: {
                                    menuItem = System.Nullable.getValue(Bridge.cast(Bridge.unbox(listBox.SelectedItem, SocraLogicHtml5.MainPage.MenuItem), SocraLogicHtml5.MainPage.MenuItem));
                                    $task1 = this.SetCurrentPage(Bridge.cast(Bridge.createInstance(menuItem.Type), Windows.UI.Xaml.FrameworkElement));
                                    $step = 2;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 2: {
                                    $task1.getAwaitedResult();
                                    $step = 4;
                                    continue;
                                }
                                case 3: {
                                    if (Bridge.is(this.PageContainer.Child, System.IDisposable)) {
                                        Bridge.cast(this.PageContainer.Child, System.IDisposable).System$IDisposable$Dispose();
                                    }

                                    this.PageContainer.Child = null;
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SetCurrentPage: function (content) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    selectedMenuItem, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Bridge.is(this.PageContainer.Child, System.IDisposable)) {
                                            Bridge.cast(this.PageContainer.Child, System.IDisposable).System$IDisposable$Dispose();
                                        }

                                        this.BackToMainMenuButtonInBreadcrumb.Content = "";
                                        this.CurrentTutorialTitleInBreadcrumb.Text = "loading...";
                                        this.LoadingMessage.Visibility = Windows.UI.Xaml.Visibility.Visible;

                                        this.GoToStateWherePageIsVisible();

                                        $task1 = System.Threading.Tasks.Task.delay(100);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        this.PageContainer.Child = content;

                                        this.BackToMainMenuButtonInBreadcrumb.Content = "Menu";
                                        selectedMenuItem = System.Nullable.getValue(Bridge.cast(Bridge.unbox(this.MenuItemsContainer.SelectedItem, SocraLogicHtml5.MainPage.MenuItem), SocraLogicHtml5.MainPage.MenuItem));
                                        this.CurrentTutorialTitleInBreadcrumb.Text = "> " + (selectedMenuItem.DisplayName || "");
                                        this.LoadingMessage.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            UpdateUIBasedOnCurrentState: function () {
                switch (this._currentState) {
                    case SocraLogicHtml5.MainPage.CurrentState.LargeResolution_SeeBothMenuAndPage: 
                        this.LeftColumn.Width = new Windows.UI.Xaml.GridLength.$ctor1(270);
                        this.TheMenu.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.BreadcrumbNavigationPanel.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                        this.PageContainer.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.CurrentPageScrollViewer.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.EmptySpaceThatWillBeRemovedOnSmallScreens.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        break;
                    case SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeeMenuOnly: 
                        this.MenuItemsContainer.SelectedIndex = -1;
                        this.LeftColumn.Width = new Windows.UI.Xaml.GridLength.$ctor1(270);
                        this.TheMenu.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.BreadcrumbNavigationPanel.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.CurrentTutorialTitleInBreadcrumb.Text = "";
                        this.PageContainer.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                        this.CurrentPageScrollViewer.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                        this.EmptySpaceThatWillBeRemovedOnSmallScreens.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                        break;
                    case SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeePageOnly: 
                        this.LeftColumn.Width = new Windows.UI.Xaml.GridLength.$ctor1(0);
                        this.TheMenu.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                        this.BreadcrumbNavigationPanel.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.PageContainer.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.CurrentPageScrollViewer.Visibility = Windows.UI.Xaml.Visibility.Visible;
                        this.EmptySpaceThatWillBeRemovedOnSmallScreens.Visibility = Windows.UI.Xaml.Visibility.Collapsed;
                        break;
                    default: 
                        break;
                }

                this.CurrentPageScrollViewer.Width = Windows.UI.Xaml.Window.Current.Bounds.Width - this.LeftColumn.Width.Value;
            },
            GoToStateWherePageIsVisible: function () {
                switch (this._currentState) {
                    case SocraLogicHtml5.MainPage.CurrentState.LargeResolution_SeeBothMenuAndPage: 
                        break;
                    case SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeeMenuOnly: 
                        this._currentState = SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeePageOnly;
                        this.UpdateUIBasedOnCurrentState();
                        break;
                    case SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeePageOnly: 
                        break;
                    default: 
                        break;
                }
            },
            ButtonGoBack_Click: function (sender, e) {
                switch (this._currentState) {
                    case SocraLogicHtml5.MainPage.CurrentState.LargeResolution_SeeBothMenuAndPage: 
                        break;
                    case SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeeMenuOnly: 
                        break;
                    case SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeePageOnly: 
                        this._currentState = SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeeMenuOnly;
                        this.UpdateUIBasedOnCurrentState();
                        break;
                    default: 
                        break;
                }
            },
            Window_SizeChanged: function (sender, e) {
                this.CurrentPageScrollViewer.Width = Windows.UI.Xaml.Window.Current.Bounds.Width - this.LeftColumn.Width.Value;
            },
            SwitchStateBasedOnDisplaySize: function () {
                var windowBounds = Windows.UI.Xaml.Window.Current.Bounds.$clone();
                var displayWidth = windowBounds.Width;
                if (displayWidth < 650) {
                    if (this._currentState === SocraLogicHtml5.MainPage.CurrentState.LargeResolution_SeeBothMenuAndPage) {
                        if (this.PageContainer.Child != null) {
                            this._currentState = SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeePageOnly;
                        } else {
                            this._currentState = SocraLogicHtml5.MainPage.CurrentState.SmallResolution_SeeMenuOnly;
                        }
                        this.UpdateUIBasedOnCurrentState();
                    }
                } else {
                    if (this._currentState !== SocraLogicHtml5.MainPage.CurrentState.LargeResolution_SeeBothMenuAndPage) {
                        this._currentState = SocraLogicHtml5.MainPage.CurrentState.LargeResolution_SeeBothMenuAndPage;
                        this.UpdateUIBasedOnCurrentState();
                    }
                }
            },
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\MainPage.xaml";
                }

                var ColumnDefinition_92351a392caf4b62a55bf5b0741ee3f0 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                var ListBox_f751b4f94ad245db866be23ad14603ef = new Bridge.global.Windows.UI.Xaml.Controls.ListBox();
                var StackPanel_1a875b1aedaf465cb1189e0cc4526301 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                var Border_160f3dbc11504e17ad5b7b67acfb3150 = new Bridge.global.Windows.UI.Xaml.Controls.Border();
                var Border_c42efea8aef540f48f0a5495d6548498 = new Bridge.global.Windows.UI.Xaml.Controls.Border();
                var Grid_175976bdee2147c28764177523f596d8 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var Grid_9dd74d35e94941c6874c320aaff4d868 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var Border_cbe45f037765468d89bf22fd32af1773 = new Bridge.global.Windows.UI.Xaml.Controls.Border();
                var Button_453642a5bfea4f89b6042f12c748e67b = new Bridge.global.Windows.UI.Xaml.Controls.Button();
                var TextBlock_03919616ac3c407d9a44c7d3ada92f17 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var Grid_3d636102c5124114a93ba83b0005cf7c = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var TextBlock_500ef544715f4c2ea9500145a3d827f3 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var Grid_b11272f5fa984000af87c980606cb59f = new Bridge.global.Windows.UI.Xaml.Controls.Grid();

                this.RegisterName$1("LayoutRoot", Grid_b11272f5fa984000af87c980606cb59f);
                Grid_b11272f5fa984000af87c980606cb59f.Name = "LayoutRoot";
                Grid_b11272f5fa984000af87c980606cb59f.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                var Grid_9ede9e5d7ad347e09816f81af5b493fb = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                this.RegisterName$1("LeftColumn", ColumnDefinition_92351a392caf4b62a55bf5b0741ee3f0);
                ColumnDefinition_92351a392caf4b62a55bf5b0741ee3f0.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(270, Bridge.global.Windows.UI.Xaml.GridUnitType.Pixel);

                var ColumnDefinition_6d2c8e1e48c14de2837031cae77ab6df = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_6d2c8e1e48c14de2837031cae77ab6df.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_9ede9e5d7ad347e09816f81af5b493fb.ColumnDefinitions.add(ColumnDefinition_92351a392caf4b62a55bf5b0741ee3f0);
                Grid_9ede9e5d7ad347e09816f81af5b493fb.ColumnDefinitions.add(ColumnDefinition_6d2c8e1e48c14de2837031cae77ab6df);

                this.RegisterName$1("TheMenu", StackPanel_1a875b1aedaf465cb1189e0cc4526301);
                StackPanel_1a875b1aedaf465cb1189e0cc4526301.Name = "TheMenu";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StackPanel_1a875b1aedaf465cb1189e0cc4526301, 0);
                StackPanel_1a875b1aedaf465cb1189e0cc4526301.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Vertical;
                this.RegisterName$1("MenuItemsContainer", ListBox_f751b4f94ad245db866be23ad14603ef);
                ListBox_f751b4f94ad245db866be23ad14603ef.Name = "MenuItemsContainer";
                ListBox_f751b4f94ad245db866be23ad14603ef.DisplayMemberPath = "DisplayName";
                ListBox_f751b4f94ad245db866be23ad14603ef.FontSize = 22.0;
                ListBox_f751b4f94ad245db866be23ad14603ef.FontFamily = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.FontFamily, "Arial"), Windows.UI.Xaml.Media.FontFamily);
                ListBox_f751b4f94ad245db866be23ad14603ef.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                ListBox_f751b4f94ad245db866be23ad14603ef.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 65, $t.G = 65, $t.B = 65, $t));
                ListBox_f751b4f94ad245db866be23ad14603ef.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(16, 35, 0, 0);
                ListBox_f751b4f94ad245db866be23ad14603ef.addSelectionChanged(Bridge.fn.cacheBind(this, this.MenuItemsContainer_SelectionChanged));
                ListBox_f751b4f94ad245db866be23ad14603ef.SelectedItemForegroundBrush = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 228, $t.G = 77, $t.B = 38, $t));
                ListBox_f751b4f94ad245db866be23ad14603ef.SelectedItemBackgroundBrush = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                ListBox_f751b4f94ad245db866be23ad14603ef.BorderThickness = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor1(0);
                ListBox_f751b4f94ad245db866be23ad14603ef.Cursor = Bridge.global.System.Windows.Input.Cursors.Hand;
                ListBox_f751b4f94ad245db866be23ad14603ef.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;

                StackPanel_1a875b1aedaf465cb1189e0cc4526301.Children.add(ListBox_f751b4f94ad245db866be23ad14603ef);


                this.RegisterName$1("Page", Grid_9dd74d35e94941c6874c320aaff4d868);
                Grid_9dd74d35e94941c6874c320aaff4d868.Name = "Page";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Grid_9dd74d35e94941c6874c320aaff4d868, 1);
                var RowDefinition_617c9fa4a2e544dd947f20bd572d6d67 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_617c9fa4a2e544dd947f20bd572d6d67.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var RowDefinition_6ada1c906b68480d89b41ca4f8155716 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_6ada1c906b68480d89b41ca4f8155716.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_9dd74d35e94941c6874c320aaff4d868.RowDefinitions.add(RowDefinition_617c9fa4a2e544dd947f20bd572d6d67);
                Grid_9dd74d35e94941c6874c320aaff4d868.RowDefinitions.add(RowDefinition_6ada1c906b68480d89b41ca4f8155716);

                var StackPanel_b335817fdf31429ab9ab1a4dbac4d2db = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(StackPanel_b335817fdf31429ab9ab1a4dbac4d2db, 0);
                StackPanel_b335817fdf31429ab9ab1a4dbac4d2db.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Vertical;
                StackPanel_b335817fdf31429ab9ab1a4dbac4d2db.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 35, 16, 3);
                StackPanel_b335817fdf31429ab9ab1a4dbac4d2db.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                this.RegisterName$1("EmptySpaceThatWillBeRemovedOnSmallScreens", Border_160f3dbc11504e17ad5b7b67acfb3150);
                Border_160f3dbc11504e17ad5b7b67acfb3150.Name = "EmptySpaceThatWillBeRemovedOnSmallScreens";
                Border_160f3dbc11504e17ad5b7b67acfb3150.Height = 45.0;
                Border_160f3dbc11504e17ad5b7b67acfb3150.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));

                StackPanel_b335817fdf31429ab9ab1a4dbac4d2db.Children.add(Border_160f3dbc11504e17ad5b7b67acfb3150);


                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(Grid_175976bdee2147c28764177523f596d8, 1);
                this.RegisterName$1("CurrentPageScrollViewer", Grid_175976bdee2147c28764177523f596d8);
                Grid_175976bdee2147c28764177523f596d8.Name = "CurrentPageScrollViewer";
                this.RegisterName$1("PageContainer", Border_c42efea8aef540f48f0a5495d6548498);
                Border_c42efea8aef540f48f0a5495d6548498.Name = "PageContainer";
                Border_c42efea8aef540f48f0a5495d6548498.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(16, 0, 16, 27);

                Grid_175976bdee2147c28764177523f596d8.Children.add(Border_c42efea8aef540f48f0a5495d6548498);


                Grid_9dd74d35e94941c6874c320aaff4d868.Children.add(StackPanel_b335817fdf31429ab9ab1a4dbac4d2db);
                Grid_9dd74d35e94941c6874c320aaff4d868.Children.add(Grid_175976bdee2147c28764177523f596d8);


                Grid_9ede9e5d7ad347e09816f81af5b493fb.Children.add(StackPanel_1a875b1aedaf465cb1189e0cc4526301);
                Grid_9ede9e5d7ad347e09816f81af5b493fb.Children.add(Grid_9dd74d35e94941c6874c320aaff4d868);


                this.RegisterName$1("LoadingMessage", Border_cbe45f037765468d89bf22fd32af1773);
                Border_cbe45f037765468d89bf22fd32af1773.Name = "LoadingMessage";
                Border_cbe45f037765468d89bf22fd32af1773.Visibility = Bridge.global.Windows.UI.Xaml.Visibility.Collapsed;
                Border_cbe45f037765468d89bf22fd32af1773.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 68, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Border_cbe45f037765468d89bf22fd32af1773.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Stretch;
                Border_cbe45f037765468d89bf22fd32af1773.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Stretch;
                var Border_d8bf7477eacf4163865d3e5c05a30417 = new Bridge.global.Windows.UI.Xaml.Controls.Border();
                Border_d8bf7477eacf4163865d3e5c05a30417.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 136, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                Border_d8bf7477eacf4163865d3e5c05a30417.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Border_d8bf7477eacf4163865d3e5c05a30417.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Border_d8bf7477eacf4163865d3e5c05a30417.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(26, 20, 26, 20);
                Border_d8bf7477eacf4163865d3e5c05a30417.CornerRadius = new Bridge.global.Windows.UI.Xaml.CornerRadius.$ctor1(20);
                var TextBlock_f91c2d61e760419da0c1688350df6ed7 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_f91c2d61e760419da0c1688350df6ed7.Text = "Loading, please wait...";
                TextBlock_f91c2d61e760419da0c1688350df6ed7.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                TextBlock_f91c2d61e760419da0c1688350df6ed7.FontSize = 22.0;
                TextBlock_f91c2d61e760419da0c1688350df6ed7.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);

                Border_d8bf7477eacf4163865d3e5c05a30417.Child = TextBlock_f91c2d61e760419da0c1688350df6ed7;


                Border_cbe45f037765468d89bf22fd32af1773.Child = Border_d8bf7477eacf4163865d3e5c05a30417;


                var Border_e92fa0ce087042c19ad4157996fbc3b7 = new Bridge.global.Windows.UI.Xaml.Controls.Border();
                Border_e92fa0ce087042c19ad4157996fbc3b7.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 27, $t.G = 161, $t.B = 226, $t));
                Border_e92fa0ce087042c19ad4157996fbc3b7.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                var Grid_093efbb0f7fc4606b2b8cf3c15b484d9 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_d3db953bae62428da8e4d31bc0bcf191 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_d3db953bae62428da8e4d31bc0bcf191.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(300, Bridge.global.Windows.UI.Xaml.GridUnitType.Pixel);

                var ColumnDefinition_7bc72c1aab8541b3b8615c73b99f9808 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_7bc72c1aab8541b3b8615c73b99f9808.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_5bef217e7e6a4790a2188b0719839812 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_5bef217e7e6a4790a2188b0719839812.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(300, Bridge.global.Windows.UI.Xaml.GridUnitType.Pixel);

                Grid_093efbb0f7fc4606b2b8cf3c15b484d9.ColumnDefinitions.add(ColumnDefinition_d3db953bae62428da8e4d31bc0bcf191);
                Grid_093efbb0f7fc4606b2b8cf3c15b484d9.ColumnDefinitions.add(ColumnDefinition_7bc72c1aab8541b3b8615c73b99f9808);
                Grid_093efbb0f7fc4606b2b8cf3c15b484d9.ColumnDefinitions.add(ColumnDefinition_5bef217e7e6a4790a2188b0719839812);

                this.RegisterName$1("BreadcrumbNavigationPanel", Grid_3d636102c5124114a93ba83b0005cf7c);
                Grid_3d636102c5124114a93ba83b0005cf7c.Name = "BreadcrumbNavigationPanel";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Grid_3d636102c5124114a93ba83b0005cf7c, 0);
                Grid_3d636102c5124114a93ba83b0005cf7c.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(3, 3, 0, 3);
                var ColumnDefinition_736cd2a8ac794978af59b9389a0b4eb1 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_736cd2a8ac794978af59b9389a0b4eb1.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_7162c15085d34327854c2a3bb34bce81 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_7162c15085d34327854c2a3bb34bce81.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                Grid_3d636102c5124114a93ba83b0005cf7c.ColumnDefinitions.add(ColumnDefinition_736cd2a8ac794978af59b9389a0b4eb1);
                Grid_3d636102c5124114a93ba83b0005cf7c.ColumnDefinitions.add(ColumnDefinition_7162c15085d34327854c2a3bb34bce81);

                this.RegisterName$1("BackToMainMenuButtonInBreadcrumb", Button_453642a5bfea4f89b6042f12c748e67b);
                Button_453642a5bfea4f89b6042f12c748e67b.Name = "BackToMainMenuButtonInBreadcrumb";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Button_453642a5bfea4f89b6042f12c748e67b, 0);
                Button_453642a5bfea4f89b6042f12c748e67b.Content = "Menu";
                Button_453642a5bfea4f89b6042f12c748e67b.FontSize = 12.0;
                Button_453642a5bfea4f89b6042f12c748e67b.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Button_453642a5bfea4f89b6042f12c748e67b.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                Button_453642a5bfea4f89b6042f12c748e67b.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Button_453642a5bfea4f89b6042f12c748e67b.addClick(Bridge.fn.cacheBind(this, this.ButtonGoBack_Click));
                Button_453642a5bfea4f89b6042f12c748e67b.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;

                this.RegisterName$1("CurrentTutorialTitleInBreadcrumb", TextBlock_03919616ac3c407d9a44c7d3ada92f17);
                TextBlock_03919616ac3c407d9a44c7d3ada92f17.Name = "CurrentTutorialTitleInBreadcrumb";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_03919616ac3c407d9a44c7d3ada92f17, 1);
                TextBlock_03919616ac3c407d9a44c7d3ada92f17.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(3, 2, 0, 0);
                TextBlock_03919616ac3c407d9a44c7d3ada92f17.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_03919616ac3c407d9a44c7d3ada92f17.FontSize = 12.0;
                TextBlock_03919616ac3c407d9a44c7d3ada92f17.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                TextBlock_03919616ac3c407d9a44c7d3ada92f17.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                TextBlock_03919616ac3c407d9a44c7d3ada92f17.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;

                Grid_3d636102c5124114a93ba83b0005cf7c.Children.add(Button_453642a5bfea4f89b6042f12c748e67b);
                Grid_3d636102c5124114a93ba83b0005cf7c.Children.add(TextBlock_03919616ac3c407d9a44c7d3ada92f17);


                var StackPanel_25300c15495945a6a9083948ab59506f = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_25300c15495945a6a9083948ab59506f.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StackPanel_25300c15495945a6a9083948ab59506f, 1);
                StackPanel_25300c15495945a6a9083948ab59506f.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                StackPanel_25300c15495945a6a9083948ab59506f.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 3, 0, 3);
                var TextBlock_5cde49fb6da54846950ba9928635d348 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_5cde49fb6da54846950ba9928635d348.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                TextBlock_5cde49fb6da54846950ba9928635d348.FontSize = 14.0;
                TextBlock_5cde49fb6da54846950ba9928635d348.Text = "SocraLogic";
                TextBlock_5cde49fb6da54846950ba9928635d348.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_5cde49fb6da54846950ba9928635d348.FontWeight = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Text.FontWeight, "Bold"), Windows.UI.Text.FontWeight), Windows.UI.Text.FontWeight));

                var Path_7d90d8d757b14c2a9d5d35afcc3f9f9f = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                Path_7d90d8d757b14c2a9d5d35afcc3f9f9f.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M14,2A8,8 0 0,0 6,10A8,8 0 0,0 14,18A8,8 0 0,0 22,10H20C20,13.32 17.32,16 14,16A6,6 0 0,1 8,10A6,6 0 0,1 14,4C14.43,4 14.86,4.05 15.27,4.14L16.88,2.54C15.96,2.18 15,2 14,2M20.59,3.58L14,10.17L11.62,7.79L10.21,9.21L14,13L22,5M4.93,5.82C3.08,7.34 2,9.61 2,12A8,8 0 0,0 10,20C10.64,20 11.27,19.92 11.88,19.77C10.12,19.38 8.5,18.5 7.17,17.29C5.22,16.25 4,14.21 4,12C4,11.7 4.03,11.41 4.07,11.11C4.03,10.74 4,10.37 4,10C4,8.56 4.32,7.13 4.93,5.82Z"), Windows.UI.Xaml.Media.Geometry);
                Path_7d90d8d757b14c2a9d5d35afcc3f9f9f.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Path_7d90d8d757b14c2a9d5d35afcc3f9f9f.Width = 15.0;
                Path_7d90d8d757b14c2a9d5d35afcc3f9f9f.Height = 15.0;
                Path_7d90d8d757b14c2a9d5d35afcc3f9f9f.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_7d90d8d757b14c2a9d5d35afcc3f9f9f.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_7d90d8d757b14c2a9d5d35afcc3f9f9f.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(5, 0, 0, 0);

                StackPanel_25300c15495945a6a9083948ab59506f.Children.add(TextBlock_5cde49fb6da54846950ba9928635d348);
                StackPanel_25300c15495945a6a9083948ab59506f.Children.add(Path_7d90d8d757b14c2a9d5d35afcc3f9f9f);


                this.RegisterName$1("PatentInfo", TextBlock_500ef544715f4c2ea9500145a3d827f3);
                TextBlock_500ef544715f4c2ea9500145a3d827f3.Name = "PatentInfo";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_500ef544715f4c2ea9500145a3d827f3, 2);
                TextBlock_500ef544715f4c2ea9500145a3d827f3.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 3, 0);
                TextBlock_500ef544715f4c2ea9500145a3d827f3.Text = "Patent Pending";
                TextBlock_500ef544715f4c2ea9500145a3d827f3.FontSize = 12.0;
                TextBlock_500ef544715f4c2ea9500145a3d827f3.Visibility = Bridge.global.Windows.UI.Xaml.Visibility.Visible;
                TextBlock_500ef544715f4c2ea9500145a3d827f3.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                TextBlock_500ef544715f4c2ea9500145a3d827f3.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_500ef544715f4c2ea9500145a3d827f3.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                TextBlock_500ef544715f4c2ea9500145a3d827f3.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_500ef544715f4c2ea9500145a3d827f3.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Right;

                Grid_093efbb0f7fc4606b2b8cf3c15b484d9.Children.add(Grid_3d636102c5124114a93ba83b0005cf7c);
                Grid_093efbb0f7fc4606b2b8cf3c15b484d9.Children.add(StackPanel_25300c15495945a6a9083948ab59506f);
                Grid_093efbb0f7fc4606b2b8cf3c15b484d9.Children.add(TextBlock_500ef544715f4c2ea9500145a3d827f3);


                Border_e92fa0ce087042c19ad4157996fbc3b7.Child = Grid_093efbb0f7fc4606b2b8cf3c15b484d9;


                Grid_b11272f5fa984000af87c980606cb59f.Children.add(Grid_9ede9e5d7ad347e09816f81af5b493fb);
                Grid_b11272f5fa984000af87c980606cb59f.Children.add(Border_cbe45f037765468d89bf22fd32af1773);
                Grid_b11272f5fa984000af87c980606cb59f.Children.add(Border_e92fa0ce087042c19ad4157996fbc3b7);


                this.Content = Grid_b11272f5fa984000af87c980606cb59f;



                this.LeftColumn = ColumnDefinition_92351a392caf4b62a55bf5b0741ee3f0;
                this.MenuItemsContainer = ListBox_f751b4f94ad245db866be23ad14603ef;
                this.TheMenu = StackPanel_1a875b1aedaf465cb1189e0cc4526301;
                this.EmptySpaceThatWillBeRemovedOnSmallScreens = Border_160f3dbc11504e17ad5b7b67acfb3150;
                this.PageContainer = Border_c42efea8aef540f48f0a5495d6548498;
                this.CurrentPageScrollViewer = Grid_175976bdee2147c28764177523f596d8;
                this.Page = Grid_9dd74d35e94941c6874c320aaff4d868;
                this.LoadingMessage = Border_cbe45f037765468d89bf22fd32af1773;
                this.BackToMainMenuButtonInBreadcrumb = Button_453642a5bfea4f89b6042f12c748e67b;
                this.CurrentTutorialTitleInBreadcrumb = TextBlock_03919616ac3c407d9a44c7d3ada92f17;
                this.BreadcrumbNavigationPanel = Grid_3d636102c5124114a93ba83b0005cf7c;
                this.PatentInfo = TextBlock_500ef544715f4c2ea9500145a3d827f3;
                this.LayoutRoot = Grid_b11272f5fa984000af87c980606cb59f;



            }
        }
    });

    Bridge.define("SocraLogicHtml5.MainPage.CurrentState", {
        $kind: "nested enum",
        statics: {
            fields: {
                LargeResolution_SeeBothMenuAndPage: 0,
                SmallResolution_SeeMenuOnly: 1,
                SmallResolution_SeePageOnly: 2
            }
        }
    });

    Bridge.define("SocraLogicHtml5.MainPage.MenuItem", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new SocraLogicHtml5.MainPage.MenuItem(); }
            }
        },
        fields: {
            DisplayName: null,
            Type: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3805534614, this.DisplayName, this.Type]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, SocraLogicHtml5.MainPage.MenuItem)) {
                    return false;
                }
                return Bridge.equals(this.DisplayName, o.DisplayName) && Bridge.equals(this.Type, o.Type);
            },
            $clone: function (to) {
                var s = to || new SocraLogicHtml5.MainPage.MenuItem();
                s.DisplayName = this.DisplayName;
                s.Type = this.Type;
                return s;
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.System.SystemInfo", {
        inherits: [Windows.UI.Xaml.Controls.Page],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.Page.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\System\\SystemInfo.xaml";
                }



                var Grid_c9eae6fd868247f2a05e108f72c63662 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var StackPanel_a68673c0f63a49ada7987e03e292b8a7 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_a68673c0f63a49ada7987e03e292b8a7.MinWidth = 200.0;
                var TextBlock_dfbb9bce44bf45f1889cd9f5cb42f1e6 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_dfbb9bce44bf45f1889cd9f5cb42f1e6.Text = "System Info";
                TextBlock_dfbb9bce44bf45f1889cd9f5cb42f1e6.FontSize = 16.0;
                TextBlock_dfbb9bce44bf45f1889cd9f5cb42f1e6.FontWeight = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Text.FontWeight, "Bold"), Windows.UI.Text.FontWeight), Windows.UI.Text.FontWeight));
                TextBlock_dfbb9bce44bf45f1889cd9f5cb42f1e6.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);

                var TextBlock_94f62fab36dc4250b3ae8f98819eedba = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_94f62fab36dc4250b3ae8f98819eedba.Text = "Unless otherwise stated, all logic related content is my own, from Southern Evangelical Seminary, from https://www.merriam-webster.com, from http://markmcintire.com/phil/validforms.html, or from the following textbooks:";
                TextBlock_94f62fab36dc4250b3ae8f98819eedba.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 5, 0, 8);
                TextBlock_94f62fab36dc4250b3ae8f98819eedba.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_94f62fab36dc4250b3ae8f98819eedba.FontSize = 14.0;

                var TextBlock_aab29d496138478c915be2e96b34555b = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_aab29d496138478c915be2e96b34555b.Text = "Kreeft, Peter. Socratic Logic: A Logic Text Using Socratic Method, Platonic Questions, and Aristotelian Principles. Edition 3.1. St. Augustine's Press, 2010.";
                TextBlock_aab29d496138478c915be2e96b34555b.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(10, 0, 0, 8);
                TextBlock_aab29d496138478c915be2e96b34555b.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_aab29d496138478c915be2e96b34555b.FontSize = 14.0;

                var TextBlock_4ed2c80d9327426d9da8b160c06d5c77 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_4ed2c80d9327426d9da8b160c06d5c77.Text = "Bassham, Gregory, William Irwin, Henry Nardone, and James Wallace. Critical Thinking: A Student's Introduction. 4th edition. New York: McGraw Hill, 2011.";
                TextBlock_4ed2c80d9327426d9da8b160c06d5c77.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(10, 0, 0, 8);
                TextBlock_4ed2c80d9327426d9da8b160c06d5c77.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_4ed2c80d9327426d9da8b160c06d5c77.FontSize = 14.0;

                var TextBlock_fc55f90a27c64182863f5324a354c943 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_fc55f90a27c64182863f5324a354c943.Text = "All code related attribution is contained within the code itself in comments (e.g. to https://stackoverflow.com/, https://github.com/firstfloorsoftware/mui, http://modernuiicons.com/, etc.)";
                TextBlock_fc55f90a27c64182863f5324a354c943.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 8);
                TextBlock_fc55f90a27c64182863f5324a354c943.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_fc55f90a27c64182863f5324a354c943.FontSize = 14.0;

                var TextBlock_3b548d308f6241c2af1a223257d649cb = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_3b548d308f6241c2af1a223257d649cb.Text = "At least some of the software is under U.S. non-provisional patent application # 15/950,473 (patent pending 'TERM LOGIC TEXT ANALYSIS METHOD')";
                TextBlock_3b548d308f6241c2af1a223257d649cb.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 8);
                TextBlock_3b548d308f6241c2af1a223257d649cb.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_3b548d308f6241c2af1a223257d649cb.FontSize = 14.0;

                var TextBlock_01fb202a4988465aab51c8e634548f53 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_01fb202a4988465aab51c8e634548f53.Text = "- Douglas Austin Chadwick Jr. | Austin.Chadwick11@gmail.com";
                TextBlock_01fb202a4988465aab51c8e634548f53.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(10, 0, 0, 8);
                TextBlock_01fb202a4988465aab51c8e634548f53.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_01fb202a4988465aab51c8e634548f53.FontSize = 14.0;

                StackPanel_a68673c0f63a49ada7987e03e292b8a7.Children.add(TextBlock_dfbb9bce44bf45f1889cd9f5cb42f1e6);
                StackPanel_a68673c0f63a49ada7987e03e292b8a7.Children.add(TextBlock_94f62fab36dc4250b3ae8f98819eedba);
                StackPanel_a68673c0f63a49ada7987e03e292b8a7.Children.add(TextBlock_aab29d496138478c915be2e96b34555b);
                StackPanel_a68673c0f63a49ada7987e03e292b8a7.Children.add(TextBlock_4ed2c80d9327426d9da8b160c06d5c77);
                StackPanel_a68673c0f63a49ada7987e03e292b8a7.Children.add(TextBlock_fc55f90a27c64182863f5324a354c943);
                StackPanel_a68673c0f63a49ada7987e03e292b8a7.Children.add(TextBlock_3b548d308f6241c2af1a223257d649cb);
                StackPanel_a68673c0f63a49ada7987e03e292b8a7.Children.add(TextBlock_01fb202a4988465aab51c8e634548f53);


                Grid_c9eae6fd868247f2a05e108f72c63662.Children.add(StackPanel_a68673c0f63a49ada7987e03e292b8a7);


                this.Content = Grid_c9eae6fd868247f2a05e108f72c63662;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.BottomRegionView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\BottomRegionView.xaml";
                }



                var StackPanel_d5fe741ed51f449886547ea4240ed694 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_d5fe741ed51f449886547ea4240ed694.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Vertical;
                var StackPanel_47f0173236f3493cbb88f5061dc8bdf8 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_47f0173236f3493cbb88f5061dc8bdf8.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                StackPanel_47f0173236f3493cbb88f5061dc8bdf8.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                StackPanel_47f0173236f3493cbb88f5061dc8bdf8.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                var SelectPreviousStepView_8332cee34e514bdc95fd9b5f91049324 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.SelectPreviousStep.SelectPreviousStepView();

                var CheckAnswerView_5c9e39f2e4d24d76b5ce049e7ff87d4a = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.CheckAnswer.CheckAnswerView();

                var RetryAnswerView_48daf830d57c489a8b1ed911a184c59d = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.RetryAnswer.RetryAnswerView();

                var SelectNextStepView_3bb89da91b3b4cbfb7cce89d41ed6596 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.SelectNextStep.SelectNextStepView();

                StackPanel_47f0173236f3493cbb88f5061dc8bdf8.Children.add(SelectPreviousStepView_8332cee34e514bdc95fd9b5f91049324);
                StackPanel_47f0173236f3493cbb88f5061dc8bdf8.Children.add(CheckAnswerView_5c9e39f2e4d24d76b5ce049e7ff87d4a);
                StackPanel_47f0173236f3493cbb88f5061dc8bdf8.Children.add(RetryAnswerView_48daf830d57c489a8b1ed911a184c59d);
                StackPanel_47f0173236f3493cbb88f5061dc8bdf8.Children.add(SelectNextStepView_3bb89da91b3b4cbfb7cce89d41ed6596);


                StackPanel_d5fe741ed51f449886547ea4240ed694.Children.add(StackPanel_47f0173236f3493cbb88f5061dc8bdf8);


                this.Content = StackPanel_d5fe741ed51f449886547ea4240ed694;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.CenterRegionView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\CenterRegionView.xaml";
                }



                var BooleanToVisibilityConverter_38df82d7acad4ea1811d7086195a40b0 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_38df82d7acad4ea1811d7086195a40b0);

                var Grid_4926bb2a04eb47b0990bbf5cea6c3997 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var DockPanel_622f5d9956d84979835b4c8d6376f5fd = new Bridge.global.Windows.UI.Xaml.Controls.DockPanel();
                var DockPanel_14e0f2db55204702bd808a1fb093698d = new Bridge.global.Windows.UI.Xaml.Controls.DockPanel();
                Bridge.global.Windows.UI.Xaml.Controls.DockPanel.SetDock(DockPanel_14e0f2db55204702bd808a1fb093698d, Bridge.global.Windows.UI.Xaml.Controls.Dock.Top);
                var MainContentTitleView_6811707cf7fe4af799c59a386e6315c9 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainContent.MainContentTitleView();

                DockPanel_14e0f2db55204702bd808a1fb093698d.Children.add(MainContentTitleView_6811707cf7fe4af799c59a386e6315c9);


                var ScrollViewer_0c51010d474641bf8ae12d4ab743556f = new Bridge.global.Windows.UI.Xaml.Controls.ScrollViewer();
                ScrollViewer_0c51010d474641bf8ae12d4ab743556f.HorizontalScrollBarVisibility = Bridge.global.Windows.UI.Xaml.Controls.ScrollBarVisibility.Disabled;
                ScrollViewer_0c51010d474641bf8ae12d4ab743556f.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 8, 0, 0);
                var StackPanel_c5a4bf94cad34993a45202f7699ee21c = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Vertical;
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 16, 0, 0);
                var Grid_52ef50cb7fd445c8b76d1051ee220274 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_52ef50cb7fd445c8b76d1051ee220274.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                Grid_52ef50cb7fd445c8b76d1051ee220274.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Grid_52ef50cb7fd445c8b76d1051ee220274.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 16, 4, 0);
                var ColumnDefinition_bfdf4de3f0d7404f8c1199ad7e048078 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_bfdf4de3f0d7404f8c1199ad7e048078.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_78082acf1ff048d5b8fc763f6b3e6847 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_78082acf1ff048d5b8fc763f6b3e6847.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_52ef50cb7fd445c8b76d1051ee220274.ColumnDefinitions.add(ColumnDefinition_bfdf4de3f0d7404f8c1199ad7e048078);
                Grid_52ef50cb7fd445c8b76d1051ee220274.ColumnDefinitions.add(ColumnDefinition_78082acf1ff048d5b8fc763f6b3e6847);

                var MainFeedbackView_e08d65a112504a7b8e31b8467d6ff159 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainFeedback.MainFeedbackView();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(MainFeedbackView_e08d65a112504a7b8e31b8467d6ff159, 0);
                MainFeedbackView_e08d65a112504a7b8e31b8467d6ff159.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                MainFeedbackView_e08d65a112504a7b8e31b8467d6ff159.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 4, 0, 0);

                var MainContentTextView_1386f5054fe94fa2b947199cc1a5ad60 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainContent.MainContentTextView();
                MainContentTextView_1386f5054fe94fa2b947199cc1a5ad60.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(MainContentTextView_1386f5054fe94fa2b947199cc1a5ad60, 1);

                Grid_52ef50cb7fd445c8b76d1051ee220274.Children.add(MainFeedbackView_e08d65a112504a7b8e31b8467d6ff159);
                Grid_52ef50cb7fd445c8b76d1051ee220274.Children.add(MainContentTextView_1386f5054fe94fa2b947199cc1a5ad60);


                var Grid_c9b095d5fb8f43ca977d9edf83a980b4 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_c9b095d5fb8f43ca977d9edf83a980b4.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                Grid_c9b095d5fb8f43ca977d9edf83a980b4.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Grid_c9b095d5fb8f43ca977d9edf83a980b4.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 16, 4, 0);
                var ColumnDefinition_4f79ae39475c4af5a892eab9764ea832 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_4f79ae39475c4af5a892eab9764ea832.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_ad1bdf4b70e74aad8b264a2430633078 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_ad1bdf4b70e74aad8b264a2430633078.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_c9b095d5fb8f43ca977d9edf83a980b4.ColumnDefinitions.add(ColumnDefinition_4f79ae39475c4af5a892eab9764ea832);
                Grid_c9b095d5fb8f43ca977d9edf83a980b4.ColumnDefinitions.add(ColumnDefinition_ad1bdf4b70e74aad8b264a2430633078);

                var MainFeedbackView_4f3198f9651b4ac781768c4c67bfd036 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainFeedback.MainFeedbackView();
                MainFeedbackView_4f3198f9651b4ac781768c4c67bfd036.Visibility = Bridge.global.Windows.UI.Xaml.Visibility.Collapsed;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(MainFeedbackView_4f3198f9651b4ac781768c4c67bfd036, 0);

                var StudentAnswerView_0802238dce3640fda37d9925040d7e4d = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswerView();
                StudentAnswerView_0802238dce3640fda37d9925040d7e4d.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StudentAnswerView_0802238dce3640fda37d9925040d7e4d, 1);

                Grid_c9b095d5fb8f43ca977d9edf83a980b4.Children.add(MainFeedbackView_4f3198f9651b4ac781768c4c67bfd036);
                Grid_c9b095d5fb8f43ca977d9edf83a980b4.Children.add(StudentAnswerView_0802238dce3640fda37d9925040d7e4d);


                var Grid_c869cb3566da4905b6775a1179b5b966 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_c869cb3566da4905b6775a1179b5b966.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                Grid_c869cb3566da4905b6775a1179b5b966.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Grid_c869cb3566da4905b6775a1179b5b966.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 16, 4, 0);
                var ColumnDefinition_9c8a95d62d45499089c704094b03a759 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_9c8a95d62d45499089c704094b03a759.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_70c86e968066403fbfaf1989db111ddc = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_70c86e968066403fbfaf1989db111ddc.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_c869cb3566da4905b6775a1179b5b966.ColumnDefinitions.add(ColumnDefinition_9c8a95d62d45499089c704094b03a759);
                Grid_c869cb3566da4905b6775a1179b5b966.ColumnDefinitions.add(ColumnDefinition_70c86e968066403fbfaf1989db111ddc);

                var MainFeedbackView_53ef04ed689e4eb1852f6c54030f9c0e = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainFeedback.MainFeedbackView();
                MainFeedbackView_53ef04ed689e4eb1852f6c54030f9c0e.Visibility = Bridge.global.Windows.UI.Xaml.Visibility.Collapsed;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(MainFeedbackView_53ef04ed689e4eb1852f6c54030f9c0e, 0);

                var StudentAnswer2View_690a32800c6f46cea57b0b705c54efec = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswer2View();
                StudentAnswer2View_690a32800c6f46cea57b0b705c54efec.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StudentAnswer2View_690a32800c6f46cea57b0b705c54efec, 1);

                Grid_c869cb3566da4905b6775a1179b5b966.Children.add(MainFeedbackView_53ef04ed689e4eb1852f6c54030f9c0e);
                Grid_c869cb3566da4905b6775a1179b5b966.Children.add(StudentAnswer2View_690a32800c6f46cea57b0b705c54efec);

                var Binding_abd9ad44f2304b4eb91ca1f1897503d9 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_abd9ad44f2304b4eb91ca1f1897503d9.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer2.AnyTextVisible");
                var StaticResourceExtension_8ef7a36c595d49eebb0bcdc8dace414f = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_8ef7a36c595d49eebb0bcdc8dace414f.ResourceKey = "BoolToVis";





                var Grid_dca9ac6a29444aeba15538d7efcbbf33 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_dca9ac6a29444aeba15538d7efcbbf33.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                Grid_dca9ac6a29444aeba15538d7efcbbf33.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Grid_dca9ac6a29444aeba15538d7efcbbf33.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 16, 4, 0);
                var ColumnDefinition_8e7dddce36344da8871cb9328cb7fdb1 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_8e7dddce36344da8871cb9328cb7fdb1.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_182bf59f1a0745aaa3ed7cee631d5f1a = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_182bf59f1a0745aaa3ed7cee631d5f1a.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_dca9ac6a29444aeba15538d7efcbbf33.ColumnDefinitions.add(ColumnDefinition_8e7dddce36344da8871cb9328cb7fdb1);
                Grid_dca9ac6a29444aeba15538d7efcbbf33.ColumnDefinitions.add(ColumnDefinition_182bf59f1a0745aaa3ed7cee631d5f1a);

                var MainFeedbackView_23ed755372ab44b3a789b9b4187e863b = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainFeedback.MainFeedbackView();
                MainFeedbackView_23ed755372ab44b3a789b9b4187e863b.Visibility = Bridge.global.Windows.UI.Xaml.Visibility.Collapsed;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(MainFeedbackView_23ed755372ab44b3a789b9b4187e863b, 0);

                var StudentAnswer3View_93012d44f562482bb117b9e2b6c358d6 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswer3View();
                StudentAnswer3View_93012d44f562482bb117b9e2b6c358d6.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StudentAnswer3View_93012d44f562482bb117b9e2b6c358d6, 1);

                Grid_dca9ac6a29444aeba15538d7efcbbf33.Children.add(MainFeedbackView_23ed755372ab44b3a789b9b4187e863b);
                Grid_dca9ac6a29444aeba15538d7efcbbf33.Children.add(StudentAnswer3View_93012d44f562482bb117b9e2b6c358d6);

                var Binding_d7c616d773284b62819debff7d4ef3db = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_d7c616d773284b62819debff7d4ef3db.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer3.AnyTextVisible");
                var StaticResourceExtension_58e92aecca624e0e9fa00f9d69e336ec = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_58e92aecca624e0e9fa00f9d69e336ec.ResourceKey = "BoolToVis";





                var StatsView_a117751bca7f48cbad1b2434eecb3729 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.Stats.StatsView();

                var FeedbackDetailView_47a694eff2404f329e195f7f8ce52285 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.FeedbackDetail.FeedbackDetailView();

                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Children.add(Grid_52ef50cb7fd445c8b76d1051ee220274);
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Children.add(Grid_c9b095d5fb8f43ca977d9edf83a980b4);
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Children.add(Grid_c869cb3566da4905b6775a1179b5b966);
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Children.add(Grid_dca9ac6a29444aeba15538d7efcbbf33);
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Children.add(StatsView_a117751bca7f48cbad1b2434eecb3729);
                StackPanel_c5a4bf94cad34993a45202f7699ee21c.Children.add(FeedbackDetailView_47a694eff2404f329e195f7f8ce52285);


                ScrollViewer_0c51010d474641bf8ae12d4ab743556f.Content = StackPanel_c5a4bf94cad34993a45202f7699ee21c;


                DockPanel_622f5d9956d84979835b4c8d6376f5fd.Children.add(DockPanel_14e0f2db55204702bd808a1fb093698d);
                DockPanel_622f5d9956d84979835b4c8d6376f5fd.Children.add(ScrollViewer_0c51010d474641bf8ae12d4ab743556f);


                Grid_4926bb2a04eb47b0990bbf5cea6c3997.Children.add(DockPanel_622f5d9956d84979835b4c8d6376f5fd);


                this.Content = Grid_4926bb2a04eb47b0990bbf5cea6c3997;





                var parents_0aded1dfb1eb44eeb4a8efed91acfe3d = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_0aded1dfb1eb44eeb4a8efed91acfe3d.add(Grid_c869cb3566da4905b6775a1179b5b966);
                parents_0aded1dfb1eb44eeb4a8efed91acfe3d.add(StackPanel_c5a4bf94cad34993a45202f7699ee21c);
                parents_0aded1dfb1eb44eeb4a8efed91acfe3d.add(ScrollViewer_0c51010d474641bf8ae12d4ab743556f);
                parents_0aded1dfb1eb44eeb4a8efed91acfe3d.add(DockPanel_622f5d9956d84979835b4c8d6376f5fd);
                parents_0aded1dfb1eb44eeb4a8efed91acfe3d.add(Grid_4926bb2a04eb47b0990bbf5cea6c3997);
                parents_0aded1dfb1eb44eeb4a8efed91acfe3d.add(this);
                Binding_abd9ad44f2304b4eb91ca1f1897503d9.Converter = Bridge.cast((StaticResourceExtension_8ef7a36c595d49eebb0bcdc8dace414f.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_abd9ad44f2304b4eb91ca1f1897503d9, null, parents_0aded1dfb1eb44eeb4a8efed91acfe3d))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_c869cb3566da4905b6775a1179b5b966, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_abd9ad44f2304b4eb91ca1f1897503d9);
                var parents_b8323f7e47684d0994693bffcbdc69ff = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_b8323f7e47684d0994693bffcbdc69ff.add(Grid_dca9ac6a29444aeba15538d7efcbbf33);
                parents_b8323f7e47684d0994693bffcbdc69ff.add(StackPanel_c5a4bf94cad34993a45202f7699ee21c);
                parents_b8323f7e47684d0994693bffcbdc69ff.add(ScrollViewer_0c51010d474641bf8ae12d4ab743556f);
                parents_b8323f7e47684d0994693bffcbdc69ff.add(DockPanel_622f5d9956d84979835b4c8d6376f5fd);
                parents_b8323f7e47684d0994693bffcbdc69ff.add(Grid_4926bb2a04eb47b0990bbf5cea6c3997);
                parents_b8323f7e47684d0994693bffcbdc69ff.add(this);
                Binding_d7c616d773284b62819debff7d4ef3db.Converter = Bridge.cast((StaticResourceExtension_58e92aecca624e0e9fa00f9d69e336ec.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_d7c616d773284b62819debff7d4ef3db, null, parents_b8323f7e47684d0994693bffcbdc69ff))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_dca9ac6a29444aeba15538d7efcbbf33, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_d7c616d773284b62819debff7d4ef3db);

            }
        }
    });

    Bridge.define("TutorialVm.Factory.Production.ProductionTutorialViewModelFactory", {
        fields: {
            AppearanceManagerWrapper: null,
            FileReader: null,
            LoadDeserializedDataIntoSteps: null,
            Messenger: null,
            PersistTutorialVisitor: null,
            TutorialDeserializer: null,
            TutorialViewModelPersistenceData: null,
            TutorialViewModelFactory: null,
            TutorialNameToXmlFileNameDictionary: null
        },
        methods: {
            Create: function (tutorial) {
                this.CreateProductionTutorialViewModelFactory(tutorial.Tutorial$ITutorial$Name);
                return this.CreateProductionTutorialViewModel(tutorial);
            },
            CreateProductionTutorialViewModelFactory: function (tutorialName) {
                this.CreateProductionAppearanceManager();
                this.CreateProductionMessenger();
                this.CreateTutorialNameToXmlFileNameDictionary();
                this.CreateProductionTutorialViewModelPersistenceData(tutorialName);

                this.TutorialViewModelFactory = new TutorialVm.Factory.TutorialViewModelFactory(this.AppearanceManagerWrapper, this.Messenger, this.TutorialViewModelPersistenceData);
            },
            CreateTutorialNameToXmlFileNameDictionary: function () {
                var tutorialDictionaryFactory = new Tutorial.Dictionaries.TutorialDictionaryFactory();
                this.TutorialNameToXmlFileNameDictionary = tutorialDictionaryFactory.CreateTutorialNameToXmlFileNameDictionary();
            },
            CreateProductionTutorialViewModelPersistenceData: function (tutorialName) {
                var filePath = this.TutorialNameToXmlFileNameDictionary.getItem(tutorialName);
                this.CreateProductionPersistenceData(filePath);
                this.CreateAndLoadTutorialViewModelPersistenceData();
            },
            CreateAndLoadTutorialViewModelPersistenceData: function () {
                this.TutorialViewModelPersistenceData = new TutorialVm.Factory.TutorialViewModelPersistenceData();
                this.TutorialViewModelPersistenceData.PersistTutorialVisitor = this.PersistTutorialVisitor;
                this.TutorialViewModelPersistenceData.TutorialDeserializer = this.TutorialDeserializer;
                this.TutorialViewModelPersistenceData.LoadDeserializedDataIntoSteps = this.LoadDeserializedDataIntoSteps;
                this.TutorialViewModelPersistenceData.FileReader = this.FileReader;
            },
            CreateProductionTutorialViewModel: function (tutorial) {
                return this.TutorialViewModelFactory.TutorialVm$Factory$ITutorialViewModelFactory$Create(tutorial, true);
            }
        }
    });

    Bridge.define("TutorialPersistence.Deserializer.ITutorialDeserializer", {
        $kind: "interface"
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Instances.CategoricalLogicSyntax.CategoricalLogicSyntaxTutorialView", {
        inherits: [Windows.UI.Xaml.Controls.Page],
        fields: {
            _productionTutorialViewModelFactory: null,
            _tutorialViewModel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.Page.ctor.call(this);
                this.InitializeComponent();
                this.addLoaded(Bridge.fn.cacheBind(this, this.ViewLoaded));

                var categoricalLogicSyntaxTutorial = new Tutorial.Instances.CategoricalLogicSyntaxTutorialFactory().Create();
                this._productionTutorialViewModelFactory = new SocraLogicHtml5.Pages.Tutorials.Factory.Production.ProductionHtml5TutorialViewModelFactory();
                this._tutorialViewModel = this._productionTutorialViewModelFactory.Create(categoricalLogicSyntaxTutorial);
                this.DataContext = this._tutorialViewModel;
            }
        },
        methods: {
            ViewLoaded: function (sender, e) {
                this._tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(new TutorialVm.Visitors.SetInitialFocusForSelectedStep.SetInitialFocusForCurrentStepVisitor());
            },
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\Instances\\CategoricalLogicSyntaxTutorialView.xaml";
                }



                var TutorialView_d66d8ee388f746b99c44788d75490549 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialView();

                this.Content = TutorialView_d66d8ee388f746b99c44788d75490549;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Instances.ImmediateDeductionsTutorialView", {
        inherits: [Windows.UI.Xaml.Controls.Page],
        fields: {
            _productionTutorialViewModelFactory: null,
            _tutorialViewModel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.Page.ctor.call(this);
                this.InitializeComponent();
                this.addLoaded(Bridge.fn.cacheBind(this, this.ViewLoaded));

                var immediateDeductionsTutorial = new Tutorial.Instances.ImmediateDeductionsTutorialFactory().Create();
                this._productionTutorialViewModelFactory = new SocraLogicHtml5.Pages.Tutorials.Factory.Production.ProductionHtml5TutorialViewModelFactory();
                this._tutorialViewModel = this._productionTutorialViewModelFactory.Create(immediateDeductionsTutorial);
                this.DataContext = this._tutorialViewModel;
            }
        },
        methods: {
            ViewLoaded: function (sender, e) {
                this._tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(new TutorialVm.Visitors.SetInitialFocusForSelectedStep.SetInitialFocusForCurrentStepVisitor());
            },
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\Instances\\ImmediateDeductionsTutorialView.xaml";
                }



                var TutorialView_43df92ee83a04910a43eb9b06bab78a7 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialView();

                this.Content = TutorialView_43df92ee83a04910a43eb9b06bab78a7;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Instances.RelationsBetweenPropositionsTutorialView", {
        inherits: [Windows.UI.Xaml.Controls.Page],
        fields: {
            _productionTutorialViewModelFactory: null,
            _tutorialViewModel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.Page.ctor.call(this);
                this.InitializeComponent();
                this.addLoaded(Bridge.fn.cacheBind(this, this.ViewLoaded));

                var relationsBetweenPropositionsTutorial = new Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory().Create();
                this._productionTutorialViewModelFactory = new SocraLogicHtml5.Pages.Tutorials.Factory.Production.ProductionHtml5TutorialViewModelFactory();
                this._tutorialViewModel = this._productionTutorialViewModelFactory.Create(relationsBetweenPropositionsTutorial);
                this.DataContext = this._tutorialViewModel;
            }
        },
        methods: {
            ViewLoaded: function (sender, e) {
                this._tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(new TutorialVm.Visitors.SetInitialFocusForSelectedStep.SetInitialFocusForCurrentStepVisitor());
            },
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\Instances\\RelationsBetweenPropositionsTutorialView.xaml";
                }



                var TutorialView_5b3aa8ae4c864f869f19c1a6263e5762 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialView();

                this.Content = TutorialView_5b3aa8ae4c864f869f19c1a6263e5762;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Instances.SyllogismsTutorialView", {
        inherits: [Windows.UI.Xaml.Controls.Page],
        fields: {
            _productionTutorialViewModelFactory: null,
            _tutorialViewModel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.Page.ctor.call(this);
                this.InitializeComponent();
                this.addLoaded(Bridge.fn.cacheBind(this, this.ViewLoaded));

                var syllogismsTutorial = new Tutorial.Instances.SyllogismsTutorialFactory().Create();
                this._productionTutorialViewModelFactory = new SocraLogicHtml5.Pages.Tutorials.Factory.Production.ProductionHtml5TutorialViewModelFactory();
                this._tutorialViewModel = this._productionTutorialViewModelFactory.Create(syllogismsTutorial);
                this.DataContext = this._tutorialViewModel;
            }
        },
        methods: {
            ViewLoaded: function (sender, e) {
                this._tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(new TutorialVm.Visitors.SetInitialFocusForSelectedStep.SetInitialFocusForCurrentStepVisitor());
            },
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\Instances\\SyllogismsTutorialView.xaml";
                }



                var TutorialView_5078c05f6ac543149adee66d331c2cbd = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialView();

                this.Content = TutorialView_5078c05f6ac543149adee66d331c2cbd;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Instances.TranslatingIntoCategoricalPropositionsTutorialView", {
        inherits: [Windows.UI.Xaml.Controls.Page],
        fields: {
            _productionTutorialViewModelFactory: null,
            _tutorialViewModel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.Page.ctor.call(this);
                this.InitializeComponent();
                this.addLoaded(Bridge.fn.cacheBind(this, this.ViewLoaded));

                var translatingIntoCategoricalPropositionsTutorial = new Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory().Create();
                this._productionTutorialViewModelFactory = new SocraLogicHtml5.Pages.Tutorials.Factory.Production.ProductionHtml5TutorialViewModelFactory();
                this._tutorialViewModel = this._productionTutorialViewModelFactory.Create(translatingIntoCategoricalPropositionsTutorial);
                this.DataContext = this._tutorialViewModel;
            }
        },
        methods: {
            ViewLoaded: function (sender, e) {
                this._tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(new TutorialVm.Visitors.SetInitialFocusForSelectedStep.SetInitialFocusForCurrentStepVisitor());
            },
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\Instances\\TranslatingIntoCategoricalPropositionsTutorialView.xaml";
                }



                var TutorialView_e44647892ec24b0093748afc773ccbb0 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialView();

                this.Content = TutorialView_e44647892ec24b0093748afc773ccbb0;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.LeftRegionExpaderView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            ChevronLeft: null,
            HideTutorialStepsButton: null,
            ChevronRight: null,
            ShowTutorialStepsButton: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\LeftRegionExpaderView.xaml";
                }

                var Path_306c6b7268cb4c72b400e4de59b4c700 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Button_1625950925db468f91631dc43eeff3f6 = new Bridge.global.Windows.UI.Xaml.Controls.Button();
                var Path_2c1b9b13db814986846be37efd41af9f = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Button_f5a4a879a3cd49d1abf893986aca3efe = new Bridge.global.Windows.UI.Xaml.Controls.Button();

                var BooleanToVisibilityConverter_bd5503a99e76499a8ad2f307c11d22fa = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_bd5503a99e76499a8ad2f307c11d22fa);

                var Grid_049202994bff41d2803c71197dd1041b = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_049202994bff41d2803c71197dd1041b.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Grid_049202994bff41d2803c71197dd1041b.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Grid_049202994bff41d2803c71197dd1041b.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(16, 0, 16, 0);
                this.RegisterName$1("HideTutorialStepsButton", Button_1625950925db468f91631dc43eeff3f6);
                Button_1625950925db468f91631dc43eeff3f6.Name = "HideTutorialStepsButton";
                Button_1625950925db468f91631dc43eeff3f6.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Button_1625950925db468f91631dc43eeff3f6.Height = 18.0;
                Button_1625950925db468f91631dc43eeff3f6.Width = 18.0;
                Button_1625950925db468f91631dc43eeff3f6.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 2, 0, 0);
                Button_1625950925db468f91631dc43eeff3f6.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                this.RegisterName$1("ChevronLeft", Path_306c6b7268cb4c72b400e4de59b4c700);
                Path_306c6b7268cb4c72b400e4de59b4c700.Name = "ChevronLeft";
                Path_306c6b7268cb4c72b400e4de59b4c700.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                Path_306c6b7268cb4c72b400e4de59b4c700.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_306c6b7268cb4c72b400e4de59b4c700.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_306c6b7268cb4c72b400e4de59b4c700.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_306c6b7268cb4c72b400e4de59b4c700.Height = 6.0;
                Path_306c6b7268cb4c72b400e4de59b4c700.Width = 6.0;
                Path_306c6b7268cb4c72b400e4de59b4c700.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 35.8724,37.6042L 39.0391,40.7708L 50.5182,51.8542L 40.2266,51.8542L 25.1849,37.6041L 40.2266,23.3542L 50.5182,23.3542L 39.0391,34.4375L 35.8724,37.6042 Z"), Windows.UI.Xaml.Media.Geometry);

                Button_1625950925db468f91631dc43eeff3f6.Content = Path_306c6b7268cb4c72b400e4de59b4c700;

                var Binding_9f2c1e14828148958b2a4e9eae0c06f7 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_9f2c1e14828148958b2a4e9eae0c06f7.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.HideButtonVisible");
                var StaticResourceExtension_40424cb8109d4c648c76f6516b0e5431 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_40424cb8109d4c648c76f6516b0e5431.ResourceKey = "BoolToVis";




                var Binding_3cea883a37bc4cac9c80234ef2d01e18 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_3cea883a37bc4cac9c80234ef2d01e18.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.Hide");



                this.RegisterName$1("ShowTutorialStepsButton", Button_f5a4a879a3cd49d1abf893986aca3efe);
                Button_f5a4a879a3cd49d1abf893986aca3efe.Name = "ShowTutorialStepsButton";
                Button_f5a4a879a3cd49d1abf893986aca3efe.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Button_f5a4a879a3cd49d1abf893986aca3efe.Height = 18.0;
                Button_f5a4a879a3cd49d1abf893986aca3efe.Width = 18.0;
                Button_f5a4a879a3cd49d1abf893986aca3efe.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 2, 0, 0);
                Button_f5a4a879a3cd49d1abf893986aca3efe.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                this.RegisterName$1("ChevronRight", Path_2c1b9b13db814986846be37efd41af9f);
                Path_2c1b9b13db814986846be37efd41af9f.Name = "ChevronRight";
                Path_2c1b9b13db814986846be37efd41af9f.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                Path_2c1b9b13db814986846be37efd41af9f.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_2c1b9b13db814986846be37efd41af9f.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_2c1b9b13db814986846be37efd41af9f.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_2c1b9b13db814986846be37efd41af9f.Height = 6.0;
                Path_2c1b9b13db814986846be37efd41af9f.Width = 6.0;
                Path_2c1b9b13db814986846be37efd41af9f.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 39.8307,37.6042L 36.6641,34.4375L 25.1849,23.3542L 35.4766,23.3542L 50.5182,37.6042L 35.4766,51.8542L 25.1849,51.8542L 36.6641,40.7708L 39.8307,37.6042 Z"), Windows.UI.Xaml.Media.Geometry);

                Button_f5a4a879a3cd49d1abf893986aca3efe.Content = Path_2c1b9b13db814986846be37efd41af9f;

                var Binding_bd647654b698423180deffd1b73a26d0 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_bd647654b698423180deffd1b73a26d0.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.ShowButtonVisible");
                var StaticResourceExtension_b143b41366de424497bc224784d5930e = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_b143b41366de424497bc224784d5930e.ResourceKey = "BoolToVis";




                var Binding_1ddaa18573664f988c528e12ed20f266 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1ddaa18573664f988c528e12ed20f266.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.Show");



                Grid_049202994bff41d2803c71197dd1041b.Children.add(Button_1625950925db468f91631dc43eeff3f6);
                Grid_049202994bff41d2803c71197dd1041b.Children.add(Button_f5a4a879a3cd49d1abf893986aca3efe);


                this.Content = Grid_049202994bff41d2803c71197dd1041b;



                this.ChevronLeft = Path_306c6b7268cb4c72b400e4de59b4c700;
                this.HideTutorialStepsButton = Button_1625950925db468f91631dc43eeff3f6;
                this.ChevronRight = Path_2c1b9b13db814986846be37efd41af9f;
                this.ShowTutorialStepsButton = Button_f5a4a879a3cd49d1abf893986aca3efe;

                var parents_a7d2e173a3e14568a4ca58496532447f = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_a7d2e173a3e14568a4ca58496532447f.add(Button_1625950925db468f91631dc43eeff3f6);
                parents_a7d2e173a3e14568a4ca58496532447f.add(Grid_049202994bff41d2803c71197dd1041b);
                parents_a7d2e173a3e14568a4ca58496532447f.add(this);
                Binding_9f2c1e14828148958b2a4e9eae0c06f7.Converter = Bridge.cast((StaticResourceExtension_40424cb8109d4c648c76f6516b0e5431.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_9f2c1e14828148958b2a4e9eae0c06f7, null, parents_a7d2e173a3e14568a4ca58496532447f))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_1625950925db468f91631dc43eeff3f6, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_9f2c1e14828148958b2a4e9eae0c06f7);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_1625950925db468f91631dc43eeff3f6, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_3cea883a37bc4cac9c80234ef2d01e18);
                var parents_63dfa56dded446e9bdb582d62dc98ffb = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_63dfa56dded446e9bdb582d62dc98ffb.add(Button_f5a4a879a3cd49d1abf893986aca3efe);
                parents_63dfa56dded446e9bdb582d62dc98ffb.add(Grid_049202994bff41d2803c71197dd1041b);
                parents_63dfa56dded446e9bdb582d62dc98ffb.add(this);
                Binding_bd647654b698423180deffd1b73a26d0.Converter = Bridge.cast((StaticResourceExtension_b143b41366de424497bc224784d5930e.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_bd647654b698423180deffd1b73a26d0, null, parents_63dfa56dded446e9bdb582d62dc98ffb))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_f5a4a879a3cd49d1abf893986aca3efe, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_bd647654b698423180deffd1b73a26d0);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_f5a4a879a3cd49d1abf893986aca3efe, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_1ddaa18573664f988c528e12ed20f266);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.LeftRegionView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\LeftRegionView.xaml";
                }



                var StepListView_c5689e61f62e43f9acae6ebca7335f6b = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.StepList.StepListView();

                this.Content = StepListView_c5689e61f62e43f9acae6ebca7335f6b;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.PropositionInspector.ShowOrHidePropositionInspectorView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            ChevronRight: null,
            HidePropositionDataButton: null,
            ChevronLeft: null,
            ShowPropositionDataButton: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\PropositionInspector\\ShowOrHidePropositionInspectorView.xaml";
                }

                var Path_adb22363b49a4822a18aa856a3779d63 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Button_0803c386509c477b8d7a52acae3dd500 = new Bridge.global.Windows.UI.Xaml.Controls.Button();
                var Path_a6461e144e1a4833ac4e2f7a53d8b817 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Button_7d90c0685aa348b4b3056fe7a0e82c2e = new Bridge.global.Windows.UI.Xaml.Controls.Button();

                var BooleanToVisibilityConverter_95925f28b50d41ccba8cfeb2e21ba245 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_95925f28b50d41ccba8cfeb2e21ba245);

                var Grid_f1def89d5b8042da91e528be4e57367f = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var Grid_105cbe0a73304d74adebe639f5769f58 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_105cbe0a73304d74adebe639f5769f58.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Top;
                Grid_105cbe0a73304d74adebe639f5769f58.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Grid_105cbe0a73304d74adebe639f5769f58.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(16, 0, 16, 0);
                this.RegisterName$1("HidePropositionDataButton", Button_0803c386509c477b8d7a52acae3dd500);
                Button_0803c386509c477b8d7a52acae3dd500.Name = "HidePropositionDataButton";
                Button_0803c386509c477b8d7a52acae3dd500.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Button_0803c386509c477b8d7a52acae3dd500.Height = 18.0;
                Button_0803c386509c477b8d7a52acae3dd500.Width = 18.0;
                Button_0803c386509c477b8d7a52acae3dd500.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 2, 0, 0);
                Button_0803c386509c477b8d7a52acae3dd500.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                this.RegisterName$1("ChevronRight", Path_adb22363b49a4822a18aa856a3779d63);
                Path_adb22363b49a4822a18aa856a3779d63.Name = "ChevronRight";
                Path_adb22363b49a4822a18aa856a3779d63.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                Path_adb22363b49a4822a18aa856a3779d63.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_adb22363b49a4822a18aa856a3779d63.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_adb22363b49a4822a18aa856a3779d63.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_adb22363b49a4822a18aa856a3779d63.Height = 6.0;
                Path_adb22363b49a4822a18aa856a3779d63.Width = 6.0;
                Path_adb22363b49a4822a18aa856a3779d63.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 39.8307,37.6042L 36.6641,34.4375L 25.1849,23.3542L 35.4766,23.3542L 50.5182,37.6042L 35.4766,51.8542L 25.1849,51.8542L 36.6641,40.7708L 39.8307,37.6042 Z"), Windows.UI.Xaml.Media.Geometry);

                Button_0803c386509c477b8d7a52acae3dd500.Content = Path_adb22363b49a4822a18aa856a3779d63;

                var Binding_22453dab921443cfb01b94c19970b6bc = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_22453dab921443cfb01b94c19970b6bc.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("PropositionInspector.HideButtonVisible");
                var StaticResourceExtension_a77ff7536dd349d1819cb7a4435908bf = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_a77ff7536dd349d1819cb7a4435908bf.ResourceKey = "BoolToVis";




                var Binding_439ac3901ee042878f8ab2c8589d1bc4 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_439ac3901ee042878f8ab2c8589d1bc4.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("PropositionInspector.Hide");



                this.RegisterName$1("ShowPropositionDataButton", Button_7d90c0685aa348b4b3056fe7a0e82c2e);
                Button_7d90c0685aa348b4b3056fe7a0e82c2e.Name = "ShowPropositionDataButton";
                Button_7d90c0685aa348b4b3056fe7a0e82c2e.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Button_7d90c0685aa348b4b3056fe7a0e82c2e.Height = 18.0;
                Button_7d90c0685aa348b4b3056fe7a0e82c2e.Width = 18.0;
                Button_7d90c0685aa348b4b3056fe7a0e82c2e.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 2, 0, 0);
                Button_7d90c0685aa348b4b3056fe7a0e82c2e.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                this.RegisterName$1("ChevronLeft", Path_a6461e144e1a4833ac4e2f7a53d8b817);
                Path_a6461e144e1a4833ac4e2f7a53d8b817.Name = "ChevronLeft";
                Path_a6461e144e1a4833ac4e2f7a53d8b817.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                Path_a6461e144e1a4833ac4e2f7a53d8b817.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_a6461e144e1a4833ac4e2f7a53d8b817.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_a6461e144e1a4833ac4e2f7a53d8b817.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_a6461e144e1a4833ac4e2f7a53d8b817.Height = 6.0;
                Path_a6461e144e1a4833ac4e2f7a53d8b817.Width = 6.0;
                Path_a6461e144e1a4833ac4e2f7a53d8b817.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 35.8724,37.6042L 39.0391,40.7708L 50.5182,51.8542L 40.2266,51.8542L 25.1849,37.6041L 40.2266,23.3542L 50.5182,23.3542L 39.0391,34.4375L 35.8724,37.6042 Z"), Windows.UI.Xaml.Media.Geometry);

                Button_7d90c0685aa348b4b3056fe7a0e82c2e.Content = Path_a6461e144e1a4833ac4e2f7a53d8b817;

                var Binding_83165e9807d2440ea12d6e14aade92fc = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_83165e9807d2440ea12d6e14aade92fc.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("PropositionInspector.ShowButtonVisible");
                var StaticResourceExtension_6c6e1a6901d340e592dab807010868ce = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_6c6e1a6901d340e592dab807010868ce.ResourceKey = "BoolToVis";




                var Binding_20759e4ec2f04025bb4a68b442e7476b = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_20759e4ec2f04025bb4a68b442e7476b.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("PropositionInspector.Show");



                Grid_105cbe0a73304d74adebe639f5769f58.Children.add(Button_0803c386509c477b8d7a52acae3dd500);
                Grid_105cbe0a73304d74adebe639f5769f58.Children.add(Button_7d90c0685aa348b4b3056fe7a0e82c2e);


                Grid_f1def89d5b8042da91e528be4e57367f.Children.add(Grid_105cbe0a73304d74adebe639f5769f58);


                this.Content = Grid_f1def89d5b8042da91e528be4e57367f;



                this.ChevronRight = Path_adb22363b49a4822a18aa856a3779d63;
                this.HidePropositionDataButton = Button_0803c386509c477b8d7a52acae3dd500;
                this.ChevronLeft = Path_a6461e144e1a4833ac4e2f7a53d8b817;
                this.ShowPropositionDataButton = Button_7d90c0685aa348b4b3056fe7a0e82c2e;

                var parents_d8bc733f8a6743829690c33966932b3b = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_d8bc733f8a6743829690c33966932b3b.add(Button_0803c386509c477b8d7a52acae3dd500);
                parents_d8bc733f8a6743829690c33966932b3b.add(Grid_105cbe0a73304d74adebe639f5769f58);
                parents_d8bc733f8a6743829690c33966932b3b.add(Grid_f1def89d5b8042da91e528be4e57367f);
                parents_d8bc733f8a6743829690c33966932b3b.add(this);
                Binding_22453dab921443cfb01b94c19970b6bc.Converter = Bridge.cast((StaticResourceExtension_a77ff7536dd349d1819cb7a4435908bf.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_22453dab921443cfb01b94c19970b6bc, null, parents_d8bc733f8a6743829690c33966932b3b))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_0803c386509c477b8d7a52acae3dd500, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_22453dab921443cfb01b94c19970b6bc);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_0803c386509c477b8d7a52acae3dd500, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_439ac3901ee042878f8ab2c8589d1bc4);
                var parents_96d16a5225744f358ff10a262f8920ea = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_96d16a5225744f358ff10a262f8920ea.add(Button_7d90c0685aa348b4b3056fe7a0e82c2e);
                parents_96d16a5225744f358ff10a262f8920ea.add(Grid_105cbe0a73304d74adebe639f5769f58);
                parents_96d16a5225744f358ff10a262f8920ea.add(Grid_f1def89d5b8042da91e528be4e57367f);
                parents_96d16a5225744f358ff10a262f8920ea.add(this);
                Binding_83165e9807d2440ea12d6e14aade92fc.Converter = Bridge.cast((StaticResourceExtension_6c6e1a6901d340e592dab807010868ce.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_83165e9807d2440ea12d6e14aade92fc, null, parents_96d16a5225744f358ff10a262f8920ea))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_7d90c0685aa348b4b3056fe7a0e82c2e, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_83165e9807d2440ea12d6e14aade92fc);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_7d90c0685aa348b4b3056fe7a0e82c2e, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_20759e4ec2f04025bb4a68b442e7476b);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.RightRegionView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\RightRegionView.xaml";
                }



                var BooleanToVisibilityConverter_d9be2bb54e0145de916b34c4aa7b8345 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_d9be2bb54e0145de916b34c4aa7b8345);

                var Grid_a108fbff0b1044358823991b08c5590c = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_30c680166ca24a118033c4316584f491 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_30c680166ca24a118033c4316584f491.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_336004291ba04fc89a44b881f32aa4e3 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_336004291ba04fc89a44b881f32aa4e3.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                Grid_a108fbff0b1044358823991b08c5590c.ColumnDefinitions.add(ColumnDefinition_30c680166ca24a118033c4316584f491);
                Grid_a108fbff0b1044358823991b08c5590c.ColumnDefinitions.add(ColumnDefinition_336004291ba04fc89a44b881f32aa4e3);

                var ShowOrHidePropositionInspector_23dfb4d472714bd48e86cbdf8b0e461d = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.PropositionInspector.ShowOrHidePropositionInspectorView();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(ShowOrHidePropositionInspector_23dfb4d472714bd48e86cbdf8b0e461d, 0);

                var Grid_3a78f6e26ee14c2fb204a0ea9ed48bbf = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Grid_3a78f6e26ee14c2fb204a0ea9ed48bbf, 1);
                var PropositionInspectorView_840c308f870c446091faa25eb903e01a = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.PropositionInspector.PropositionInspectorView();

                Grid_3a78f6e26ee14c2fb204a0ea9ed48bbf.Children.add(PropositionInspectorView_840c308f870c446091faa25eb903e01a);

                var Binding_d4f305a8c6404e6f9c5338258939032e = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_d4f305a8c6404e6f9c5338258939032e.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("PropositionInspector.Visible");
                var StaticResourceExtension_ae80571552114d2fb21c3cfd0bda2926 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_ae80571552114d2fb21c3cfd0bda2926.ResourceKey = "BoolToVis";





                Grid_a108fbff0b1044358823991b08c5590c.Children.add(ShowOrHidePropositionInspector_23dfb4d472714bd48e86cbdf8b0e461d);
                Grid_a108fbff0b1044358823991b08c5590c.Children.add(Grid_3a78f6e26ee14c2fb204a0ea9ed48bbf);


                this.Content = Grid_a108fbff0b1044358823991b08c5590c;





                var parents_7c5125d2bba8499d97a6bb25317bd747 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_7c5125d2bba8499d97a6bb25317bd747.add(Grid_3a78f6e26ee14c2fb204a0ea9ed48bbf);
                parents_7c5125d2bba8499d97a6bb25317bd747.add(Grid_a108fbff0b1044358823991b08c5590c);
                parents_7c5125d2bba8499d97a6bb25317bd747.add(this);
                Binding_d4f305a8c6404e6f9c5338258939032e.Converter = Bridge.cast((StaticResourceExtension_ae80571552114d2fb21c3cfd0bda2926.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_d4f305a8c6404e6f9c5338258939032e, null, parents_7c5125d2bba8499d97a6bb25317bd747))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_3a78f6e26ee14c2fb204a0ea9ed48bbf, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_d4f305a8c6404e6f9c5338258939032e);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.SelectNextStep.SelectNextStepView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            NextButton: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\SelectNextStep\\SelectNextStepView.xaml";
                }

                var Button_5fd5faa3bae6472eb3bcc24136c24509 = new Bridge.global.Windows.UI.Xaml.Controls.Button();

                var BooleanToVisibilityConverter_c92cb2c2b6774aec9a7c111974250bcc = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_c92cb2c2b6774aec9a7c111974250bcc);

                this.RegisterName$1("NextButton", Button_5fd5faa3bae6472eb3bcc24136c24509);
                Button_5fd5faa3bae6472eb3bcc24136c24509.Name = "NextButton";
                Button_5fd5faa3bae6472eb3bcc24136c24509.TabIndex = 3;
                Button_5fd5faa3bae6472eb3bcc24136c24509.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);
                Button_5fd5faa3bae6472eb3bcc24136c24509.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Button_5fd5faa3bae6472eb3bcc24136c24509.Height = 45.0;
                Button_5fd5faa3bae6472eb3bcc24136c24509.Width = 45.0;
                var Path_e8ae7c333cb0428587857a0f4b52a9f8 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                Path_e8ae7c333cb0428587857a0f4b52a9f8.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_e8ae7c333cb0428587857a0f4b52a9f8.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_e8ae7c333cb0428587857a0f4b52a9f8.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_e8ae7c333cb0428587857a0f4b52a9f8.Height = 20.0;
                Path_e8ae7c333cb0428587857a0f4b52a9f8.Width = 20.0;
                Path_e8ae7c333cb0428587857a0f4b52a9f8.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 19.0002,34L 19.0002,42L 43.7502,42L 33.7502,52L 44.2502,52L 58.2502,38L 44.2502,24L 33.7502,24L 43.7502,34L 19.0002,34 Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_a2ab6ed2c21a4663887a2e341539ed25 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_a2ab6ed2c21a4663887a2e341539ed25.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectNextStep.IconBrush");



                Button_5fd5faa3bae6472eb3bcc24136c24509.Content = Path_e8ae7c333cb0428587857a0f4b52a9f8;

                var Binding_21e5aa32fffd4efbbdf3705f4b90af8f = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_21e5aa32fffd4efbbdf3705f4b90af8f.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectNextStep.Command");


                var Binding_75901c74a96242c8918998a05a093061 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_75901c74a96242c8918998a05a093061.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectNextStep.Enabled");


                var Binding_b47eaa9335c6483c92f85e55a1856ce4 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_b47eaa9335c6483c92f85e55a1856ce4.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectNextStep.Visible");
                var StaticResourceExtension_87f81c9dd468490196b337649edf4557 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_87f81c9dd468490196b337649edf4557.ResourceKey = "BoolToVis";





                this.Content = Button_5fd5faa3bae6472eb3bcc24136c24509;



                this.NextButton = Button_5fd5faa3bae6472eb3bcc24136c24509;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_e8ae7c333cb0428587857a0f4b52a9f8, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_a2ab6ed2c21a4663887a2e341539ed25);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_5fd5faa3bae6472eb3bcc24136c24509, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_21e5aa32fffd4efbbdf3705f4b90af8f);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_5fd5faa3bae6472eb3bcc24136c24509, Bridge.global.Windows.UI.Xaml.FrameworkElement.IsEnabledProperty, Binding_75901c74a96242c8918998a05a093061);
                var parents_1105a145872e4b5faf7e2fcc06f0ac51 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_1105a145872e4b5faf7e2fcc06f0ac51.add(Button_5fd5faa3bae6472eb3bcc24136c24509);
                parents_1105a145872e4b5faf7e2fcc06f0ac51.add(this);
                Binding_b47eaa9335c6483c92f85e55a1856ce4.Converter = Bridge.cast((StaticResourceExtension_87f81c9dd468490196b337649edf4557.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_b47eaa9335c6483c92f85e55a1856ce4, null, parents_1105a145872e4b5faf7e2fcc06f0ac51))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_5fd5faa3bae6472eb3bcc24136c24509, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_b47eaa9335c6483c92f85e55a1856ce4);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.SelectPreviousStep.SelectPreviousStepView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            BackAStepButton: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\SelectPreviousStep\\SelectPreviousStepView.xaml";
                }

                var Button_c1e9eb43947340b88ea829d312547179 = new Bridge.global.Windows.UI.Xaml.Controls.Button();

                var BooleanToVisibilityConverter_a78150a77bf2410683b3ba1724d4ac22 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_a78150a77bf2410683b3ba1724d4ac22);

                this.RegisterName$1("BackAStepButton", Button_c1e9eb43947340b88ea829d312547179);
                Button_c1e9eb43947340b88ea829d312547179.Name = "BackAStepButton";
                Button_c1e9eb43947340b88ea829d312547179.TabIndex = 4;
                Button_c1e9eb43947340b88ea829d312547179.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);
                Button_c1e9eb43947340b88ea829d312547179.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Button_c1e9eb43947340b88ea829d312547179.Height = 45.0;
                Button_c1e9eb43947340b88ea829d312547179.Width = 45.0;
                var Path_d3dce2aff4ad495da893312a0d5218fe = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                Path_d3dce2aff4ad495da893312a0d5218fe.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_d3dce2aff4ad495da893312a0d5218fe.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_d3dce2aff4ad495da893312a0d5218fe.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_d3dce2aff4ad495da893312a0d5218fe.Height = 20.0;
                Path_d3dce2aff4ad495da893312a0d5218fe.Width = 20.0;
                Path_d3dce2aff4ad495da893312a0d5218fe.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 57,42L 57,34L 32.25,34L 42.25,24L 31.75,24L 17.75,38L 31.75,52L 42.25,52L 32.25,42L 57,42 Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_283e62c5a9cf4197945ece2daf16395f = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_283e62c5a9cf4197945ece2daf16395f.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectPreviousStep.IconBrush");



                Button_c1e9eb43947340b88ea829d312547179.Content = Path_d3dce2aff4ad495da893312a0d5218fe;

                var Binding_f751b20ccf36499e985bfe459c87fadb = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f751b20ccf36499e985bfe459c87fadb.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectPreviousStep.Command");


                var Binding_1088c30b73bb4274b385362228109efb = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1088c30b73bb4274b385362228109efb.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectPreviousStep.Enabled");


                var Binding_28ab1f2506da4c829b3097bbd7438030 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_28ab1f2506da4c829b3097bbd7438030.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SelectPreviousStep.Visible");
                var StaticResourceExtension_7b479497f0ac4d678a137aaa6245e022 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_7b479497f0ac4d678a137aaa6245e022.ResourceKey = "BoolToVis";





                this.Content = Button_c1e9eb43947340b88ea829d312547179;



                this.BackAStepButton = Button_c1e9eb43947340b88ea829d312547179;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_d3dce2aff4ad495da893312a0d5218fe, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_283e62c5a9cf4197945ece2daf16395f);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_c1e9eb43947340b88ea829d312547179, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_f751b20ccf36499e985bfe459c87fadb);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_c1e9eb43947340b88ea829d312547179, Bridge.global.Windows.UI.Xaml.FrameworkElement.IsEnabledProperty, Binding_1088c30b73bb4274b385362228109efb);
                var parents_b64985fdc7b14696a657dd561aaaf246 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_b64985fdc7b14696a657dd561aaaf246.add(Button_c1e9eb43947340b88ea829d312547179);
                parents_b64985fdc7b14696a657dd561aaaf246.add(this);
                Binding_28ab1f2506da4c829b3097bbd7438030.Converter = Bridge.cast((StaticResourceExtension_7b479497f0ac4d678a137aaa6245e022.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_28ab1f2506da4c829b3097bbd7438030, null, parents_b64985fdc7b14696a657dd561aaaf246))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_c1e9eb43947340b88ea829d312547179, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_28ab1f2506da4c829b3097bbd7438030);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.StepList.StepListView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _stepList: null,
            TutorialStepsList: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            TutorialStepsList_SelectionChanged: function (sender, e) {
                if (System.Array.getItem(e.AddedItems, 0) == null) {
                    return;
                }
                var tutorialViewModel = Bridge.cast(this.DataContext, TutorialVm.ITutorialViewModel);
                this._stepList = tutorialViewModel.TutorialVm$ITutorialViewModel$StepList;
                this._stepList.TutorialVm$StepList$ITutorialStepListViewModel$TutorialVM.TutorialVm$ITutorialViewModel$HandleNewTutorialStepSelected(e.AddedItems);
            },
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\StepList\\StepListView.xaml";
                }

                var ListBox_250586947dbc4fbd83d94f09cee369f1 = new Bridge.global.Windows.UI.Xaml.Controls.ListBox();

                var BooleanToVisibilityConverter_c54d6988201b4bf0b8c1568fd3e13256 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_c54d6988201b4bf0b8c1568fd3e13256);

                var DockPanel_db8c85002b1e4e69b1a2825af1ba107a = new Bridge.global.Windows.UI.Xaml.Controls.DockPanel();
                var TextBlock_f87960cb14934e08b80aa4e286bc60c0 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.DockPanel.SetDock(TextBlock_f87960cb14934e08b80aa4e286bc60c0, Bridge.global.Windows.UI.Xaml.Controls.Dock.Top);
                TextBlock_f87960cb14934e08b80aa4e286bc60c0.Text = "Tutorial Steps";
                TextBlock_f87960cb14934e08b80aa4e286bc60c0.FontSize = 16.0;
                TextBlock_f87960cb14934e08b80aa4e286bc60c0.FontWeight = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Text.FontWeight, "Bold"), Windows.UI.Text.FontWeight), Windows.UI.Text.FontWeight));
                TextBlock_f87960cb14934e08b80aa4e286bc60c0.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);

                var ScrollViewer_bd9cbc3c86d4418daa3ec67f99615a69 = new Bridge.global.Windows.UI.Xaml.Controls.ScrollViewer();
                ScrollViewer_bd9cbc3c86d4418daa3ec67f99615a69.HorizontalScrollBarVisibility = Bridge.global.Windows.UI.Xaml.Controls.ScrollBarVisibility.Disabled;
                ScrollViewer_bd9cbc3c86d4418daa3ec67f99615a69.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 8, 0, 0);
                this.RegisterName$1("TutorialStepsList", ListBox_250586947dbc4fbd83d94f09cee369f1);
                ListBox_250586947dbc4fbd83d94f09cee369f1.Name = "TutorialStepsList";
                ListBox_250586947dbc4fbd83d94f09cee369f1.FontSize = 14.0;
                ListBox_250586947dbc4fbd83d94f09cee369f1.SelectedItemBackgroundBrush = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                ListBox_250586947dbc4fbd83d94f09cee369f1.addSelectionChanged(Bridge.fn.cacheBind(this, this.TutorialStepsList_SelectionChanged));
                ListBox_250586947dbc4fbd83d94f09cee369f1.SelectionMode = Bridge.global.Windows.UI.Xaml.Controls.SelectionMode.Single;
                var DataTemplate_8d62ba70c2fc48cbb35df199aff95f16 = new Bridge.global.Windows.UI.Xaml.DataTemplate();
                DataTemplate_8d62ba70c2fc48cbb35df199aff95f16.SetMethodToInstantiateFrameworkTemplate(function (templateOwner_DataTemplate_8d62ba70c2fc48cbb35df199aff95f16) {
                    var templateInstance_ab18757292704b4f8de7a09ffa7cdd03 = new Bridge.global.Windows.UI.Xaml.TemplateInstance();
                    templateInstance_ab18757292704b4f8de7a09ffa7cdd03.TemplateOwner = templateOwner_DataTemplate_8d62ba70c2fc48cbb35df199aff95f16;

                    var TutorialStepListItemView_5800abe0663f40bd8513feaeea23a729 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.TutorialStep.TutorialStepListItemView();



                    templateInstance_ab18757292704b4f8de7a09ffa7cdd03.TemplateContent = TutorialStepListItemView_5800abe0663f40bd8513feaeea23a729;
                    return templateInstance_ab18757292704b4f8de7a09ffa7cdd03;
                });

                ListBox_250586947dbc4fbd83d94f09cee369f1.ItemTemplate = DataTemplate_8d62ba70c2fc48cbb35df199aff95f16;

                var Binding_3f45b9f427ce46019430b3a76f92ad35 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_3f45b9f427ce46019430b3a76f92ad35.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.Steps");


                var Binding_738a47237d0f4440b63efcce9084b441 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_738a47237d0f4440b63efcce9084b441.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep");
                Binding_738a47237d0f4440b63efcce9084b441.Mode = Bridge.global.Windows.UI.Xaml.Data.BindingMode.OneWay;



                ScrollViewer_bd9cbc3c86d4418daa3ec67f99615a69.Content = ListBox_250586947dbc4fbd83d94f09cee369f1;


                DockPanel_db8c85002b1e4e69b1a2825af1ba107a.Children.add(TextBlock_f87960cb14934e08b80aa4e286bc60c0);
                DockPanel_db8c85002b1e4e69b1a2825af1ba107a.Children.add(ScrollViewer_bd9cbc3c86d4418daa3ec67f99615a69);

                var Binding_403196c3f64b46bebeee425136a1f1ce = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_403196c3f64b46bebeee425136a1f1ce.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.Visible");
                var StaticResourceExtension_7ff1e066bd504257816f3246aaec1295 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_7ff1e066bd504257816f3246aaec1295.ResourceKey = "BoolToVis";





                this.Content = DockPanel_db8c85002b1e4e69b1a2825af1ba107a;



                this.TutorialStepsList = ListBox_250586947dbc4fbd83d94f09cee369f1;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(ListBox_250586947dbc4fbd83d94f09cee369f1, Bridge.global.Windows.UI.Xaml.Controls.ItemsControl.ItemsSourceProperty, Binding_3f45b9f427ce46019430b3a76f92ad35);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(ListBox_250586947dbc4fbd83d94f09cee369f1, Bridge.global.Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, Binding_738a47237d0f4440b63efcce9084b441);
                var parents_673d5b03a0e246e5a36fde48d3176f2b = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_673d5b03a0e246e5a36fde48d3176f2b.add(DockPanel_db8c85002b1e4e69b1a2825af1ba107a);
                parents_673d5b03a0e246e5a36fde48d3176f2b.add(this);
                Binding_403196c3f64b46bebeee425136a1f1ce.Converter = Bridge.cast((StaticResourceExtension_7ff1e066bd504257816f3246aaec1295.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_403196c3f64b46bebeee425136a1f1ce, null, parents_673d5b03a0e246e5a36fde48d3176f2b))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(DockPanel_db8c85002b1e4e69b1a2825af1ba107a, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_403196c3f64b46bebeee425136a1f1ce);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.CheckAnswer.CheckAnswerView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            CheckAnswerButton: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\CheckAnswer\\CheckAnswerView.xaml";
                }

                var Button_8aad61e9d93b41c986bbb203c8904b0f = new Bridge.global.Windows.UI.Xaml.Controls.Button();

                var BooleanToVisibilityConverter_2f0ba0e816c44633b1f5ec8b2b4b5438 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_2f0ba0e816c44633b1f5ec8b2b4b5438);

                this.RegisterName$1("CheckAnswerButton", Button_8aad61e9d93b41c986bbb203c8904b0f);
                Button_8aad61e9d93b41c986bbb203c8904b0f.Name = "CheckAnswerButton";
                Button_8aad61e9d93b41c986bbb203c8904b0f.TabIndex = 1;
                Button_8aad61e9d93b41c986bbb203c8904b0f.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);
                Button_8aad61e9d93b41c986bbb203c8904b0f.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Button_8aad61e9d93b41c986bbb203c8904b0f.Height = 45.0;
                Button_8aad61e9d93b41c986bbb203c8904b0f.Width = 45.0;
                var Path_04f8a146ca514710a62479259bf1538c = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                Path_04f8a146ca514710a62479259bf1538c.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_04f8a146ca514710a62479259bf1538c.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_04f8a146ca514710a62479259bf1538c.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_04f8a146ca514710a62479259bf1538c.Height = 20.0;
                Path_04f8a146ca514710a62479259bf1538c.Width = 20.0;
                Path_04f8a146ca514710a62479259bf1538c.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M14,2A8,8 0 0,0 6,10A8,8 0 0,0 14,18A8,8 0 0,0 22,10H20C20,13.32 17.32,16 14,16A6,6 0 0,1 8,10A6,6 0 0,1 14,4C14.43,4 14.86,4.05 15.27,4.14L16.88,2.54C15.96,2.18 15,2 14,2M20.59,3.58L14,10.17L11.62,7.79L10.21,9.21L14,13L22,5M4.93,5.82C3.08,7.34 2,9.61 2,12A8,8 0 0,0 10,20C10.64,20 11.27,19.92 11.88,19.77C10.12,19.38 8.5,18.5 7.17,17.29C5.22,16.25 4,14.21 4,12C4,11.7 4.03,11.41 4.07,11.11C4.03,10.74 4,10.37 4,10C4,8.56 4.32,7.13 4.93,5.82Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_7420e546efca437b9d844dd68bda6fa5 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_7420e546efca437b9d844dd68bda6fa5.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.CheckAnswer.IconBrush");



                Button_8aad61e9d93b41c986bbb203c8904b0f.Content = Path_04f8a146ca514710a62479259bf1538c;

                var Binding_2c688cec51564bffbebfb1a9ae7f899d = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_2c688cec51564bffbebfb1a9ae7f899d.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.CheckAnswer.Check");


                var Binding_34f9b950ef1749a0bb78435a29e86918 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_34f9b950ef1749a0bb78435a29e86918.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.CheckAnswer.Enabled");


                var Binding_f36bd4ab0d144478a237b21c5de65400 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f36bd4ab0d144478a237b21c5de65400.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.CheckAnswer.Visible");
                var StaticResourceExtension_7f892988a9f248fb94f6ae711be89212 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_7f892988a9f248fb94f6ae711be89212.ResourceKey = "BoolToVis";





                this.Content = Button_8aad61e9d93b41c986bbb203c8904b0f;



                this.CheckAnswerButton = Button_8aad61e9d93b41c986bbb203c8904b0f;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_04f8a146ca514710a62479259bf1538c, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_7420e546efca437b9d844dd68bda6fa5);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_8aad61e9d93b41c986bbb203c8904b0f, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_2c688cec51564bffbebfb1a9ae7f899d);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_8aad61e9d93b41c986bbb203c8904b0f, Bridge.global.Windows.UI.Xaml.FrameworkElement.IsEnabledProperty, Binding_34f9b950ef1749a0bb78435a29e86918);
                var parents_2d16162963c944bc9068cd74e26a8eff = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_2d16162963c944bc9068cd74e26a8eff.add(Button_8aad61e9d93b41c986bbb203c8904b0f);
                parents_2d16162963c944bc9068cd74e26a8eff.add(this);
                Binding_f36bd4ab0d144478a237b21c5de65400.Converter = Bridge.cast((StaticResourceExtension_7f892988a9f248fb94f6ae711be89212.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_f36bd4ab0d144478a237b21c5de65400, null, parents_2d16162963c944bc9068cd74e26a8eff))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_8aad61e9d93b41c986bbb203c8904b0f, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_f36bd4ab0d144478a237b21c5de65400);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.FeedbackDetail.FeedbackDetailView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            AnalysisFeedbackDataGrid: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\FeedbackDetail\\FeedbackDetailView.xaml";
                }

                var ListBox_40cea904d6d9432288ff0bcdd9273e07 = new Bridge.global.Windows.UI.Xaml.Controls.ListBox();

                var BooleanToVisibilityConverter_59c824429f4e4937b25b72a7affd81a7 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_59c824429f4e4937b25b72a7affd81a7);

                this.RegisterName$1("AnalysisFeedbackDataGrid", ListBox_40cea904d6d9432288ff0bcdd9273e07);
                ListBox_40cea904d6d9432288ff0bcdd9273e07.Name = "AnalysisFeedbackDataGrid";
                ListBox_40cea904d6d9432288ff0bcdd9273e07.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 16, 2, 0);
                ListBox_40cea904d6d9432288ff0bcdd9273e07.IsHitTestVisible = false;
                ListBox_40cea904d6d9432288ff0bcdd9273e07.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                ListBox_40cea904d6d9432288ff0bcdd9273e07.SelectedItemBackgroundBrush = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 0, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                ListBox_40cea904d6d9432288ff0bcdd9273e07.BorderThickness = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor1(0);
                ListBox_40cea904d6d9432288ff0bcdd9273e07.IsEnabled = false;
                var DataTemplate_720f5ae36af844ef86f4adb76a9b0d42 = new Bridge.global.Windows.UI.Xaml.DataTemplate();
                DataTemplate_720f5ae36af844ef86f4adb76a9b0d42.SetMethodToInstantiateFrameworkTemplate(Bridge.fn.bind(this, function (templateOwner_DataTemplate_720f5ae36af844ef86f4adb76a9b0d42) {
                    var $t1;
                    var templateInstance_b5a1b11ec1a748deaf720d79cf800458 = new Bridge.global.Windows.UI.Xaml.TemplateInstance();
                    templateInstance_b5a1b11ec1a748deaf720d79cf800458.TemplateOwner = templateOwner_DataTemplate_720f5ae36af844ef86f4adb76a9b0d42;
                    var Path_d7355cd3d99b4cc9b8ba0905f5001814 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                    var Path_1f7193b4ef50476dae380b4beb79d185 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                    var Grid_5a25d1a42e3d4891ac14d4b070045800 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                    var ColumnDefinition_c28d05976d1d4e5ebfdaec277f40ea30 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                    ColumnDefinition_c28d05976d1d4e5ebfdaec277f40ea30.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                    var ColumnDefinition_967a0cfd0bdb481b8559346ab5cbd6cd = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                    ColumnDefinition_967a0cfd0bdb481b8559346ab5cbd6cd.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                    Grid_5a25d1a42e3d4891ac14d4b070045800.ColumnDefinitions.add(ColumnDefinition_c28d05976d1d4e5ebfdaec277f40ea30);
                    Grid_5a25d1a42e3d4891ac14d4b070045800.ColumnDefinitions.add(ColumnDefinition_967a0cfd0bdb481b8559346ab5cbd6cd);

                    var Grid_fc055b47cd284499affc5aff3969521b = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                    Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Grid_fc055b47cd284499affc5aff3969521b, 0);
                    var TextBlock_6ce35dc89b2d4eb28bbb494b47e93179 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                    TextBlock_6ce35dc89b2d4eb28bbb494b47e93179.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                    TextBlock_6ce35dc89b2d4eb28bbb494b47e93179.FontSize = 14.0;
                    TextBlock_6ce35dc89b2d4eb28bbb494b47e93179.IsHitTestVisible = false;
                    TextBlock_6ce35dc89b2d4eb28bbb494b47e93179.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                    var Binding_04db4c773a2d41819c0217a7ec1f7d73 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                    Binding_04db4c773a2d41819c0217a7ec1f7d73.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("FeedbackTypeTextVisible");
                    var StaticResourceExtension_866728a46b10484d9b5f1b0f815221f5 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                    StaticResourceExtension_866728a46b10484d9b5f1b0f815221f5.ResourceKey = "BoolToVis";




                    var Binding_2054a7f2ecae4f18b93ba6f0edf6ef26 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                    Binding_2054a7f2ecae4f18b93ba6f0edf6ef26.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("FeedbackTypeText");



                    Path_d7355cd3d99b4cc9b8ba0905f5001814.Name = "SuccessFeedbackItemIcon";
                    Path_d7355cd3d99b4cc9b8ba0905f5001814.IsHitTestVisible = false;
                    Path_d7355cd3d99b4cc9b8ba0905f5001814.Width = 14.0;
                    Path_d7355cd3d99b4cc9b8ba0905f5001814.Height = 14.0;
                    Path_d7355cd3d99b4cc9b8ba0905f5001814.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 0);
                    Path_d7355cd3d99b4cc9b8ba0905f5001814.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                    Path_d7355cd3d99b4cc9b8ba0905f5001814.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t1 = new Bridge.global.Windows.UI.Color(), $t1.A = 255, $t1.R = 0, $t1.G = 128, $t1.B = 0, $t1));
                    Path_d7355cd3d99b4cc9b8ba0905f5001814.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2,4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"), Windows.UI.Xaml.Media.Geometry);
                    var Binding_33ce738260fd44229f029d6aedc87c34 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                    Binding_33ce738260fd44229f029d6aedc87c34.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("SuccessIconVisible");
                    var StaticResourceExtension_63780d07b417415d98a183990583e325 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                    StaticResourceExtension_63780d07b417415d98a183990583e325.ResourceKey = "BoolToVis";





                    Path_1f7193b4ef50476dae380b4beb79d185.Name = "ErrorFeedbackItemIcon";
                    Path_1f7193b4ef50476dae380b4beb79d185.Width = 14.0;
                    Path_1f7193b4ef50476dae380b4beb79d185.Height = 14.0;
                    Path_1f7193b4ef50476dae380b4beb79d185.IsHitTestVisible = false;
                    Path_1f7193b4ef50476dae380b4beb79d185.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 0);
                    Path_1f7193b4ef50476dae380b4beb79d185.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                    Path_1f7193b4ef50476dae380b4beb79d185.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t1 = new Bridge.global.Windows.UI.Color(), $t1.A = 255, $t1.R = 255, $t1.G = 0, $t1.B = 0, $t1));
                    Path_1f7193b4ef50476dae380b4beb79d185.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z"), Windows.UI.Xaml.Media.Geometry);
                    var Binding_4d85ead8d93b4500b3223cb2f3ce37fe = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                    Binding_4d85ead8d93b4500b3223cb2f3ce37fe.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ErrorIconVisible");
                    var StaticResourceExtension_63719f2c22cd4298bb1a0d548dfd3015 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                    StaticResourceExtension_63719f2c22cd4298bb1a0d548dfd3015.ResourceKey = "BoolToVis";





                    Grid_fc055b47cd284499affc5aff3969521b.Children.add(TextBlock_6ce35dc89b2d4eb28bbb494b47e93179);
                    Grid_fc055b47cd284499affc5aff3969521b.Children.add(Path_d7355cd3d99b4cc9b8ba0905f5001814);
                    Grid_fc055b47cd284499affc5aff3969521b.Children.add(Path_1f7193b4ef50476dae380b4beb79d185);


                    var TextBlock_f16e91dfd9034310a5a19f16e3243bd1 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                    Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_f16e91dfd9034310a5a19f16e3243bd1, 1);
                    TextBlock_f16e91dfd9034310a5a19f16e3243bd1.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                    TextBlock_f16e91dfd9034310a5a19f16e3243bd1.FontSize = 14.0;
                    TextBlock_f16e91dfd9034310a5a19f16e3243bd1.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(4, 0, 0, 0);
                    TextBlock_f16e91dfd9034310a5a19f16e3243bd1.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                    TextBlock_f16e91dfd9034310a5a19f16e3243bd1.IsHitTestVisible = false;
                    var Binding_3950c66feae24958a2169f0d1aa53019 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                    Binding_3950c66feae24958a2169f0d1aa53019.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("DescriptionText");



                    Grid_5a25d1a42e3d4891ac14d4b070045800.Children.add(Grid_fc055b47cd284499affc5aff3969521b);
                    Grid_5a25d1a42e3d4891ac14d4b070045800.Children.add(TextBlock_f16e91dfd9034310a5a19f16e3243bd1);


                    var parents_f90d3eb192514265b61755b9404569b0 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                    parents_f90d3eb192514265b61755b9404569b0.add(TextBlock_6ce35dc89b2d4eb28bbb494b47e93179);
                    parents_f90d3eb192514265b61755b9404569b0.add(Grid_fc055b47cd284499affc5aff3969521b);
                    parents_f90d3eb192514265b61755b9404569b0.add(Grid_5a25d1a42e3d4891ac14d4b070045800);
                    parents_f90d3eb192514265b61755b9404569b0.add(ListBox_40cea904d6d9432288ff0bcdd9273e07);
                    parents_f90d3eb192514265b61755b9404569b0.add(this);
                    Binding_04db4c773a2d41819c0217a7ec1f7d73.Converter = Bridge.cast((StaticResourceExtension_866728a46b10484d9b5f1b0f815221f5.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_04db4c773a2d41819c0217a7ec1f7d73, null, parents_f90d3eb192514265b61755b9404569b0))), Windows.UI.Xaml.Data.IValueConverter);
                    Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_6ce35dc89b2d4eb28bbb494b47e93179, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_04db4c773a2d41819c0217a7ec1f7d73);
                    Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_6ce35dc89b2d4eb28bbb494b47e93179, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_2054a7f2ecae4f18b93ba6f0edf6ef26);
                    var parents_89acfb7187124da8b6f6b6bc44eb0f36 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                    parents_89acfb7187124da8b6f6b6bc44eb0f36.add(Path_d7355cd3d99b4cc9b8ba0905f5001814);
                    parents_89acfb7187124da8b6f6b6bc44eb0f36.add(Grid_fc055b47cd284499affc5aff3969521b);
                    parents_89acfb7187124da8b6f6b6bc44eb0f36.add(Grid_5a25d1a42e3d4891ac14d4b070045800);
                    parents_89acfb7187124da8b6f6b6bc44eb0f36.add(ListBox_40cea904d6d9432288ff0bcdd9273e07);
                    parents_89acfb7187124da8b6f6b6bc44eb0f36.add(this);
                    Binding_33ce738260fd44229f029d6aedc87c34.Converter = Bridge.cast((StaticResourceExtension_63780d07b417415d98a183990583e325.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_33ce738260fd44229f029d6aedc87c34, null, parents_89acfb7187124da8b6f6b6bc44eb0f36))), Windows.UI.Xaml.Data.IValueConverter);
                    Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_d7355cd3d99b4cc9b8ba0905f5001814, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_33ce738260fd44229f029d6aedc87c34);
                    var parents_8d273ebe70864038b3682e038116935d = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                    parents_8d273ebe70864038b3682e038116935d.add(Path_1f7193b4ef50476dae380b4beb79d185);
                    parents_8d273ebe70864038b3682e038116935d.add(Grid_fc055b47cd284499affc5aff3969521b);
                    parents_8d273ebe70864038b3682e038116935d.add(Grid_5a25d1a42e3d4891ac14d4b070045800);
                    parents_8d273ebe70864038b3682e038116935d.add(ListBox_40cea904d6d9432288ff0bcdd9273e07);
                    parents_8d273ebe70864038b3682e038116935d.add(this);
                    Binding_4d85ead8d93b4500b3223cb2f3ce37fe.Converter = Bridge.cast((StaticResourceExtension_63719f2c22cd4298bb1a0d548dfd3015.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_4d85ead8d93b4500b3223cb2f3ce37fe, null, parents_8d273ebe70864038b3682e038116935d))), Windows.UI.Xaml.Data.IValueConverter);
                    Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_1f7193b4ef50476dae380b4beb79d185, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_4d85ead8d93b4500b3223cb2f3ce37fe);
                    Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_f16e91dfd9034310a5a19f16e3243bd1, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_3950c66feae24958a2169f0d1aa53019);

                    templateInstance_b5a1b11ec1a748deaf720d79cf800458.TemplateContent = Grid_5a25d1a42e3d4891ac14d4b070045800;
                    return templateInstance_b5a1b11ec1a748deaf720d79cf800458;
                }));

                ListBox_40cea904d6d9432288ff0bcdd9273e07.ItemTemplate = DataTemplate_720f5ae36af844ef86f4adb76a9b0d42;

                var Binding_45e87272f4c548dbb250060d90f94c51 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_45e87272f4c548dbb250060d90f94c51.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.FeedbackDetail.Visible");
                var StaticResourceExtension_c607e57e602b421c9427bca3d0be56a7 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_c607e57e602b421c9427bca3d0be56a7.ResourceKey = "BoolToVis";




                var Binding_e7b8b2bb6f674cb683c1484483a9182a = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_e7b8b2bb6f674cb683c1484483a9182a.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.FeedbackDetail.FeedbackGrid");



                this.Content = ListBox_40cea904d6d9432288ff0bcdd9273e07;



                this.AnalysisFeedbackDataGrid = ListBox_40cea904d6d9432288ff0bcdd9273e07;

                var parents_deb349353ef146d18c5a0c25e2cb9535 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_deb349353ef146d18c5a0c25e2cb9535.add(ListBox_40cea904d6d9432288ff0bcdd9273e07);
                parents_deb349353ef146d18c5a0c25e2cb9535.add(this);
                Binding_45e87272f4c548dbb250060d90f94c51.Converter = Bridge.cast((StaticResourceExtension_c607e57e602b421c9427bca3d0be56a7.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_45e87272f4c548dbb250060d90f94c51, null, parents_deb349353ef146d18c5a0c25e2cb9535))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(ListBox_40cea904d6d9432288ff0bcdd9273e07, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_45e87272f4c548dbb250060d90f94c51);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(ListBox_40cea904d6d9432288ff0bcdd9273e07, Bridge.global.Windows.UI.Xaml.Controls.ItemsControl.ItemsSourceProperty, Binding_e7b8b2bb6f674cb683c1484483a9182a);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainContent.MainContentTextView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            ContentLabel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\MainContent\\MainContentTextView.xaml";
                }

                var TextBlock_2068f53b040e4c6794697270218fc420 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                this.RegisterName$1("ContentLabel", TextBlock_2068f53b040e4c6794697270218fc420);
                TextBlock_2068f53b040e4c6794697270218fc420.Name = "ContentLabel";
                TextBlock_2068f53b040e4c6794697270218fc420.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_2068f53b040e4c6794697270218fc420.FontSize = 20.0;
                TextBlock_2068f53b040e4c6794697270218fc420.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_2068f53b040e4c6794697270218fc420.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 4, 0);
                var Binding_1ec96baf195f423a992b09a17f35fe3a = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1ec96baf195f423a992b09a17f35fe3a.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.MainContent.TextContent");



                this.Content = TextBlock_2068f53b040e4c6794697270218fc420;



                this.ContentLabel = TextBlock_2068f53b040e4c6794697270218fc420;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_2068f53b040e4c6794697270218fc420, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_1ec96baf195f423a992b09a17f35fe3a);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainContent.MainContentTitleView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            TitleLabel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\MainContent\\MainContentTitleView.xaml";
                }

                var TextBlock_8bf7bb70a71b4432b65d151ddc023376 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                this.RegisterName$1("TitleLabel", TextBlock_8bf7bb70a71b4432b65d151ddc023376);
                TextBlock_8bf7bb70a71b4432b65d151ddc023376.Name = "TitleLabel";
                Bridge.global.Windows.UI.Xaml.Controls.DockPanel.SetDock(TextBlock_8bf7bb70a71b4432b65d151ddc023376, Bridge.global.Windows.UI.Xaml.Controls.Dock.Left);
                TextBlock_8bf7bb70a71b4432b65d151ddc023376.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_8bf7bb70a71b4432b65d151ddc023376.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_8bf7bb70a71b4432b65d151ddc023376.FontSize = 16.0;
                TextBlock_8bf7bb70a71b4432b65d151ddc023376.FontWeight = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Text.FontWeight, "Bold"), Windows.UI.Text.FontWeight), Windows.UI.Text.FontWeight));
                TextBlock_8bf7bb70a71b4432b65d151ddc023376.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 4, 0);
                var Binding_d8eff5f90b6041d489b53f822ec59d8d = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_d8eff5f90b6041d489b53f822ec59d8d.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.MainContent.Title");



                this.Content = TextBlock_8bf7bb70a71b4432b65d151ddc023376;



                this.TitleLabel = TextBlock_8bf7bb70a71b4432b65d151ddc023376;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_8bf7bb70a71b4432b65d151ddc023376, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_d8eff5f90b6041d489b53f822ec59d8d);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.MainFeedback.MainFeedbackView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            NotAnsweredIcon: null,
            CorrectAnswerIcon: null,
            WrongAnswerIcon: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\MainFeedback\\MainFeedbackView.xaml";
                }

                var Path_9f34bffe428946a0aa397a9141a57987 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_2198e4ddd1f1466095f199ca41692624 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_fdf7f2b795394276bf3472a0c215199a = new Bridge.global.Windows.UI.Xaml.Shapes.Path();

                var BooleanToVisibilityConverter_df76a7ceb7424c0ea5bfff5342414a16 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_df76a7ceb7424c0ea5bfff5342414a16);

                var Grid_09e91a7ad2c1462aa454db23ad73be07 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                this.RegisterName$1("NotAnsweredIcon", Path_9f34bffe428946a0aa397a9141a57987);
                Path_9f34bffe428946a0aa397a9141a57987.Name = "NotAnsweredIcon";
                Path_9f34bffe428946a0aa397a9141a57987.Width = 24.0;
                Path_9f34bffe428946a0aa397a9141a57987.Height = 24.0;
                Path_9f34bffe428946a0aa397a9141a57987.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 0);
                Path_9f34bffe428946a0aa397a9141a57987.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_9f34bffe428946a0aa397a9141a57987.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                Path_9f34bffe428946a0aa397a9141a57987.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_474bfc90aad8456598164ae654c76937 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_474bfc90aad8456598164ae654c76937.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.MainFeedback.NotAnsweredIconVisible");
                var StaticResourceExtension_16f57fb15073452ea2d29295b4e70f6a = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_16f57fb15073452ea2d29295b4e70f6a.ResourceKey = "BoolToVis";





                this.RegisterName$1("CorrectAnswerIcon", Path_2198e4ddd1f1466095f199ca41692624);
                Path_2198e4ddd1f1466095f199ca41692624.Name = "CorrectAnswerIcon";
                Path_2198e4ddd1f1466095f199ca41692624.Width = 24.0;
                Path_2198e4ddd1f1466095f199ca41692624.Height = 24.0;
                Path_2198e4ddd1f1466095f199ca41692624.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 0);
                Path_2198e4ddd1f1466095f199ca41692624.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 128, $t.B = 0, $t));
                Path_2198e4ddd1f1466095f199ca41692624.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_2198e4ddd1f1466095f199ca41692624.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_d1a69e8a3d414a089aee45af101de777 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_d1a69e8a3d414a089aee45af101de777.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.MainFeedback.SuccessIconVisible");
                var StaticResourceExtension_47630744536a450f970c8046a1e859c2 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_47630744536a450f970c8046a1e859c2.ResourceKey = "BoolToVis";





                this.RegisterName$1("WrongAnswerIcon", Path_fdf7f2b795394276bf3472a0c215199a);
                Path_fdf7f2b795394276bf3472a0c215199a.Name = "WrongAnswerIcon";
                Path_fdf7f2b795394276bf3472a0c215199a.Width = 24.0;
                Path_fdf7f2b795394276bf3472a0c215199a.Height = 24.0;
                Path_fdf7f2b795394276bf3472a0c215199a.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 0);
                Path_fdf7f2b795394276bf3472a0c215199a.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_fdf7f2b795394276bf3472a0c215199a.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 0, $t.B = 0, $t));
                Path_fdf7f2b795394276bf3472a0c215199a.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M19,3H16.3H7.7H5A2,2 0 0,0 3,5V7.7V16.4V19A2,2 0 0,0 5,21H7.7H16.4H19A2,2 0 0,0 21,19V16.3V7.7V5A2,2 0 0,0 19,3M15.6,17L12,13.4L8.4,17L7,15.6L10.6,12L7,8.4L8.4,7L12,10.6L15.6,7L17,8.4L13.4,12L17,15.6L15.6,17Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_850ff176fbe74e0a808fff3579281e25 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_850ff176fbe74e0a808fff3579281e25.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.MainFeedback.ErrorIconVisible");
                var StaticResourceExtension_ee2f20c2c44e43be8a316927bf873a8a = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_ee2f20c2c44e43be8a316927bf873a8a.ResourceKey = "BoolToVis";





                Grid_09e91a7ad2c1462aa454db23ad73be07.Children.add(Path_9f34bffe428946a0aa397a9141a57987);
                Grid_09e91a7ad2c1462aa454db23ad73be07.Children.add(Path_2198e4ddd1f1466095f199ca41692624);
                Grid_09e91a7ad2c1462aa454db23ad73be07.Children.add(Path_fdf7f2b795394276bf3472a0c215199a);


                this.Content = Grid_09e91a7ad2c1462aa454db23ad73be07;



                this.NotAnsweredIcon = Path_9f34bffe428946a0aa397a9141a57987;
                this.CorrectAnswerIcon = Path_2198e4ddd1f1466095f199ca41692624;
                this.WrongAnswerIcon = Path_fdf7f2b795394276bf3472a0c215199a;

                var parents_69f7a7de5b4b4408a4599578ab8886b1 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_69f7a7de5b4b4408a4599578ab8886b1.add(Path_9f34bffe428946a0aa397a9141a57987);
                parents_69f7a7de5b4b4408a4599578ab8886b1.add(Grid_09e91a7ad2c1462aa454db23ad73be07);
                parents_69f7a7de5b4b4408a4599578ab8886b1.add(this);
                Binding_474bfc90aad8456598164ae654c76937.Converter = Bridge.cast((StaticResourceExtension_16f57fb15073452ea2d29295b4e70f6a.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_474bfc90aad8456598164ae654c76937, null, parents_69f7a7de5b4b4408a4599578ab8886b1))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_9f34bffe428946a0aa397a9141a57987, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_474bfc90aad8456598164ae654c76937);
                var parents_e3ccb04c689b478ca8b3eb996eceb947 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_e3ccb04c689b478ca8b3eb996eceb947.add(Path_2198e4ddd1f1466095f199ca41692624);
                parents_e3ccb04c689b478ca8b3eb996eceb947.add(Grid_09e91a7ad2c1462aa454db23ad73be07);
                parents_e3ccb04c689b478ca8b3eb996eceb947.add(this);
                Binding_d1a69e8a3d414a089aee45af101de777.Converter = Bridge.cast((StaticResourceExtension_47630744536a450f970c8046a1e859c2.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_d1a69e8a3d414a089aee45af101de777, null, parents_e3ccb04c689b478ca8b3eb996eceb947))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_2198e4ddd1f1466095f199ca41692624, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_d1a69e8a3d414a089aee45af101de777);
                var parents_dd8d191b57e549be8b7ca94de103032e = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_dd8d191b57e549be8b7ca94de103032e.add(Path_fdf7f2b795394276bf3472a0c215199a);
                parents_dd8d191b57e549be8b7ca94de103032e.add(Grid_09e91a7ad2c1462aa454db23ad73be07);
                parents_dd8d191b57e549be8b7ca94de103032e.add(this);
                Binding_850ff176fbe74e0a808fff3579281e25.Converter = Bridge.cast((StaticResourceExtension_ee2f20c2c44e43be8a316927bf873a8a.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_850ff176fbe74e0a808fff3579281e25, null, parents_dd8d191b57e549be8b7ca94de103032e))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_fdf7f2b795394276bf3472a0c215199a, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_850ff176fbe74e0a808fff3579281e25);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.PropositionInspector.PropositionInspectorView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\PropositionInspector\\PropositionInspectorView.xaml";
                }



                var Grid_64d38264136343e18abdc08d017d20b4 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_64d38264136343e18abdc08d017d20b4.Width = 400.0;
                Grid_64d38264136343e18abdc08d017d20b4.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(16, 20, 4, 8);
                var RowDefinition_eab0ede42c8d4c1c87a2239bf04e8944 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_eab0ede42c8d4c1c87a2239bf04e8944.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_3648c18e97fc4005bdd0bd80ed53b031 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_3648c18e97fc4005bdd0bd80ed53b031.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.75, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);
                RowDefinition_3648c18e97fc4005bdd0bd80ed53b031.MinHeight = 200.0;

                Grid_64d38264136343e18abdc08d017d20b4.RowDefinitions.add(RowDefinition_eab0ede42c8d4c1c87a2239bf04e8944);
                Grid_64d38264136343e18abdc08d017d20b4.RowDefinitions.add(RowDefinition_3648c18e97fc4005bdd0bd80ed53b031);

                var PropositionPropertiesView_7b53af0799ed43e684e92d5a34bd4554 = new Bridge.global.SocraLogicHtml5.Pages.WorldviewExplorer.SubPages.PropositionProperties.PropositionPropertiesView();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(PropositionPropertiesView_7b53af0799ed43e684e92d5a34bd4554, 0);
                PropositionPropertiesView_7b53af0799ed43e684e92d5a34bd4554.FontSize = 14.0;
                PropositionPropertiesView_7b53af0799ed43e684e92d5a34bd4554.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 8, 4, 2);

                var EulerCirclesView_040f0bab567f40a487b9678b6a4b7f52 = new Bridge.global.SocraLogicHtml5.Pages.WorldviewExplorer.SubPages.EulerCircles.EulerCirclesView();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(EulerCirclesView_040f0bab567f40a487b9678b6a4b7f52, 1);
                EulerCirclesView_040f0bab567f40a487b9678b6a4b7f52.FontSize = 14.0;
                EulerCirclesView_040f0bab567f40a487b9678b6a4b7f52.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 2, 4, 8);

                Grid_64d38264136343e18abdc08d017d20b4.Children.add(PropositionPropertiesView_7b53af0799ed43e684e92d5a34bd4554);
                Grid_64d38264136343e18abdc08d017d20b4.Children.add(EulerCirclesView_040f0bab567f40a487b9678b6a4b7f52);


                this.Content = Grid_64d38264136343e18abdc08d017d20b4;







            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.RetryAnswer.RetryAnswerView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            TryAgainButton: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\RetryAnswer\\RetryAnswerView.xaml";
                }

                var Button_53ebac43643345fdae27f6857c8e41cd = new Bridge.global.Windows.UI.Xaml.Controls.Button();

                var BooleanToVisibilityConverter_82bdf4f87c2a425ca9a00f12ff34ee32 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_82bdf4f87c2a425ca9a00f12ff34ee32);

                this.RegisterName$1("TryAgainButton", Button_53ebac43643345fdae27f6857c8e41cd);
                Button_53ebac43643345fdae27f6857c8e41cd.Name = "TryAgainButton";
                Button_53ebac43643345fdae27f6857c8e41cd.TabIndex = 2;
                Button_53ebac43643345fdae27f6857c8e41cd.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);
                Button_53ebac43643345fdae27f6857c8e41cd.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Button_53ebac43643345fdae27f6857c8e41cd.Height = 45.0;
                Button_53ebac43643345fdae27f6857c8e41cd.Width = 45.0;
                var Path_4fed74cb77cf4b7292ce8e0070f5c878 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                Path_4fed74cb77cf4b7292ce8e0070f5c878.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_4fed74cb77cf4b7292ce8e0070f5c878.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_4fed74cb77cf4b7292ce8e0070f5c878.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_4fed74cb77cf4b7292ce8e0070f5c878.Height = 20.0;
                Path_4fed74cb77cf4b7292ce8e0070f5c878.Width = 20.0;
                Path_4fed74cb77cf4b7292ce8e0070f5c878.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 38,20.5833C 42.9908,20.5833 47.4912,22.6825 50.6667,26.046L 50.6667,17.4167L 55.4166,22.1667L 55.4167,34.8333L 42.75,34.8333L 38,30.0833L 46.8512,30.0833C 44.6768,27.6539 41.517,26.125 38,26.125C 31.9785,26.125 27.0037,30.6068 26.2296,36.4167L 20.6543,36.4167C 21.4543,27.5397 28.9148,20.5833 38,20.5833 Z M 38,49.875C 44.0215,49.875 48.9963,45.3932 49.7703,39.5833L 55.3457,39.5833C 54.5457,48.4603 47.0852,55.4167 38,55.4167C 33.0092,55.4167 28.5088,53.3175 25.3333,49.954L 25.3333,58.5833L 20.5833,53.8333L 20.5833,41.1667L 33.25,41.1667L 38,45.9167L 29.1487,45.9167C 31.3231,48.3461 34.483,49.875 38,49.875 Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_1ecbe5f04e3a4625901b1ba80dee940f = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1ecbe5f04e3a4625901b1ba80dee940f.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.RetryAnswer.IconBrush");



                Button_53ebac43643345fdae27f6857c8e41cd.Content = Path_4fed74cb77cf4b7292ce8e0070f5c878;

                var Binding_b35f163907f24ef694138d183f15f565 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_b35f163907f24ef694138d183f15f565.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.RetryAnswer.Command");


                var Binding_b6a18fdcd5ec4a588f0b85e064f5435e = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_b6a18fdcd5ec4a588f0b85e064f5435e.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.RetryAnswer.Enabled");


                var Binding_c7d6d30e3ec746e78cd370ce46547fe4 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_c7d6d30e3ec746e78cd370ce46547fe4.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.RetryAnswer.Visible");
                var StaticResourceExtension_45e306f7b6de493488778538380fc11e = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_45e306f7b6de493488778538380fc11e.ResourceKey = "BoolToVis";





                this.Content = Button_53ebac43643345fdae27f6857c8e41cd;



                this.TryAgainButton = Button_53ebac43643345fdae27f6857c8e41cd;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_4fed74cb77cf4b7292ce8e0070f5c878, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_1ecbe5f04e3a4625901b1ba80dee940f);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_53ebac43643345fdae27f6857c8e41cd, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ButtonBase.CommandProperty, Binding_b35f163907f24ef694138d183f15f565);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_53ebac43643345fdae27f6857c8e41cd, Bridge.global.Windows.UI.Xaml.FrameworkElement.IsEnabledProperty, Binding_b6a18fdcd5ec4a588f0b85e064f5435e);
                var parents_d5b806ee1cd045f090a665d1d39e57c9 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_d5b806ee1cd045f090a665d1d39e57c9.add(Button_53ebac43643345fdae27f6857c8e41cd);
                parents_d5b806ee1cd045f090a665d1d39e57c9.add(this);
                Binding_c7d6d30e3ec746e78cd370ce46547fe4.Converter = Bridge.cast((StaticResourceExtension_45e306f7b6de493488778538380fc11e.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_c7d6d30e3ec746e78cd370ce46547fe4, null, parents_d5b806ee1cd045f090a665d1d39e57c9))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Button_53ebac43643345fdae27f6857c8e41cd, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_c7d6d30e3ec746e78cd370ce46547fe4);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.Stats.StatsView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            QuestionsAnsweredCorrectlyLabel: null,
            QuestionsAnsweredIncorrectlyLabel: null,
            TotalQuestionsLabel: null,
            AnswerQuestionAttemptsLabel: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\Stats\\StatsView.xaml";
                }

                var TextBlock_0d0b8ce6c7da4886aea949f148f76a60 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_58381098cae645ecaf92c220f4235ba1 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_21554ccc2961411399a00b1ff659e906 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_a8db58ae5ac04679a3286f5e977e0e21 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                var BooleanToVisibilityConverter_9c32a5e36e664b479486a58878253035 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_9c32a5e36e664b479486a58878253035);

                var StackPanel_da4f6c648f8447c3aaf215810c779b85 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_da4f6c648f8447c3aaf215810c779b85.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Vertical;
                StackPanel_da4f6c648f8447c3aaf215810c779b85.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_da4f6c648f8447c3aaf215810c779b85.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 0);
                var StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 0, 0);
                var TextBlock_2ab733d1a3bd410abd2a702a6c5cb56a = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_2ab733d1a3bd410abd2a702a6c5cb56a.FontSize = 20.0;
                TextBlock_2ab733d1a3bd410abd2a702a6c5cb56a.Text = "Questions Answered Correctly:";
                TextBlock_2ab733d1a3bd410abd2a702a6c5cb56a.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_2ab733d1a3bd410abd2a702a6c5cb56a.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 4, 0);

                this.RegisterName$1("QuestionsAnsweredCorrectlyLabel", TextBlock_0d0b8ce6c7da4886aea949f148f76a60);
                TextBlock_0d0b8ce6c7da4886aea949f148f76a60.Name = "QuestionsAnsweredCorrectlyLabel";
                TextBlock_0d0b8ce6c7da4886aea949f148f76a60.FontSize = 20.0;
                TextBlock_0d0b8ce6c7da4886aea949f148f76a60.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 128, $t.B = 0, $t));
                TextBlock_0d0b8ce6c7da4886aea949f148f76a60.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                var Binding_415cbd31472c4286bbacfef4b9d7731e = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_415cbd31472c4286bbacfef4b9d7731e.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Stats.QuestionsAnsweredCorrectly");



                StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f.Children.add(TextBlock_2ab733d1a3bd410abd2a702a6c5cb56a);
                StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f.Children.add(TextBlock_0d0b8ce6c7da4886aea949f148f76a60);


                var StackPanel_e109caf9f64a49ba866f8f79b8725614 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_e109caf9f64a49ba866f8f79b8725614.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                StackPanel_e109caf9f64a49ba866f8f79b8725614.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_e109caf9f64a49ba866f8f79b8725614.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                StackPanel_e109caf9f64a49ba866f8f79b8725614.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 8, 0, 0);
                var TextBlock_b9c65ceb06654dc88aa2eee01fbe2ed8 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_b9c65ceb06654dc88aa2eee01fbe2ed8.Text = "Questions Answered Incorrectly:";
                TextBlock_b9c65ceb06654dc88aa2eee01fbe2ed8.FontSize = 20.0;
                TextBlock_b9c65ceb06654dc88aa2eee01fbe2ed8.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_b9c65ceb06654dc88aa2eee01fbe2ed8.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 4, 0);

                this.RegisterName$1("QuestionsAnsweredIncorrectlyLabel", TextBlock_58381098cae645ecaf92c220f4235ba1);
                TextBlock_58381098cae645ecaf92c220f4235ba1.Name = "QuestionsAnsweredIncorrectlyLabel";
                TextBlock_58381098cae645ecaf92c220f4235ba1.FontSize = 20.0;
                TextBlock_58381098cae645ecaf92c220f4235ba1.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 0, $t.B = 0, $t));
                TextBlock_58381098cae645ecaf92c220f4235ba1.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                var Binding_1f216fc8e0964298aaa9166c495c0e61 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1f216fc8e0964298aaa9166c495c0e61.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Stats.QuestionsAnsweredIncorrectly");



                StackPanel_e109caf9f64a49ba866f8f79b8725614.Children.add(TextBlock_b9c65ceb06654dc88aa2eee01fbe2ed8);
                StackPanel_e109caf9f64a49ba866f8f79b8725614.Children.add(TextBlock_58381098cae645ecaf92c220f4235ba1);


                var StackPanel_3a8cccdf36ac47c9898be7ca865cab9c = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_3a8cccdf36ac47c9898be7ca865cab9c.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                StackPanel_3a8cccdf36ac47c9898be7ca865cab9c.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_3a8cccdf36ac47c9898be7ca865cab9c.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                StackPanel_3a8cccdf36ac47c9898be7ca865cab9c.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 8, 0, 0);
                var TextBlock_5e23c37d249543eea32c7f5dc463b45b = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_5e23c37d249543eea32c7f5dc463b45b.FontSize = 20.0;
                TextBlock_5e23c37d249543eea32c7f5dc463b45b.Text = "Total Questions:";
                TextBlock_5e23c37d249543eea32c7f5dc463b45b.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_5e23c37d249543eea32c7f5dc463b45b.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 4, 0);

                this.RegisterName$1("TotalQuestionsLabel", TextBlock_21554ccc2961411399a00b1ff659e906);
                TextBlock_21554ccc2961411399a00b1ff659e906.Name = "TotalQuestionsLabel";
                TextBlock_21554ccc2961411399a00b1ff659e906.FontSize = 20.0;
                TextBlock_21554ccc2961411399a00b1ff659e906.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                var Binding_2f1d45c312d443f18c43c1c7d0656aea = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_2f1d45c312d443f18c43c1c7d0656aea.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Stats.TotalQuestions");



                StackPanel_3a8cccdf36ac47c9898be7ca865cab9c.Children.add(TextBlock_5e23c37d249543eea32c7f5dc463b45b);
                StackPanel_3a8cccdf36ac47c9898be7ca865cab9c.Children.add(TextBlock_21554ccc2961411399a00b1ff659e906);


                var StackPanel_dd218938f86e4892b5313769aa4c9446 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_dd218938f86e4892b5313769aa4c9446.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                StackPanel_dd218938f86e4892b5313769aa4c9446.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_dd218938f86e4892b5313769aa4c9446.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                StackPanel_dd218938f86e4892b5313769aa4c9446.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 8, 0, 0);
                var TextBlock_c360ed9a239545c79c36d69f474634f8 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_c360ed9a239545c79c36d69f474634f8.FontSize = 20.0;
                TextBlock_c360ed9a239545c79c36d69f474634f8.Text = "Answer Question Attempts:";
                TextBlock_c360ed9a239545c79c36d69f474634f8.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_c360ed9a239545c79c36d69f474634f8.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 4, 0);

                this.RegisterName$1("AnswerQuestionAttemptsLabel", TextBlock_a8db58ae5ac04679a3286f5e977e0e21);
                TextBlock_a8db58ae5ac04679a3286f5e977e0e21.Name = "AnswerQuestionAttemptsLabel";
                TextBlock_a8db58ae5ac04679a3286f5e977e0e21.FontSize = 20.0;
                TextBlock_a8db58ae5ac04679a3286f5e977e0e21.Foreground = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 255, $t));
                TextBlock_a8db58ae5ac04679a3286f5e977e0e21.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                var Binding_8a7b389b9d8b48cc997ed913c1d25358 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_8a7b389b9d8b48cc997ed913c1d25358.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Stats.AnswerQuestionAttempts");



                StackPanel_dd218938f86e4892b5313769aa4c9446.Children.add(TextBlock_c360ed9a239545c79c36d69f474634f8);
                StackPanel_dd218938f86e4892b5313769aa4c9446.Children.add(TextBlock_a8db58ae5ac04679a3286f5e977e0e21);


                var StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 16, 0, 0);
                var TextBlock_2d6bc25653c2425a9453aa322f8b2eab = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_2d6bc25653c2425a9453aa322f8b2eab.FontSize = 20.0;
                TextBlock_2d6bc25653c2425a9453aa322f8b2eab.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_2d6bc25653c2425a9453aa322f8b2eab.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_2d6bc25653c2425a9453aa322f8b2eab.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 4, 0);
                var Binding_a499b6f0a5374796a81447a03b3521e8 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_a499b6f0a5374796a81447a03b3521e8.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Stats.SaveButtonDescription");



                var SaveTutorialResultsButtonView_51ce4e75001743cf9f6877e2c8c152dc = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.SaveTutorialResultsButtonView();

                StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12.Children.add(TextBlock_2d6bc25653c2425a9453aa322f8b2eab);
                StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12.Children.add(SaveTutorialResultsButtonView_51ce4e75001743cf9f6877e2c8c152dc);


                var TextBlock_3766cd9f2f804c3b9d38908db292f088 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_3766cd9f2f804c3b9d38908db292f088.FontSize = 20.0;
                TextBlock_3766cd9f2f804c3b9d38908db292f088.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_3766cd9f2f804c3b9d38908db292f088.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_3766cd9f2f804c3b9d38908db292f088.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(8, 0, 0, 0);
                var Binding_fc3e943e1fee47689f66d23b0c881962 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_fc3e943e1fee47689f66d23b0c881962.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Stats.AdditonalDescription");



                StackPanel_da4f6c648f8447c3aaf215810c779b85.Children.add(StackPanel_6e75f29bedaa42cdaec9ca1d2c2bb25f);
                StackPanel_da4f6c648f8447c3aaf215810c779b85.Children.add(StackPanel_e109caf9f64a49ba866f8f79b8725614);
                StackPanel_da4f6c648f8447c3aaf215810c779b85.Children.add(StackPanel_3a8cccdf36ac47c9898be7ca865cab9c);
                StackPanel_da4f6c648f8447c3aaf215810c779b85.Children.add(StackPanel_dd218938f86e4892b5313769aa4c9446);
                StackPanel_da4f6c648f8447c3aaf215810c779b85.Children.add(StackPanel_60c14fb2a4df47f7ba9b9e3015d7ce12);
                StackPanel_da4f6c648f8447c3aaf215810c779b85.Children.add(TextBlock_3766cd9f2f804c3b9d38908db292f088);

                var Binding_f969adacb1f6492c872bb7d00b3d71ce = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f969adacb1f6492c872bb7d00b3d71ce.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Stats.Visible");
                var StaticResourceExtension_43ffd263301a451fad9d79d0017b6108 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_43ffd263301a451fad9d79d0017b6108.ResourceKey = "BoolToVis";





                this.Content = StackPanel_da4f6c648f8447c3aaf215810c779b85;



                this.QuestionsAnsweredCorrectlyLabel = TextBlock_0d0b8ce6c7da4886aea949f148f76a60;
                this.QuestionsAnsweredIncorrectlyLabel = TextBlock_58381098cae645ecaf92c220f4235ba1;
                this.TotalQuestionsLabel = TextBlock_21554ccc2961411399a00b1ff659e906;
                this.AnswerQuestionAttemptsLabel = TextBlock_a8db58ae5ac04679a3286f5e977e0e21;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_0d0b8ce6c7da4886aea949f148f76a60, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_415cbd31472c4286bbacfef4b9d7731e);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_58381098cae645ecaf92c220f4235ba1, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_1f216fc8e0964298aaa9166c495c0e61);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_21554ccc2961411399a00b1ff659e906, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_2f1d45c312d443f18c43c1c7d0656aea);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_a8db58ae5ac04679a3286f5e977e0e21, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_8a7b389b9d8b48cc997ed913c1d25358);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_2d6bc25653c2425a9453aa322f8b2eab, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_a499b6f0a5374796a81447a03b3521e8);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_3766cd9f2f804c3b9d38908db292f088, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_fc3e943e1fee47689f66d23b0c881962);
                var parents_2716a027f4b6426192fbb7580ed3d199 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_2716a027f4b6426192fbb7580ed3d199.add(StackPanel_da4f6c648f8447c3aaf215810c779b85);
                parents_2716a027f4b6426192fbb7580ed3d199.add(this);
                Binding_f969adacb1f6492c872bb7d00b3d71ce.Converter = Bridge.cast((StaticResourceExtension_43ffd263301a451fad9d79d0017b6108.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_f969adacb1f6492c872bb7d00b3d71ce, null, parents_2716a027f4b6426192fbb7580ed3d199))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(StackPanel_da4f6c648f8447c3aaf215810c779b85, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_f969adacb1f6492c872bb7d00b3d71ce);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswer2View", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            AnswerTextBox: null,
            AnswerTextBlock: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            AnswerTextBox_KeyUp: function (sender, e) {
                var tutorialViewModel = Bridge.cast(this.DataContext, TutorialVm.ITutorialViewModel);
                if (e.Key === Windows.System.VirtualKey.Enter) {
                    tutorialViewModel.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$Check.System$Windows$Input$ICommand$Execute(null);
                }
            },
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\StudentAnswer\\StudentAnswer2View.xaml";
                }

                var TextBox_31f6bc1991444d8b92ff90683ac9a6cf = new Bridge.global.Windows.UI.Xaml.Controls.TextBox();
                var TextBlock_4713af3666014978a010c6b53e7a1102 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                var BooleanToVisibilityConverter_5b19145a41c94ac097f0604ffb3d8000 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_5b19145a41c94ac097f0604ffb3d8000);

                var Grid_2d28ad62d7fb4b2283915f885507dcfc = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                this.RegisterName$1("AnswerTextBox", TextBox_31f6bc1991444d8b92ff90683ac9a6cf);
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.Name = "AnswerTextBox";
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.MinWidth = 250.0;
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.addKeyUp(Bridge.fn.cacheBind(this, this.AnswerTextBox_KeyUp));
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.FontSize = 20.0;
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(6, 6, 4, 0);
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.BorderBrush = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                TextBox_31f6bc1991444d8b92ff90683ac9a6cf.TabIndex = 0;
                var Binding_d74c2956fd2f47f3957bcce29ab6dad1 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_d74c2956fd2f47f3957bcce29ab6dad1.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer2.Raw");
                Binding_d74c2956fd2f47f3957bcce29ab6dad1.Mode = Bridge.global.Windows.UI.Xaml.Data.BindingMode.TwoWay;
                Binding_d74c2956fd2f47f3957bcce29ab6dad1.UpdateSourceTrigger = Bridge.global.Windows.UI.Xaml.Data.UpdateSourceTrigger.PropertyChanged;


                var Binding_e0ef9d82e1b5457ba27d7bef2bb7e538 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_e0ef9d82e1b5457ba27d7bef2bb7e538.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer2.RawVisible");
                var StaticResourceExtension_b8b4391759b64ee68c6ff271525a8f3c = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_b8b4391759b64ee68c6ff271525a8f3c.ResourceKey = "BoolToVis";





                this.RegisterName$1("AnswerTextBlock", TextBlock_4713af3666014978a010c6b53e7a1102);
                TextBlock_4713af3666014978a010c6b53e7a1102.Name = "AnswerTextBlock";
                TextBlock_4713af3666014978a010c6b53e7a1102.FontSize = 20.0;
                TextBlock_4713af3666014978a010c6b53e7a1102.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_4713af3666014978a010c6b53e7a1102, 2);
                TextBlock_4713af3666014978a010c6b53e7a1102.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_4713af3666014978a010c6b53e7a1102.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(7, 1, 4, 0);
                var Binding_f8e925df451c4a48b3264e1a98cc6857 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f8e925df451c4a48b3264e1a98cc6857.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer2.Raw");


                var Binding_88b67c79d0bd48cb82581751e1c175b1 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_88b67c79d0bd48cb82581751e1c175b1.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer2.StylizedVisible");
                var StaticResourceExtension_0bd27c90584d47be85da9dd1ca8fb5c8 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_0bd27c90584d47be85da9dd1ca8fb5c8.ResourceKey = "BoolToVis";





                Grid_2d28ad62d7fb4b2283915f885507dcfc.Children.add(TextBox_31f6bc1991444d8b92ff90683ac9a6cf);
                Grid_2d28ad62d7fb4b2283915f885507dcfc.Children.add(TextBlock_4713af3666014978a010c6b53e7a1102);


                this.Content = Grid_2d28ad62d7fb4b2283915f885507dcfc;



                this.AnswerTextBox = TextBox_31f6bc1991444d8b92ff90683ac9a6cf;
                this.AnswerTextBlock = TextBlock_4713af3666014978a010c6b53e7a1102;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBox_31f6bc1991444d8b92ff90683ac9a6cf, Bridge.global.Windows.UI.Xaml.Controls.TextBox.TextProperty, Binding_d74c2956fd2f47f3957bcce29ab6dad1);
                var parents_3c5b4159d306429d9e7cf848627766ea = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_3c5b4159d306429d9e7cf848627766ea.add(TextBox_31f6bc1991444d8b92ff90683ac9a6cf);
                parents_3c5b4159d306429d9e7cf848627766ea.add(Grid_2d28ad62d7fb4b2283915f885507dcfc);
                parents_3c5b4159d306429d9e7cf848627766ea.add(this);
                Binding_e0ef9d82e1b5457ba27d7bef2bb7e538.Converter = Bridge.cast((StaticResourceExtension_b8b4391759b64ee68c6ff271525a8f3c.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_e0ef9d82e1b5457ba27d7bef2bb7e538, null, parents_3c5b4159d306429d9e7cf848627766ea))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBox_31f6bc1991444d8b92ff90683ac9a6cf, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_e0ef9d82e1b5457ba27d7bef2bb7e538);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_4713af3666014978a010c6b53e7a1102, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_f8e925df451c4a48b3264e1a98cc6857);
                var parents_0270cf60e99d4f009591776c6b8d83ca = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_0270cf60e99d4f009591776c6b8d83ca.add(TextBlock_4713af3666014978a010c6b53e7a1102);
                parents_0270cf60e99d4f009591776c6b8d83ca.add(Grid_2d28ad62d7fb4b2283915f885507dcfc);
                parents_0270cf60e99d4f009591776c6b8d83ca.add(this);
                Binding_88b67c79d0bd48cb82581751e1c175b1.Converter = Bridge.cast((StaticResourceExtension_0bd27c90584d47be85da9dd1ca8fb5c8.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_88b67c79d0bd48cb82581751e1c175b1, null, parents_0270cf60e99d4f009591776c6b8d83ca))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_4713af3666014978a010c6b53e7a1102, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_88b67c79d0bd48cb82581751e1c175b1);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswer3View", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            AnswerTextBox: null,
            AnswerTextBlock: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            AnswerTextBox_KeyUp: function (sender, e) {
                var tutorialViewModel = Bridge.cast(this.DataContext, TutorialVm.ITutorialViewModel);
                if (e.Key === Windows.System.VirtualKey.Enter) {
                    tutorialViewModel.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$Check.System$Windows$Input$ICommand$Execute(null);
                }
            },
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\StudentAnswer\\StudentAnswer3View.xaml";
                }

                var TextBox_258e34dd95b14606b291eb1999a9f5c1 = new Bridge.global.Windows.UI.Xaml.Controls.TextBox();
                var TextBlock_7926728fdfb54b1c880e6b2a44d1d86f = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                var BooleanToVisibilityConverter_6d46a0864d484c98a2b405d970488ed2 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_6d46a0864d484c98a2b405d970488ed2);

                var Grid_774360abf49543b69d205483e02548c8 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                this.RegisterName$1("AnswerTextBox", TextBox_258e34dd95b14606b291eb1999a9f5c1);
                TextBox_258e34dd95b14606b291eb1999a9f5c1.Name = "AnswerTextBox";
                TextBox_258e34dd95b14606b291eb1999a9f5c1.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                TextBox_258e34dd95b14606b291eb1999a9f5c1.MinWidth = 250.0;
                TextBox_258e34dd95b14606b291eb1999a9f5c1.addKeyUp(Bridge.fn.cacheBind(this, this.AnswerTextBox_KeyUp));
                TextBox_258e34dd95b14606b291eb1999a9f5c1.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBox_258e34dd95b14606b291eb1999a9f5c1.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBox_258e34dd95b14606b291eb1999a9f5c1.FontSize = 20.0;
                TextBox_258e34dd95b14606b291eb1999a9f5c1.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(6, 6, 4, 0);
                TextBox_258e34dd95b14606b291eb1999a9f5c1.BorderBrush = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                TextBox_258e34dd95b14606b291eb1999a9f5c1.TabIndex = 0;
                var Binding_a2dd840b3f65479bbe9dbea4b1a33b31 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_a2dd840b3f65479bbe9dbea4b1a33b31.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer3.Raw");
                Binding_a2dd840b3f65479bbe9dbea4b1a33b31.Mode = Bridge.global.Windows.UI.Xaml.Data.BindingMode.TwoWay;
                Binding_a2dd840b3f65479bbe9dbea4b1a33b31.UpdateSourceTrigger = Bridge.global.Windows.UI.Xaml.Data.UpdateSourceTrigger.PropertyChanged;


                var Binding_68b22419e715406fb5e92700374eb058 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_68b22419e715406fb5e92700374eb058.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer3.RawVisible");
                var StaticResourceExtension_e5b7e958bc4a4df7a8d15a7fe706a298 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_e5b7e958bc4a4df7a8d15a7fe706a298.ResourceKey = "BoolToVis";





                this.RegisterName$1("AnswerTextBlock", TextBlock_7926728fdfb54b1c880e6b2a44d1d86f);
                TextBlock_7926728fdfb54b1c880e6b2a44d1d86f.Name = "AnswerTextBlock";
                TextBlock_7926728fdfb54b1c880e6b2a44d1d86f.FontSize = 20.0;
                TextBlock_7926728fdfb54b1c880e6b2a44d1d86f.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_7926728fdfb54b1c880e6b2a44d1d86f, 2);
                TextBlock_7926728fdfb54b1c880e6b2a44d1d86f.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_7926728fdfb54b1c880e6b2a44d1d86f.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(7, 1, 4, 0);
                var Binding_f760c203fa614ea9aeab6e031f9597d4 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f760c203fa614ea9aeab6e031f9597d4.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer3.Raw");


                var Binding_4927997e254a4bfe8c8e852bd5cbb00b = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_4927997e254a4bfe8c8e852bd5cbb00b.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer3.StylizedVisible");
                var StaticResourceExtension_7ac6e3319bb340b6bef2d06a12fee95a = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_7ac6e3319bb340b6bef2d06a12fee95a.ResourceKey = "BoolToVis";





                Grid_774360abf49543b69d205483e02548c8.Children.add(TextBox_258e34dd95b14606b291eb1999a9f5c1);
                Grid_774360abf49543b69d205483e02548c8.Children.add(TextBlock_7926728fdfb54b1c880e6b2a44d1d86f);


                this.Content = Grid_774360abf49543b69d205483e02548c8;



                this.AnswerTextBox = TextBox_258e34dd95b14606b291eb1999a9f5c1;
                this.AnswerTextBlock = TextBlock_7926728fdfb54b1c880e6b2a44d1d86f;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBox_258e34dd95b14606b291eb1999a9f5c1, Bridge.global.Windows.UI.Xaml.Controls.TextBox.TextProperty, Binding_a2dd840b3f65479bbe9dbea4b1a33b31);
                var parents_95bfa0fb2d01487d8e8613e9d776b782 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_95bfa0fb2d01487d8e8613e9d776b782.add(TextBox_258e34dd95b14606b291eb1999a9f5c1);
                parents_95bfa0fb2d01487d8e8613e9d776b782.add(Grid_774360abf49543b69d205483e02548c8);
                parents_95bfa0fb2d01487d8e8613e9d776b782.add(this);
                Binding_68b22419e715406fb5e92700374eb058.Converter = Bridge.cast((StaticResourceExtension_e5b7e958bc4a4df7a8d15a7fe706a298.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_68b22419e715406fb5e92700374eb058, null, parents_95bfa0fb2d01487d8e8613e9d776b782))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBox_258e34dd95b14606b291eb1999a9f5c1, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_68b22419e715406fb5e92700374eb058);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_7926728fdfb54b1c880e6b2a44d1d86f, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_f760c203fa614ea9aeab6e031f9597d4);
                var parents_c0a36bd78885499784359aef0be2a5a2 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_c0a36bd78885499784359aef0be2a5a2.add(TextBlock_7926728fdfb54b1c880e6b2a44d1d86f);
                parents_c0a36bd78885499784359aef0be2a5a2.add(Grid_774360abf49543b69d205483e02548c8);
                parents_c0a36bd78885499784359aef0be2a5a2.add(this);
                Binding_4927997e254a4bfe8c8e852bd5cbb00b.Converter = Bridge.cast((StaticResourceExtension_7ac6e3319bb340b6bef2d06a12fee95a.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_4927997e254a4bfe8c8e852bd5cbb00b, null, parents_c0a36bd78885499784359aef0be2a5a2))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_7926728fdfb54b1c880e6b2a44d1d86f, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_4927997e254a4bfe8c8e852bd5cbb00b);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswerLabelView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\StudentAnswer\\StudentAnswerLabelView.xaml";
                }



                var BooleanToVisibilityConverter_2f53a1a2e0734a35af85c077cb5fd93b = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_2f53a1a2e0734a35af85c077cb5fd93b);

                var Grid_9da0edd5358741dab13f648945c6a6d4 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2.Text = "Answer:";
                TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2.FontSize = 20.0;
                TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(4, 0, 4, 0);
                var Binding_1689bf58f1ca4c899d50dd72a4455263 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1689bf58f1ca4c899d50dd72a4455263.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer.IsStepAnswerable");
                var StaticResourceExtension_d45e8d123b394e7da0293ee7020bf97a = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_d45e8d123b394e7da0293ee7020bf97a.ResourceKey = "BoolToVis";





                Grid_9da0edd5358741dab13f648945c6a6d4.Children.add(TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2);


                this.Content = Grid_9da0edd5358741dab13f648945c6a6d4;





                var parents_bd6a30d234464da3a11ecd45cb0c3a71 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_bd6a30d234464da3a11ecd45cb0c3a71.add(TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2);
                parents_bd6a30d234464da3a11ecd45cb0c3a71.add(Grid_9da0edd5358741dab13f648945c6a6d4);
                parents_bd6a30d234464da3a11ecd45cb0c3a71.add(this);
                Binding_1689bf58f1ca4c899d50dd72a4455263.Converter = Bridge.cast((StaticResourceExtension_d45e8d123b394e7da0293ee7020bf97a.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_1689bf58f1ca4c899d50dd72a4455263, null, parents_bd6a30d234464da3a11ecd45cb0c3a71))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_184c6a5d3f3d44fca71adeffe5b9b6d2, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_1689bf58f1ca4c899d50dd72a4455263);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.StudentAnswer.StudentAnswerView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            AnswerTextBox: null,
            AnswerTextBlock: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            AnswerTextBox_KeyUp: function (sender, e) {
                var tutorialViewModel = Bridge.cast(this.DataContext, TutorialVm.ITutorialViewModel);
                if (e.Key === Windows.System.VirtualKey.Enter) {
                    tutorialViewModel.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$Check.System$Windows$Input$ICommand$Execute(null);
                }
            },
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\StudentAnswer\\StudentAnswerView.xaml";
                }

                var TextBox_13b312c6f0af4a91929e6ae33268d0a1 = new Bridge.global.Windows.UI.Xaml.Controls.TextBox();
                var TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                var BooleanToVisibilityConverter_38f8d4274ff1463db830095e9748ee39 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_38f8d4274ff1463db830095e9748ee39);

                var Grid_105d50d57554408ea06ddd72218d1382 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                this.RegisterName$1("AnswerTextBox", TextBox_13b312c6f0af4a91929e6ae33268d0a1);
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.Name = "AnswerTextBox";
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.MinWidth = 250.0;
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.addKeyUp(Bridge.fn.cacheBind(this, this.AnswerTextBox_KeyUp));
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.FontSize = 20.0;
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(6, 6, 4, 0);
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.BorderBrush = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                TextBox_13b312c6f0af4a91929e6ae33268d0a1.TabIndex = 0;
                var Binding_20939cc16131499bb17b2736513743fb = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_20939cc16131499bb17b2736513743fb.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer.Raw");
                Binding_20939cc16131499bb17b2736513743fb.Mode = Bridge.global.Windows.UI.Xaml.Data.BindingMode.TwoWay;
                Binding_20939cc16131499bb17b2736513743fb.UpdateSourceTrigger = Bridge.global.Windows.UI.Xaml.Data.UpdateSourceTrigger.PropertyChanged;


                var Binding_9e4091aac60b4a1dab50aa6acca8f65c = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_9e4091aac60b4a1dab50aa6acca8f65c.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer.RawVisible");
                var StaticResourceExtension_6a529aff4209419d97268fcc1abbad45 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_6a529aff4209419d97268fcc1abbad45.ResourceKey = "BoolToVis";





                this.RegisterName$1("AnswerTextBlock", TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc);
                TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc.Name = "AnswerTextBlock";
                TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc.FontSize = 20.0;
                TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc, 2);
                TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(7, 1, 4, 0);
                var Binding_917c64dce99c4f2f8a1b4e7639ca6caf = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_917c64dce99c4f2f8a1b4e7639ca6caf.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer.Raw");


                var Binding_4753506a56ba4c33aadd0a6599abca50 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_4753506a56ba4c33aadd0a6599abca50.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.StudentAnswer.StylizedVisible");
                var StaticResourceExtension_fd6d316faa3d4f9ab6af64d96b8a135b = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_fd6d316faa3d4f9ab6af64d96b8a135b.ResourceKey = "BoolToVis";





                Grid_105d50d57554408ea06ddd72218d1382.Children.add(TextBox_13b312c6f0af4a91929e6ae33268d0a1);
                Grid_105d50d57554408ea06ddd72218d1382.Children.add(TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc);


                this.Content = Grid_105d50d57554408ea06ddd72218d1382;



                this.AnswerTextBox = TextBox_13b312c6f0af4a91929e6ae33268d0a1;
                this.AnswerTextBlock = TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc;

                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBox_13b312c6f0af4a91929e6ae33268d0a1, Bridge.global.Windows.UI.Xaml.Controls.TextBox.TextProperty, Binding_20939cc16131499bb17b2736513743fb);
                var parents_506cfad60b944f0db225a81d69c6f8e1 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_506cfad60b944f0db225a81d69c6f8e1.add(TextBox_13b312c6f0af4a91929e6ae33268d0a1);
                parents_506cfad60b944f0db225a81d69c6f8e1.add(Grid_105d50d57554408ea06ddd72218d1382);
                parents_506cfad60b944f0db225a81d69c6f8e1.add(this);
                Binding_9e4091aac60b4a1dab50aa6acca8f65c.Converter = Bridge.cast((StaticResourceExtension_6a529aff4209419d97268fcc1abbad45.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_9e4091aac60b4a1dab50aa6acca8f65c, null, parents_506cfad60b944f0db225a81d69c6f8e1))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBox_13b312c6f0af4a91929e6ae33268d0a1, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_9e4091aac60b4a1dab50aa6acca8f65c);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_917c64dce99c4f2f8a1b4e7639ca6caf);
                var parents_db35632216b442a89e2bf3ca583c9255 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_db35632216b442a89e2bf3ca583c9255.add(TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc);
                parents_db35632216b442a89e2bf3ca583c9255.add(Grid_105d50d57554408ea06ddd72218d1382);
                parents_db35632216b442a89e2bf3ca583c9255.add(this);
                Binding_4753506a56ba4c33aadd0a6599abca50.Converter = Bridge.cast((StaticResourceExtension_fd6d316faa3d4f9ab6af64d96b8a135b.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_4753506a56ba4c33aadd0a6599abca50, null, parents_db35632216b442a89e2bf3ca583c9255))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_b0a2484b2fa5425b9c5b78a772ac96cc, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_4753506a56ba4c33aadd0a6599abca50);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialStep.TutorialStepListItemView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            QuestionIndentation: null,
            InformationIcon: null,
            ResultsIcon: null,
            NotAnsweredIcon: null,
            CorrectAnswerIcon: null,
            WrongAnswerIcon: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialStep\\TutorialStepListItemView.xaml";
                }

                var TextBlock_3fecc7f24e554e7a98d1516efeffa202 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var Path_466ef55537684a8f886599e4cd386dd3 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_2cdf34d8d65b4825911dea1eac9b8b9c = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_f97a49d2e8e94d7486b046087d4ba616 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_20a479d5271b46d28f0201cfe150dd0e = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_e7fbc1db171c4a33bd20fe9cdd2797fe = new Bridge.global.Windows.UI.Xaml.Shapes.Path();

                var BooleanToVisibilityConverter_27ed5c119440425a98c05ada4c49be69 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_27ed5c119440425a98c05ada4c49be69);

                var Grid_e767081160ad4ce288dcfae3dea6d5f2 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_3e0890ddbda849e7a42356a5a7f68dd4 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_3e0890ddbda849e7a42356a5a7f68dd4.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_36d0236cecb540b5b52751c02f178273 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_36d0236cecb540b5b52751c02f178273.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_e767081160ad4ce288dcfae3dea6d5f2.ColumnDefinitions.add(ColumnDefinition_3e0890ddbda849e7a42356a5a7f68dd4);
                Grid_e767081160ad4ce288dcfae3dea6d5f2.ColumnDefinitions.add(ColumnDefinition_36d0236cecb540b5b52751c02f178273);

                var StackPanel_7abd4d0ba4b34c198f976aa38594e774 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StackPanel_7abd4d0ba4b34c198f976aa38594e774, 0);
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Left;
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                this.RegisterName$1("QuestionIndentation", TextBlock_3fecc7f24e554e7a98d1516efeffa202);
                TextBlock_3fecc7f24e554e7a98d1516efeffa202.Name = "QuestionIndentation";
                TextBlock_3fecc7f24e554e7a98d1516efeffa202.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_3fecc7f24e554e7a98d1516efeffa202.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(20, 0, 0, 0);
                TextBlock_3fecc7f24e554e7a98d1516efeffa202.Text = "";
                var Binding_d027d1068de64f48bda43fbcad95ff16 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_d027d1068de64f48bda43fbcad95ff16.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("Abilities.IsAnswerable");
                var StaticResourceExtension_b165d595d42d4bfc98d7349369de8606 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_b165d595d42d4bfc98d7349369de8606.ResourceKey = "BoolToVis";





                this.RegisterName$1("InformationIcon", Path_466ef55537684a8f886599e4cd386dd3);
                Path_466ef55537684a8f886599e4cd386dd3.Name = "InformationIcon";
                Path_466ef55537684a8f886599e4cd386dd3.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_466ef55537684a8f886599e4cd386dd3.Width = 14.0;
                Path_466ef55537684a8f886599e4cd386dd3.Height = 14.0;
                Path_466ef55537684a8f886599e4cd386dd3.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_466ef55537684a8f886599e4cd386dd3.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_f56214b1d013434e9babce067c588163 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f56214b1d013434e9babce067c588163.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.TextMatchingIconBrush");


                var Binding_07bc73ddd1d84ddbaeab40ff7bb18ebd = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_07bc73ddd1d84ddbaeab40ff7bb18ebd.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.InformationIconVisible");
                var StaticResourceExtension_3ddbea298ec643b79c8b000520ad2b31 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_3ddbea298ec643b79c8b000520ad2b31.ResourceKey = "BoolToVis";





                this.RegisterName$1("ResultsIcon", Path_2cdf34d8d65b4825911dea1eac9b8b9c);
                Path_2cdf34d8d65b4825911dea1eac9b8b9c.Name = "ResultsIcon";
                Path_2cdf34d8d65b4825911dea1eac9b8b9c.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_2cdf34d8d65b4825911dea1eac9b8b9c.Width = 14.0;
                Path_2cdf34d8d65b4825911dea1eac9b8b9c.Height = 14.0;
                Path_2cdf34d8d65b4825911dea1eac9b8b9c.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_2cdf34d8d65b4825911dea1eac9b8b9c.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M14,2A8,8 0 0,0 6,10A8,8 0 0,0 14,18A8,8 0 0,0 22,10H20C20,13.32 17.32,16 14,16A6,6 0 0,1 8,10A6,6 0 0,1 14,4C14.43,4 14.86,4.05 15.27,4.14L16.88,2.54C15.96,2.18 15,2 14,2M20.59,3.58L14,10.17L11.62,7.79L10.21,9.21L14,13L22,5M4.93,5.82C3.08,7.34 2,9.61 2,12A8,8 0 0,0 10,20C10.64,20 11.27,19.92 11.88,19.77C10.12,19.38 8.5,18.5 7.17,17.29C5.22,16.25 4,14.21 4,12C4,11.7 4.03,11.41 4.07,11.11C4.03,10.74 4,10.37 4,10C4,8.56 4.32,7.13 4.93,5.82Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_f7837542f0d74c46ba0c5881d6cb7ca0 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f7837542f0d74c46ba0c5881d6cb7ca0.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.TextMatchingIconBrush");


                var Binding_2c756555b4614390bb059a16654dde6c = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_2c756555b4614390bb059a16654dde6c.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.ResultsIconVisible");
                var StaticResourceExtension_a610cee407d04a6eb4579e96dab978e1 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_a610cee407d04a6eb4579e96dab978e1.ResourceKey = "BoolToVis";





                this.RegisterName$1("NotAnsweredIcon", Path_f97a49d2e8e94d7486b046087d4ba616);
                Path_f97a49d2e8e94d7486b046087d4ba616.Name = "NotAnsweredIcon";
                Path_f97a49d2e8e94d7486b046087d4ba616.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_f97a49d2e8e94d7486b046087d4ba616.Width = 14.0;
                Path_f97a49d2e8e94d7486b046087d4ba616.Height = 14.0;
                Path_f97a49d2e8e94d7486b046087d4ba616.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_f97a49d2e8e94d7486b046087d4ba616.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_afe87a3bb39d4195a874a0da2770f087 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_afe87a3bb39d4195a874a0da2770f087.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.TextMatchingIconBrush");


                var Binding_af2f60734d0b4b92a6a31d1c68676bc5 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_af2f60734d0b4b92a6a31d1c68676bc5.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.NotAnsweredIconVisible");
                var StaticResourceExtension_1378b24e28d7421ab48fb4574176ff83 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_1378b24e28d7421ab48fb4574176ff83.ResourceKey = "BoolToVis";





                this.RegisterName$1("CorrectAnswerIcon", Path_20a479d5271b46d28f0201cfe150dd0e);
                Path_20a479d5271b46d28f0201cfe150dd0e.Name = "CorrectAnswerIcon";
                Path_20a479d5271b46d28f0201cfe150dd0e.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_20a479d5271b46d28f0201cfe150dd0e.Width = 14.0;
                Path_20a479d5271b46d28f0201cfe150dd0e.Height = 14.0;
                Path_20a479d5271b46d28f0201cfe150dd0e.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_20a479d5271b46d28f0201cfe150dd0e.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_b651e673b9994718aa18905b1644bec4 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_b651e673b9994718aa18905b1644bec4.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.SuccessIconBrush");


                var Binding_501e2eefadbf482ab3e5e285f867095f = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_501e2eefadbf482ab3e5e285f867095f.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.SuccessIconVisible");
                var StaticResourceExtension_fdac60618bb446b5b213983c1d44cf29 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_fdac60618bb446b5b213983c1d44cf29.ResourceKey = "BoolToVis";





                this.RegisterName$1("WrongAnswerIcon", Path_e7fbc1db171c4a33bd20fe9cdd2797fe);
                Path_e7fbc1db171c4a33bd20fe9cdd2797fe.Name = "WrongAnswerIcon";
                Path_e7fbc1db171c4a33bd20fe9cdd2797fe.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_e7fbc1db171c4a33bd20fe9cdd2797fe.Width = 14.0;
                Path_e7fbc1db171c4a33bd20fe9cdd2797fe.Height = 14.0;
                Path_e7fbc1db171c4a33bd20fe9cdd2797fe.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_e7fbc1db171c4a33bd20fe9cdd2797fe.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "M19,3H16.3H7.7H5A2,2 0 0,0 3,5V7.7V16.4V19A2,2 0 0,0 5,21H7.7H16.4H19A2,2 0 0,0 21,19V16.3V7.7V5A2,2 0 0,0 19,3M15.6,17L12,13.4L8.4,17L7,15.6L10.6,12L7,8.4L8.4,7L12,10.6L15.6,7L17,8.4L13.4,12L17,15.6L15.6,17Z"), Windows.UI.Xaml.Media.Geometry);
                var Binding_7509eccbef9d49cf8e387c8c6075bce9 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_7509eccbef9d49cf8e387c8c6075bce9.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.ErrorIconBrush");


                var Binding_2fb4e2509d4543b1a2a9455061793b74 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_2fb4e2509d4543b1a2a9455061793b74.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.ErrorIconVisible");
                var StaticResourceExtension_a81841130d594fd38467fb05fed79894 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_a81841130d594fd38467fb05fed79894.ResourceKey = "BoolToVis";





                StackPanel_7abd4d0ba4b34c198f976aa38594e774.Children.add(TextBlock_3fecc7f24e554e7a98d1516efeffa202);
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.Children.add(Path_466ef55537684a8f886599e4cd386dd3);
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.Children.add(Path_2cdf34d8d65b4825911dea1eac9b8b9c);
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.Children.add(Path_f97a49d2e8e94d7486b046087d4ba616);
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.Children.add(Path_20a479d5271b46d28f0201cfe150dd0e);
                StackPanel_7abd4d0ba4b34c198f976aa38594e774.Children.add(Path_e7fbc1db171c4a33bd20fe9cdd2797fe);


                var Grid_74ae30cfdf8c4c029fa93d63fbcccd09 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Grid_74ae30cfdf8c4c029fa93d63fbcccd09, 1);
                Grid_74ae30cfdf8c4c029fa93d63fbcccd09.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                var TextBlock_5f9e3ece52a148c4ae86ef45649dc44b = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                TextBlock_5f9e3ece52a148c4ae86ef45649dc44b.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(4, 0, 4, 0);
                TextBlock_5f9e3ece52a148c4ae86ef45649dc44b.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_5f9e3ece52a148c4ae86ef45649dc44b.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_5f9e3ece52a148c4ae86ef45649dc44b.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                var Binding_2ce53bef9f484e75a183a0c307c8802a = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_2ce53bef9f484e75a183a0c307c8802a.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.Name");


                var Binding_23d2d9baaced46409a3ad6382a77acff = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_23d2d9baaced46409a3ad6382a77acff.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.TextMatchingIconBrush");



                Grid_74ae30cfdf8c4c029fa93d63fbcccd09.Children.add(TextBlock_5f9e3ece52a148c4ae86ef45649dc44b);


                Grid_e767081160ad4ce288dcfae3dea6d5f2.Children.add(StackPanel_7abd4d0ba4b34c198f976aa38594e774);
                Grid_e767081160ad4ce288dcfae3dea6d5f2.Children.add(Grid_74ae30cfdf8c4c029fa93d63fbcccd09);

                var Binding_12baea5311224e4796b98d34322d438a = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_12baea5311224e4796b98d34322d438a.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("ListItem.BackgroundBrush");



                this.Content = Grid_e767081160ad4ce288dcfae3dea6d5f2;



                this.QuestionIndentation = TextBlock_3fecc7f24e554e7a98d1516efeffa202;
                this.InformationIcon = Path_466ef55537684a8f886599e4cd386dd3;
                this.ResultsIcon = Path_2cdf34d8d65b4825911dea1eac9b8b9c;
                this.NotAnsweredIcon = Path_f97a49d2e8e94d7486b046087d4ba616;
                this.CorrectAnswerIcon = Path_20a479d5271b46d28f0201cfe150dd0e;
                this.WrongAnswerIcon = Path_e7fbc1db171c4a33bd20fe9cdd2797fe;

                var parents_37bc99e4398d4e4ca8ca1b7c4623db2e = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_37bc99e4398d4e4ca8ca1b7c4623db2e.add(TextBlock_3fecc7f24e554e7a98d1516efeffa202);
                parents_37bc99e4398d4e4ca8ca1b7c4623db2e.add(StackPanel_7abd4d0ba4b34c198f976aa38594e774);
                parents_37bc99e4398d4e4ca8ca1b7c4623db2e.add(Grid_e767081160ad4ce288dcfae3dea6d5f2);
                parents_37bc99e4398d4e4ca8ca1b7c4623db2e.add(this);
                Binding_d027d1068de64f48bda43fbcad95ff16.Converter = Bridge.cast((StaticResourceExtension_b165d595d42d4bfc98d7349369de8606.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_d027d1068de64f48bda43fbcad95ff16, null, parents_37bc99e4398d4e4ca8ca1b7c4623db2e))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_3fecc7f24e554e7a98d1516efeffa202, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_d027d1068de64f48bda43fbcad95ff16);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_466ef55537684a8f886599e4cd386dd3, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_f56214b1d013434e9babce067c588163);
                var parents_73dc30427d6d4e3baea72d5f67878b47 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_73dc30427d6d4e3baea72d5f67878b47.add(Path_466ef55537684a8f886599e4cd386dd3);
                parents_73dc30427d6d4e3baea72d5f67878b47.add(StackPanel_7abd4d0ba4b34c198f976aa38594e774);
                parents_73dc30427d6d4e3baea72d5f67878b47.add(Grid_e767081160ad4ce288dcfae3dea6d5f2);
                parents_73dc30427d6d4e3baea72d5f67878b47.add(this);
                Binding_07bc73ddd1d84ddbaeab40ff7bb18ebd.Converter = Bridge.cast((StaticResourceExtension_3ddbea298ec643b79c8b000520ad2b31.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_07bc73ddd1d84ddbaeab40ff7bb18ebd, null, parents_73dc30427d6d4e3baea72d5f67878b47))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_466ef55537684a8f886599e4cd386dd3, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_07bc73ddd1d84ddbaeab40ff7bb18ebd);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_2cdf34d8d65b4825911dea1eac9b8b9c, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_f7837542f0d74c46ba0c5881d6cb7ca0);
                var parents_6ae7ec1a0a014e41b6b05f9c2dec40a4 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_6ae7ec1a0a014e41b6b05f9c2dec40a4.add(Path_2cdf34d8d65b4825911dea1eac9b8b9c);
                parents_6ae7ec1a0a014e41b6b05f9c2dec40a4.add(StackPanel_7abd4d0ba4b34c198f976aa38594e774);
                parents_6ae7ec1a0a014e41b6b05f9c2dec40a4.add(Grid_e767081160ad4ce288dcfae3dea6d5f2);
                parents_6ae7ec1a0a014e41b6b05f9c2dec40a4.add(this);
                Binding_2c756555b4614390bb059a16654dde6c.Converter = Bridge.cast((StaticResourceExtension_a610cee407d04a6eb4579e96dab978e1.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_2c756555b4614390bb059a16654dde6c, null, parents_6ae7ec1a0a014e41b6b05f9c2dec40a4))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_2cdf34d8d65b4825911dea1eac9b8b9c, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_2c756555b4614390bb059a16654dde6c);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_f97a49d2e8e94d7486b046087d4ba616, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_afe87a3bb39d4195a874a0da2770f087);
                var parents_6dc7e5be6a4e4dcca47dabba475626e6 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_6dc7e5be6a4e4dcca47dabba475626e6.add(Path_f97a49d2e8e94d7486b046087d4ba616);
                parents_6dc7e5be6a4e4dcca47dabba475626e6.add(StackPanel_7abd4d0ba4b34c198f976aa38594e774);
                parents_6dc7e5be6a4e4dcca47dabba475626e6.add(Grid_e767081160ad4ce288dcfae3dea6d5f2);
                parents_6dc7e5be6a4e4dcca47dabba475626e6.add(this);
                Binding_af2f60734d0b4b92a6a31d1c68676bc5.Converter = Bridge.cast((StaticResourceExtension_1378b24e28d7421ab48fb4574176ff83.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_af2f60734d0b4b92a6a31d1c68676bc5, null, parents_6dc7e5be6a4e4dcca47dabba475626e6))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_f97a49d2e8e94d7486b046087d4ba616, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_af2f60734d0b4b92a6a31d1c68676bc5);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_20a479d5271b46d28f0201cfe150dd0e, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_b651e673b9994718aa18905b1644bec4);
                var parents_5c5fbcbf02ba414b9bb38196b04cef2a = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_5c5fbcbf02ba414b9bb38196b04cef2a.add(Path_20a479d5271b46d28f0201cfe150dd0e);
                parents_5c5fbcbf02ba414b9bb38196b04cef2a.add(StackPanel_7abd4d0ba4b34c198f976aa38594e774);
                parents_5c5fbcbf02ba414b9bb38196b04cef2a.add(Grid_e767081160ad4ce288dcfae3dea6d5f2);
                parents_5c5fbcbf02ba414b9bb38196b04cef2a.add(this);
                Binding_501e2eefadbf482ab3e5e285f867095f.Converter = Bridge.cast((StaticResourceExtension_fdac60618bb446b5b213983c1d44cf29.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_501e2eefadbf482ab3e5e285f867095f, null, parents_5c5fbcbf02ba414b9bb38196b04cef2a))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_20a479d5271b46d28f0201cfe150dd0e, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_501e2eefadbf482ab3e5e285f867095f);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_e7fbc1db171c4a33bd20fe9cdd2797fe, Bridge.global.Windows.UI.Xaml.Shapes.Shape.FillProperty, Binding_7509eccbef9d49cf8e387c8c6075bce9);
                var parents_e3c134140f804e72af36cfd215c8e307 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_e3c134140f804e72af36cfd215c8e307.add(Path_e7fbc1db171c4a33bd20fe9cdd2797fe);
                parents_e3c134140f804e72af36cfd215c8e307.add(StackPanel_7abd4d0ba4b34c198f976aa38594e774);
                parents_e3c134140f804e72af36cfd215c8e307.add(Grid_e767081160ad4ce288dcfae3dea6d5f2);
                parents_e3c134140f804e72af36cfd215c8e307.add(this);
                Binding_2fb4e2509d4543b1a2a9455061793b74.Converter = Bridge.cast((StaticResourceExtension_a81841130d594fd38467fb05fed79894.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_2fb4e2509d4543b1a2a9455061793b74, null, parents_e3c134140f804e72af36cfd215c8e307))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_e7fbc1db171c4a33bd20fe9cdd2797fe, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_2fb4e2509d4543b1a2a9455061793b74);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_5f9e3ece52a148c4ae86ef45649dc44b, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_2ce53bef9f484e75a183a0c307c8802a);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_5f9e3ece52a148c4ae86ef45649dc44b, Bridge.global.Windows.UI.Xaml.Controls.Control.ForegroundProperty, Binding_23d2d9baaced46409a3ad6382a77acff);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_e767081160ad4ce288dcfae3dea6d5f2, Bridge.global.Windows.UI.Xaml.Controls.Panel.BackgroundProperty, Binding_12baea5311224e4796b98d34322d438a);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.TutorialView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\TutorialView.xaml";
                }



                var BooleanToVisibilityConverter_6c8a4a449093470b8fbe14b25340b1fe = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_6c8a4a449093470b8fbe14b25340b1fe);

                var DockPanel_03e570d374f04960832f5c2aa985c46f = new Bridge.global.Windows.UI.Xaml.Controls.DockPanel();
                var BottomRegionView_2935c0d889b04a36b3d917043a4374d9 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.BottomRegionView();
                Bridge.global.Windows.UI.Xaml.Controls.DockPanel.SetDock(BottomRegionView_2935c0d889b04a36b3d917043a4374d9, Bridge.global.Windows.UI.Xaml.Controls.Dock.Bottom);

                var Grid_ef5b41f46ecf46a89bc067c0a08d68f3 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_18f7c63779104929bd7896b6d1afc34d = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_18f7c63779104929bd7896b6d1afc34d.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_0d3ba86acb5d4d16aaaaac9b9317cbee = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_0d3ba86acb5d4d16aaaaac9b9317cbee.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_674ef4355ebf4a2fa8d19cfc94351169 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_674ef4355ebf4a2fa8d19cfc94351169.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.25, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_1ea7c53839614a23a58b451024b88b9b = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_1ea7c53839614a23a58b451024b88b9b.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_15072d3c07e8497d8e3edb13afcdf571 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_15072d3c07e8497d8e3edb13afcdf571.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.ColumnDefinitions.add(ColumnDefinition_18f7c63779104929bd7896b6d1afc34d);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.ColumnDefinitions.add(ColumnDefinition_0d3ba86acb5d4d16aaaaac9b9317cbee);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.ColumnDefinitions.add(ColumnDefinition_674ef4355ebf4a2fa8d19cfc94351169);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.ColumnDefinitions.add(ColumnDefinition_1ea7c53839614a23a58b451024b88b9b);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.ColumnDefinitions.add(ColumnDefinition_15072d3c07e8497d8e3edb13afcdf571);

                var LeftRegionView_ac5724ba587444ce9097545346414425 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.LeftRegionView();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(LeftRegionView_ac5724ba587444ce9097545346414425, 0);

                var LeftRegionExpaderView_01c4b0d9c9024746ad82481ef9b0b1ff = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.LeftRegionExpaderView();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(LeftRegionExpaderView_01c4b0d9c9024746ad82481ef9b0b1ff, 1);

                var Grid_babf5c71aa0b4bf7adb6ba89c00cbf18 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Grid_babf5c71aa0b4bf7adb6ba89c00cbf18, 2);
                Grid_babf5c71aa0b4bf7adb6ba89c00cbf18.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(16, 0, 0, 0);
                var CenterRegionView_a161485d7eeb45e2b49e1ebb1d996a1e = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.CenterRegionView();

                Grid_babf5c71aa0b4bf7adb6ba89c00cbf18.Children.add(CenterRegionView_a161485d7eeb45e2b49e1ebb1d996a1e);


                var Grid_cdfe349c21f9475a94fd2d08a2dc4e51 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(Grid_cdfe349c21f9475a94fd2d08a2dc4e51, 3);
                Grid_cdfe349c21f9475a94fd2d08a2dc4e51.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(50, 0, 50, 0);
                var Binding_921ba30e3ad24d68aa5067b45ca231fc = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_921ba30e3ad24d68aa5067b45ca231fc.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.MainContent.ShowExtraMarginOnTheRight");
                var StaticResourceExtension_a780a91e4ce046a8a15cc086102687d0 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_a780a91e4ce046a8a15cc086102687d0.ResourceKey = "BoolToVis";





                var RightRegionView_fbc6715afcdf4549a99747f0055bcdb6 = new Bridge.global.SocraLogicHtml5.Pages.Tutorials.RightRegionView();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(RightRegionView_fbc6715afcdf4549a99747f0055bcdb6, 4);
                var Binding_1f6cdc250b99449097effcb76cbb4d1f = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1f6cdc250b99449097effcb76cbb4d1f.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.Abilities.ChecksAPropositionAnswer");
                var StaticResourceExtension_8cdfac564d97460f87b68c1aa7ca872b = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_8cdfac564d97460f87b68c1aa7ca872b.ResourceKey = "BoolToVis";





                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.Children.add(LeftRegionView_ac5724ba587444ce9097545346414425);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.Children.add(LeftRegionExpaderView_01c4b0d9c9024746ad82481ef9b0b1ff);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.Children.add(Grid_babf5c71aa0b4bf7adb6ba89c00cbf18);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.Children.add(Grid_cdfe349c21f9475a94fd2d08a2dc4e51);
                Grid_ef5b41f46ecf46a89bc067c0a08d68f3.Children.add(RightRegionView_fbc6715afcdf4549a99747f0055bcdb6);


                DockPanel_03e570d374f04960832f5c2aa985c46f.Children.add(BottomRegionView_2935c0d889b04a36b3d917043a4374d9);
                DockPanel_03e570d374f04960832f5c2aa985c46f.Children.add(Grid_ef5b41f46ecf46a89bc067c0a08d68f3);


                this.Content = DockPanel_03e570d374f04960832f5c2aa985c46f;





                var parents_42a6c4b7af19456084c0514bab830d31 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_42a6c4b7af19456084c0514bab830d31.add(Grid_cdfe349c21f9475a94fd2d08a2dc4e51);
                parents_42a6c4b7af19456084c0514bab830d31.add(Grid_ef5b41f46ecf46a89bc067c0a08d68f3);
                parents_42a6c4b7af19456084c0514bab830d31.add(DockPanel_03e570d374f04960832f5c2aa985c46f);
                parents_42a6c4b7af19456084c0514bab830d31.add(this);
                Binding_921ba30e3ad24d68aa5067b45ca231fc.Converter = Bridge.cast((StaticResourceExtension_a780a91e4ce046a8a15cc086102687d0.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_921ba30e3ad24d68aa5067b45ca231fc, null, parents_42a6c4b7af19456084c0514bab830d31))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_cdfe349c21f9475a94fd2d08a2dc4e51, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_921ba30e3ad24d68aa5067b45ca231fc);
                var parents_28955fdc30c74414ad3e25dc4cb91426 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_28955fdc30c74414ad3e25dc4cb91426.add(RightRegionView_fbc6715afcdf4549a99747f0055bcdb6);
                parents_28955fdc30c74414ad3e25dc4cb91426.add(Grid_ef5b41f46ecf46a89bc067c0a08d68f3);
                parents_28955fdc30c74414ad3e25dc4cb91426.add(DockPanel_03e570d374f04960832f5c2aa985c46f);
                parents_28955fdc30c74414ad3e25dc4cb91426.add(this);
                Binding_1f6cdc250b99449097effcb76cbb4d1f.Converter = Bridge.cast((StaticResourceExtension_8cdfac564d97460f87b68c1aa7ca872b.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_1f6cdc250b99449097effcb76cbb4d1f, null, parents_28955fdc30c74414ad3e25dc4cb91426))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(RightRegionView_fbc6715afcdf4549a99747f0055bcdb6, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_1f6cdc250b99449097effcb76cbb4d1f);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.SaveTutorialResultsButtonView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            SaveTutorialButton: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            SaveTutorialButton_Click: function (sender, e) {
                var tutorialViewModel = Bridge.cast(this.DataContext, TutorialVm.ITutorialViewModel);
                var persistTutorialVisitor = this.CreatePersistTutorialVisitor(tutorialViewModel.TutorialVm$ITutorialViewModel$Name);
                tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(persistTutorialVisitor);
            },
            CreatePersistTutorialVisitor: function (tutorialViewModelName) {
                var tutorialDictionaryFactory = new Tutorial.Dictionaries.TutorialDictionaryFactory();
                var tutorialNameToXmlFileNameDictionary = tutorialDictionaryFactory.CreateTutorialNameToXmlFileNameDictionary();
                var filePath = tutorialNameToXmlFileNameDictionary.getItem(tutorialViewModelName);
                var persistTutorialVisitor = new TutorialVm.Visitors.PersistTutorial.Xml.PersistTutorialToXmlVisitor(new TutorialVm.Visitors.PersistTutorial.DataObjectFactory.TutorialDataObjectFactoryHtml5(), new SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.TutorialXmlSerializer.TutorialXmlSerializerHtml5(), new SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.XmlFileSaver.TutorialXmlFileDownloaderHtml5(), filePath);
                return persistTutorialVisitor;
            },
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Tutorials\\Visitors\\PersistTutorial\\Xml\\SaveTutorialResultsButtonView.xaml";
                }

                var Button_ecaed6f0308d47d2b1ac9a8538d37b5e = new Bridge.global.Windows.UI.Xaml.Controls.Button();

                this.RegisterName$1("SaveTutorialButton", Button_ecaed6f0308d47d2b1ac9a8538d37b5e);
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.Name = "SaveTutorialButton";
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.TabIndex = 1;
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.addClick(Bridge.fn.cacheBind(this, this.SaveTutorialButton_Click));
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.IsEnabled = true;
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.Visibility = Bridge.global.Windows.UI.Xaml.Visibility.Visible;
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.Background = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 255, $t.G = 255, $t.B = 255, $t));
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.Height = 45.0;
                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.Width = 45.0;
                var Path_68dd9c860046421d97467228bc29e986 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                Path_68dd9c860046421d97467228bc29e986.Fill = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.$ctor1(($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 0, $t.G = 0, $t.B = 0, $t));
                Path_68dd9c860046421d97467228bc29e986.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_68dd9c860046421d97467228bc29e986.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                Path_68dd9c860046421d97467228bc29e986.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                Path_68dd9c860046421d97467228bc29e986.Height = 20.0;
                Path_68dd9c860046421d97467228bc29e986.Width = 20.0;
                Path_68dd9c860046421d97467228bc29e986.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 20.5833,20.5833L 55.4167,20.5833L 55.4167,55.4167L 45.9167,55.4167L 45.9167,44.3333L 30.0833,44.3333L 30.0833,55.4167L 20.5833,55.4167L 20.5833,20.5833 Z M 33.25,55.4167L 33.25,50.6667L 39.5833,50.6667L 39.5833,55.4167L 33.25,55.4167 Z M 26.9167,23.75L 26.9167,33.25L 49.0833,33.25L 49.0833,23.75L 26.9167,23.75 Z"), Windows.UI.Xaml.Media.Geometry);

                Button_ecaed6f0308d47d2b1ac9a8538d37b5e.Content = Path_68dd9c860046421d97467228bc29e986;


                this.Content = Button_ecaed6f0308d47d2b1ac9a8538d37b5e;



                this.SaveTutorialButton = Button_ecaed6f0308d47d2b1ac9a8538d37b5e;



            }
        }
    });

    Bridge.define("TutorialPersistence.Serializers.Xml.TutorialXmlSerializer.ITutorialXmlSerializer", {
        $kind: "interface"
    });

    Bridge.define("TutorialPersistence.Serializers.Xml.XmlFileSaver.ITutorialFileSaver", {
        $kind: "interface"
    });

    Bridge.define("SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter", {
        inherits: [Windows.UI.Xaml.Data.IValueConverter],
        alias: [
            "Convert", "Windows$UI$Xaml$Data$IValueConverter$Convert",
            "ConvertBack", "Windows$UI$Xaml$Data$IValueConverter$ConvertBack"
        ],
        methods: {
            Convert: function (value, targetType, parameter, language) {
                if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(value, System.Boolean), System.Boolean)) === true) {
                    return Bridge.box(Windows.UI.Xaml.Visibility.Visible, Windows.UI.Xaml.Visibility, System.Enum.toStringFn(Windows.UI.Xaml.Visibility));
                } else {
                    return Bridge.box(Windows.UI.Xaml.Visibility.Collapsed, Windows.UI.Xaml.Visibility, System.Enum.toStringFn(Windows.UI.Xaml.Visibility));
                }
            },
            ConvertBack: function (value, targetType, parameter, language) {
                if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(value, Windows.UI.Xaml.Visibility), System.Int32)) === Windows.UI.Xaml.Visibility.Visible) {
                    return Bridge.box(true, System.Boolean, System.Boolean.toString);
                } else {
                    return Bridge.box(false, System.Boolean, System.Boolean.toString);
                }
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.WorldviewExplorer.SubPages.EulerCircles.EulerCirclesView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            EulersCirclesTitleLabel: null,
            EulerCirclePathForA: null,
            EulerCirclePathForE: null,
            EulerCirclePathForI: null,
            EulerCirclePathForO: null,
            EulerCircleSubjectLabelForA: null,
            EulerCirclePredicateLabelForA: null,
            EulerCircleSubjectLabelForE: null,
            EulerCirclePredicateLabelForE: null,
            EulerCircleSubjectLabelForI: null,
            EulerCirclePredicateLabelForI: null,
            EulerCircleSubjectLabelForO: null,
            EulerCirclePredicateLabelForO: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                var $t;
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Proposition\\EulerCircles\\EulerCirclesView.xaml";
                }

                var TextBlock_c4ee1c69f1134c169659bfb5836eb559 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var Path_8133af5688ff47f980eaf883d50857e7 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_15b5d89055e4404690e84570abd0a8ef = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_b1af19eeee804b8e90f5a6c50f0006f2 = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var Path_6b1e4c199653449dbc9483660844e68a = new Bridge.global.Windows.UI.Xaml.Shapes.Path();
                var TextBlock_6b9a275ac434470aae999b39159700a7 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_d5cb014827034a1395ee824f3d7cdee5 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_3d81fc356b3641e2bc7610be31fb9fcb = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_1b5d377ee45c4ecc953657782349dd75 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_f3a7e9dd34e74e9597dda047f211a8d2 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_8500851e18f149de88a0ad648bca5ece = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_e23a2f406547429793fee5798e90bd6d = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                var BooleanToVisibilityConverter_8cbb6caaf74f416396d7932eef999f60 = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_8cbb6caaf74f416396d7932eef999f60);

                var Grid_df136bbf23a443b691cf8c42b802da99 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_df136bbf23a443b691cf8c42b802da99.MaxHeight = 300.0;
                var DockPanel_46731cc5c520418e91bfc9b7c2898b95 = new Bridge.global.Windows.UI.Xaml.Controls.DockPanel();
                this.RegisterName$1("EulersCirclesTitleLabel", TextBlock_c4ee1c69f1134c169659bfb5836eb559);
                TextBlock_c4ee1c69f1134c169659bfb5836eb559.Name = "EulersCirclesTitleLabel";
                Bridge.global.Windows.UI.Xaml.Controls.DockPanel.SetDock(TextBlock_c4ee1c69f1134c169659bfb5836eb559, Bridge.global.Windows.UI.Xaml.Controls.Dock.Top);
                TextBlock_c4ee1c69f1134c169659bfb5836eb559.Text = "Euler's Circles";
                TextBlock_c4ee1c69f1134c169659bfb5836eb559.FontSize = 16.0;
                TextBlock_c4ee1c69f1134c169659bfb5836eb559.FontWeight = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Text.FontWeight, "Bold"), Windows.UI.Text.FontWeight), Windows.UI.Text.FontWeight));

                this.RegisterName$1("EulerCirclePathForA", Path_8133af5688ff47f980eaf883d50857e7);
                Path_8133af5688ff47f980eaf883d50857e7.Name = "EulerCirclePathForA";
                Path_8133af5688ff47f980eaf883d50857e7.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 10, 0, 10);
                Path_8133af5688ff47f980eaf883d50857e7.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_8133af5688ff47f980eaf883d50857e7.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 190.5,0.500061C 295.434,0.500061 380.5,63.628 380.5,141.5C 380.5,219.372 295.434,282.5 190.5,282.5C 85.5659,282.5 0.5,219.372 0.5,141.5C 0.5,63.628 85.5659,0.500061 190.5,0.500061 Z M 103.911,56.6461C 55.5543,56.6461 16.3532,96.0683 16.3532,144.698C 16.3532,193.328 55.5543,232.75 103.911,232.75C 152.268,232.75 191.469,193.328 191.469,144.698C 191.469,96.0683 152.268,56.6461 103.911,56.6461 Z "), Windows.UI.Xaml.Media.Geometry);
                var SolidColorBrush_697a8b1e6f504d00986da430154f6dc8 = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.ctor();
                SolidColorBrush_697a8b1e6f504d00986da430154f6dc8.Color = ($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 27, $t.G = 161, $t.B = 226, $t);

                Path_8133af5688ff47f980eaf883d50857e7.Stroke = SolidColorBrush_697a8b1e6f504d00986da430154f6dc8;

                var Binding_a3c47355950e41f097fc7d81e3acf340 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_a3c47355950e41f097fc7d81e3acf340.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.AIsVisible");
                var StaticResourceExtension_fc6a046f53084120909ed51bdc32e747 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_fc6a046f53084120909ed51bdc32e747.ResourceKey = "BoolToVis";





                this.RegisterName$1("EulerCirclePathForE", Path_15b5d89055e4404690e84570abd0a8ef);
                Path_15b5d89055e4404690e84570abd0a8ef.Name = "EulerCirclePathForE";
                Path_15b5d89055e4404690e84570abd0a8ef.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 10, 0, 10);
                Path_15b5d89055e4404690e84570abd0a8ef.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Uniform;
                Path_15b5d89055e4404690e84570abd0a8ef.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 88.0581,0.562378C 136.415,0.562378 175.616,39.9846 175.616,88.6144C 175.616,137.244 136.415,176.666 88.0581,176.666C 39.7011,176.666 0.5,137.244 0.5,88.6144C 0.5,39.9846 39.7011,0.562378 88.0581,0.562378 Z M 289.235,0.499939C 337.592,0.499939 376.794,39.9222 376.794,88.5519C 376.794,137.182 337.592,176.604 289.235,176.604C 240.878,176.604 201.677,137.182 201.677,88.5519C 201.677,39.9222 240.878,0.499939 289.235,0.499939 Z "), Windows.UI.Xaml.Media.Geometry);
                var SolidColorBrush_f8fc6149b22e476d9ebfcb44a1ae95d8 = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.ctor();
                SolidColorBrush_f8fc6149b22e476d9ebfcb44a1ae95d8.Color = ($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 27, $t.G = 161, $t.B = 226, $t);

                Path_15b5d89055e4404690e84570abd0a8ef.Stroke = SolidColorBrush_f8fc6149b22e476d9ebfcb44a1ae95d8;

                var Binding_8dbcf38b4b4c46509515754831f0cc41 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_8dbcf38b4b4c46509515754831f0cc41.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.EIsVisible");
                var StaticResourceExtension_76e0064e124f4069a33357ea2f29654a = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_76e0064e124f4069a33357ea2f29654a.ResourceKey = "BoolToVis";





                this.RegisterName$1("EulerCirclePathForI", Path_b1af19eeee804b8e90f5a6c50f0006f2);
                Path_b1af19eeee804b8e90f5a6c50f0006f2.Name = "EulerCirclePathForI";
                Path_b1af19eeee804b8e90f5a6c50f0006f2.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 10, 0, 10);
                Path_b1af19eeee804b8e90f5a6c50f0006f2.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_b1af19eeee804b8e90f5a6c50f0006f2.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 200.546,42.9287L 200.632,42.8804C 194.559,39.6194 188.191,36.8377 181.578,34.5862L 181.795,33.7736C 188.638,36.1052 195.22,39.0001 201.486,42.403L 201.522,42.3828C 219.861,32.2374 240.954,26.4621 263.395,26.4621C 334.088,26.4621 391.395,83.7697 391.395,154.462C 391.395,225.154 334.088,282.462 263.395,282.462C 241.325,282.462 220.559,276.876 202.435,267.041L 201.301,266.419C 161.993,244.571 135.395,202.623 135.395,154.462C 135.395,106.611 161.653,64.8922 200.546,42.9287 Z M 202.305,265.864C 241.187,244.143 267.478,202.581 267.478,154.879C 267.478,106.808 240.779,64.9732 201.401,43.3939C 162.519,65.1152 136.228,106.677 136.228,154.379C 136.228,202.45 162.927,244.285 202.305,265.864 Z M 202.38,42.8529C 241.839,64.6575 268.562,106.689 268.562,154.962C 268.562,202.802 242.317,244.511 203.441,266.479C 221.269,276.014 241.638,281.421 263.27,281.421C 333.433,281.421 390.311,224.542 390.311,154.379C 390.311,84.2159 333.433,27.3373 263.27,27.3373C 241.208,27.3373 220.46,32.9609 202.38,42.8529 Z M 140.738,26.9623C 149.143,26.9784 157.357,27.8046 165.307,29.3667L 165.086,30.1924C 157.167,28.6471 148.985,27.8373 140.613,27.8373L 137.935,27.865L 137.859,26.9937L 138.358,26.9837L 140.488,26.9622L 140.738,26.9623 Z M 140.488,282.962C 132,282.946 123.706,282.104 115.682,280.511L 115.946,279.527C 123.925,281.098 132.173,281.921 140.613,281.921L 143.028,281.898L 143.119,282.936L 140.488,282.962 Z M 160.122,281.466L 160.033,280.446C 169.152,279.047 177.952,276.678 186.324,273.449L 186.744,274.349C 178.27,277.635 169.359,280.044 160.122,281.466 Z M 12.7645,152.354L 13.5948,152.426L 13.5716,154.879C 13.5716,163.301 14.3912,171.532 15.955,179.497L 15.1304,179.717C 13.5609,171.708 12.7384,163.431 12.7384,154.962L 12.7645,152.354 Z M 120.858,28.4965L 120.933,29.3524C 111.806,30.7718 103,33.1629 94.625,36.4165L 94.271,35.6574C 102.733,32.3591 111.633,29.9352 120.858,28.4965 Z M 78.8208,42.9074L 79.1704,43.6571C 71.1828,48.0791 63.722,53.3367 56.906,59.3117L 56.3296,58.7353C 63.2128,52.6926 70.7499,47.3767 78.8208,42.9074 Z M 44.2782,70.8199L 44.8519,71.3936C 38.8967,78.2188 33.6593,85.6864 29.2574,93.6789L 28.5227,93.3364C 32.9678,85.2595 38.2595,77.7141 44.2782,70.8199 Z M 21.3132,108.806L 22.0507,109.149C 18.8218,117.515 16.4528,126.309 15.0523,135.422L 14.2315,135.35C 15.6474,126.142 18.0447,117.257 21.3132,108.806 Z M 31.8701,220.6L 31.1357,221.114C 26.4195,213.317 22.5119,204.976 19.529,196.208L 20.3683,195.983C 23.3298,204.649 27.2018,212.892 31.8701,220.6 Z M 60.3315,254.561C 53.1872,248.786 46.6767,242.258 40.9209,235.097L 41.6706,234.572C 47.3697,241.639 53.8105,248.083 60.8746,253.785L 60.3315,254.561 Z M 99.2027,276.073C 90.4285,273.064 82.0846,269.129 74.2878,264.384L 74.8424,263.592C 82.5501,268.265 90.7945,272.142 99.4615,275.107L 99.2027,276.073 Z "), Windows.UI.Xaml.Media.Geometry);
                var SolidColorBrush_afe65dcc67a64a12a4b79af1d5b5409c = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.ctor();
                SolidColorBrush_afe65dcc67a64a12a4b79af1d5b5409c.Color = ($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 27, $t.G = 161, $t.B = 226, $t);

                Path_b1af19eeee804b8e90f5a6c50f0006f2.Stroke = SolidColorBrush_afe65dcc67a64a12a4b79af1d5b5409c;

                var Binding_f9b1c413f9c9458dbf3ed13f0de22c59 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_f9b1c413f9c9458dbf3ed13f0de22c59.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.IIsVisible");
                var StaticResourceExtension_aa0ac9f442784d358eb4371c0d252494 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_aa0ac9f442784d358eb4371c0d252494.ResourceKey = "BoolToVis";





                this.RegisterName$1("EulerCirclePathForO", Path_6b1e4c199653449dbc9483660844e68a);
                Path_6b1e4c199653449dbc9483660844e68a.Name = "EulerCirclePathForO";
                Path_6b1e4c199653449dbc9483660844e68a.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 10, 0, 10);
                Path_6b1e4c199653449dbc9483660844e68a.Stretch = Bridge.global.Windows.UI.Xaml.Media.Stretch.Fill;
                Path_6b1e4c199653449dbc9483660844e68a.Data = Bridge.cast(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Xaml.Media.Geometry, "F1 M 202.38,42.8526L 202.351,42.8689L 206.471,45.2621L 205.998,45.9374L 201.498,43.3404L 201.402,43.3936C 162.519,65.1149 136.229,106.677 136.229,154.379C 136.229,202.363 162.831,244.133 202.092,265.747C 209.869,261.411 217.144,256.282 223.806,250.468L 224.472,251.134C 217.906,256.882 210.747,261.97 203.099,266.294L 203.441,266.479C 221.27,276.014 241.639,281.421 263.27,281.421C 333.433,281.421 390.312,224.542 390.312,154.379C 390.312,84.2156 333.433,27.3371 263.27,27.3371C 241.208,27.3371 220.46,32.9607 202.38,42.8526 Z M 200.546,42.9288C 182.65,33.3002 162.182,27.8371 140.437,27.8371C 70.2737,27.8371 13.3952,84.7157 13.3952,154.879C 13.3952,225.042 70.2737,281.921 140.437,281.921C 162.488,281.921 183.228,276.302 201.301,266.419C 161.993,244.571 135.395,202.623 135.395,154.462C 135.395,106.611 161.653,64.8922 200.546,42.9288 Z M 201.522,42.3828C 219.861,32.2374 240.954,26.4621 263.395,26.4621C 334.088,26.4621 391.395,83.7697 391.395,154.462C 391.395,225.154 334.088,282.462 263.395,282.462C 241.325,282.462 220.559,276.876 202.435,267.041C 184.096,277.187 163.003,282.962 140.562,282.962C 69.8695,282.962 12.562,225.655 12.562,154.962C 12.562,84.2697 69.8695,26.9622 140.562,26.9622C 162.632,26.9622 183.398,32.5479 201.522,42.3828 Z M 260.597,113.695C 257.631,104.993 253.747,96.7164 249.06,88.9799L 249.724,88.5151C 254.463,96.3294 258.389,104.691 261.385,113.484L 260.597,113.695 Z M 239.923,74.5433L 239.259,75.0083C 233.538,67.9153 227.07,61.4501 219.974,55.7324L 220.443,55.0631C 227.613,60.8396 234.147,67.3735 239.923,74.5433 Z M 268.169,157.421L 267.336,157.348L 267.362,154.707C 267.362,146.318 266.549,138.119 264.998,130.184L 265.791,129.972C 267.369,138.001 268.196,146.299 268.196,154.79L 268.169,157.421 Z M 236.54,239.066L 235.888,238.414C 241.868,231.593 247.128,224.127 251.552,216.132L 252.36,216.509C 247.897,224.603 242.583,232.162 236.54,239.066 Z M 259.583,201.046L 258.791,200.677C 262.045,192.296 264.436,183.484 265.853,174.35L 266.7,174.424C 265.278,183.661 262.868,192.572 259.583,201.046 Z "), Windows.UI.Xaml.Media.Geometry);
                var SolidColorBrush_07779e6bafc0415d8c19ffb3c97b770c = new Bridge.global.Windows.UI.Xaml.Media.SolidColorBrush.ctor();
                SolidColorBrush_07779e6bafc0415d8c19ffb3c97b770c.Color = ($t = new Bridge.global.Windows.UI.Color(), $t.A = 255, $t.R = 27, $t.G = 161, $t.B = 226, $t);

                Path_6b1e4c199653449dbc9483660844e68a.Stroke = SolidColorBrush_07779e6bafc0415d8c19ffb3c97b770c;

                var Binding_29a63e6cc83b43648b6479239b3bd564 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_29a63e6cc83b43648b6479239b3bd564.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.OIsVisible");
                var StaticResourceExtension_b2cb1161bd0c4f04a05e513b4b431d65 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_b2cb1161bd0c4f04a05e513b4b431d65.ResourceKey = "BoolToVis";





                DockPanel_46731cc5c520418e91bfc9b7c2898b95.Children.add(TextBlock_c4ee1c69f1134c169659bfb5836eb559);
                DockPanel_46731cc5c520418e91bfc9b7c2898b95.Children.add(Path_8133af5688ff47f980eaf883d50857e7);
                DockPanel_46731cc5c520418e91bfc9b7c2898b95.Children.add(Path_15b5d89055e4404690e84570abd0a8ef);
                DockPanel_46731cc5c520418e91bfc9b7c2898b95.Children.add(Path_b1af19eeee804b8e90f5a6c50f0006f2);
                DockPanel_46731cc5c520418e91bfc9b7c2898b95.Children.add(Path_6b1e4c199653449dbc9483660844e68a);


                var Grid_c95ab594033c4aa4afa2e52af9c4c2f6 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_d143ed0a8d3d4001bef187d2c6b6d852 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_d143ed0a8d3d4001bef187d2c6b6d852.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_47a78a7aed974a15b0ce2bb111a409a2 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_47a78a7aed974a15b0ce2bb111a409a2.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(10, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_94c0bf8d8bef489683d36807b6e03e4b = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_94c0bf8d8bef489683d36807b6e03e4b.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(10, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_c081a17ba0044b91a26649e97aaf2f0a = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_c081a17ba0044b91a26649e97aaf2f0a.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.ColumnDefinitions.add(ColumnDefinition_d143ed0a8d3d4001bef187d2c6b6d852);
                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.ColumnDefinitions.add(ColumnDefinition_47a78a7aed974a15b0ce2bb111a409a2);
                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.ColumnDefinitions.add(ColumnDefinition_94c0bf8d8bef489683d36807b6e03e4b);
                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.ColumnDefinitions.add(ColumnDefinition_c081a17ba0044b91a26649e97aaf2f0a);

                var RowDefinition_a2b5e1457dfc469682e3cef3c140f6c1 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_a2b5e1457dfc469682e3cef3c140f6c1.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.3, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_a7bbdf6cd0b7468abe9134785e46ce37 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_a7bbdf6cd0b7468abe9134785e46ce37.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_1abd6ce944ca4b3bbc58d224f251823e = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_1abd6ce944ca4b3bbc58d224f251823e.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.RowDefinitions.add(RowDefinition_a2b5e1457dfc469682e3cef3c140f6c1);
                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.RowDefinitions.add(RowDefinition_a7bbdf6cd0b7468abe9134785e46ce37);
                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.RowDefinitions.add(RowDefinition_1abd6ce944ca4b3bbc58d224f251823e);

                this.RegisterName$1("EulerCircleSubjectLabelForA", TextBlock_6b9a275ac434470aae999b39159700a7);
                TextBlock_6b9a275ac434470aae999b39159700a7.Name = "EulerCircleSubjectLabelForA";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_6b9a275ac434470aae999b39159700a7, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_6b9a275ac434470aae999b39159700a7, 1);
                TextBlock_6b9a275ac434470aae999b39159700a7.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_6b9a275ac434470aae999b39159700a7.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_6b9a275ac434470aae999b39159700a7.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_1ef248ce733c45c78f5b13a81300d0e1 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1ef248ce733c45c78f5b13a81300d0e1.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.SubjectText");



                this.RegisterName$1("EulerCirclePredicateLabelForA", TextBlock_d5cb014827034a1395ee824f3d7cdee5);
                TextBlock_d5cb014827034a1395ee824f3d7cdee5.Name = "EulerCirclePredicateLabelForA";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_d5cb014827034a1395ee824f3d7cdee5, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_d5cb014827034a1395ee824f3d7cdee5, 2);
                TextBlock_d5cb014827034a1395ee824f3d7cdee5.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_d5cb014827034a1395ee824f3d7cdee5.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_d5cb014827034a1395ee824f3d7cdee5.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_bb6732cf39024cddb7f34b40c71a5486 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_bb6732cf39024cddb7f34b40c71a5486.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.PredicateText");



                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.Children.add(TextBlock_6b9a275ac434470aae999b39159700a7);
                Grid_c95ab594033c4aa4afa2e52af9c4c2f6.Children.add(TextBlock_d5cb014827034a1395ee824f3d7cdee5);

                var Binding_13a11314b25343b4b46454f10efd6270 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_13a11314b25343b4b46454f10efd6270.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.AIsVisible");
                var StaticResourceExtension_8f5362135b3349f6b66b2a8eabed2cbb = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_8f5362135b3349f6b66b2a8eabed2cbb.ResourceKey = "BoolToVis";





                var Grid_2148481fe8e64f23bd1d9da2816beabd = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_ff80a961fb6a411995a5ec53de3906df = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_ff80a961fb6a411995a5ec53de3906df.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(33, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_c9adac38a6e1427cbcb31417c1b821c7 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_c9adac38a6e1427cbcb31417c1b821c7.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(67, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_25206faf439541769a6d2b55f94ac0a1 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_25206faf439541769a6d2b55f94ac0a1.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(87, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_8a8694a854da423caf114172e3bfe013 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_8a8694a854da423caf114172e3bfe013.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(80, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_d16aa011d32a4c93a4d5b9a53ae596c2 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_d16aa011d32a4c93a4d5b9a53ae596c2.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(33, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_2148481fe8e64f23bd1d9da2816beabd.ColumnDefinitions.add(ColumnDefinition_ff80a961fb6a411995a5ec53de3906df);
                Grid_2148481fe8e64f23bd1d9da2816beabd.ColumnDefinitions.add(ColumnDefinition_c9adac38a6e1427cbcb31417c1b821c7);
                Grid_2148481fe8e64f23bd1d9da2816beabd.ColumnDefinitions.add(ColumnDefinition_25206faf439541769a6d2b55f94ac0a1);
                Grid_2148481fe8e64f23bd1d9da2816beabd.ColumnDefinitions.add(ColumnDefinition_8a8694a854da423caf114172e3bfe013);
                Grid_2148481fe8e64f23bd1d9da2816beabd.ColumnDefinitions.add(ColumnDefinition_d16aa011d32a4c93a4d5b9a53ae596c2);

                var RowDefinition_788f6a6eaab64be6919ee87934d4a745 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_788f6a6eaab64be6919ee87934d4a745.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_50713fac94524174bc01e47ad2ecee18 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_50713fac94524174bc01e47ad2ecee18.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_158198071c4a44d9a77db1253da6dbf0 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_158198071c4a44d9a77db1253da6dbf0.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.6, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_2148481fe8e64f23bd1d9da2816beabd.RowDefinitions.add(RowDefinition_788f6a6eaab64be6919ee87934d4a745);
                Grid_2148481fe8e64f23bd1d9da2816beabd.RowDefinitions.add(RowDefinition_50713fac94524174bc01e47ad2ecee18);
                Grid_2148481fe8e64f23bd1d9da2816beabd.RowDefinitions.add(RowDefinition_158198071c4a44d9a77db1253da6dbf0);

                this.RegisterName$1("EulerCircleSubjectLabelForE", TextBlock_3d81fc356b3641e2bc7610be31fb9fcb);
                TextBlock_3d81fc356b3641e2bc7610be31fb9fcb.Name = "EulerCircleSubjectLabelForE";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_3d81fc356b3641e2bc7610be31fb9fcb, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_3d81fc356b3641e2bc7610be31fb9fcb, 1);
                TextBlock_3d81fc356b3641e2bc7610be31fb9fcb.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_3d81fc356b3641e2bc7610be31fb9fcb.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_3d81fc356b3641e2bc7610be31fb9fcb.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_57842611b1de4964a87226d2846ee904 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_57842611b1de4964a87226d2846ee904.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.SubjectText");



                this.RegisterName$1("EulerCirclePredicateLabelForE", TextBlock_1b5d377ee45c4ecc953657782349dd75);
                TextBlock_1b5d377ee45c4ecc953657782349dd75.Name = "EulerCirclePredicateLabelForE";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_1b5d377ee45c4ecc953657782349dd75, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_1b5d377ee45c4ecc953657782349dd75, 3);
                TextBlock_1b5d377ee45c4ecc953657782349dd75.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_1b5d377ee45c4ecc953657782349dd75.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_1b5d377ee45c4ecc953657782349dd75.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_8853f594243542e0824df98249dae3ed = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_8853f594243542e0824df98249dae3ed.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.PredicateText");



                Grid_2148481fe8e64f23bd1d9da2816beabd.Children.add(TextBlock_3d81fc356b3641e2bc7610be31fb9fcb);
                Grid_2148481fe8e64f23bd1d9da2816beabd.Children.add(TextBlock_1b5d377ee45c4ecc953657782349dd75);

                var Binding_2f3d17ade3564dc3bd177d51d437feed = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_2f3d17ade3564dc3bd177d51d437feed.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.EIsVisible");
                var StaticResourceExtension_317025c6ba86432d9e507a707fb73fc5 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_317025c6ba86432d9e507a707fb73fc5.ResourceKey = "BoolToVis";





                var Grid_eb0a66056816413ea5542386ba562f50 = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_d9fef346b8e548fb9d87668ab60c01d6 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_d9fef346b8e548fb9d87668ab60c01d6.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_e10531af7c434cbbb28868676230927e = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_e10531af7c434cbbb28868676230927e.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.2, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_78849b5b81cd4ac1b170d445262b6e0f = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_78849b5b81cd4ac1b170d445262b6e0f.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_eb0a66056816413ea5542386ba562f50.ColumnDefinitions.add(ColumnDefinition_d9fef346b8e548fb9d87668ab60c01d6);
                Grid_eb0a66056816413ea5542386ba562f50.ColumnDefinitions.add(ColumnDefinition_e10531af7c434cbbb28868676230927e);
                Grid_eb0a66056816413ea5542386ba562f50.ColumnDefinitions.add(ColumnDefinition_78849b5b81cd4ac1b170d445262b6e0f);

                var RowDefinition_95166e17941a4ab8bb87ed6ca66d9f6f = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_95166e17941a4ab8bb87ed6ca66d9f6f.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.3, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_d856d100b03c4aef8d67bc87627f8b6d = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_d856d100b03c4aef8d67bc87627f8b6d.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_d138e0becbd44c45b2562d3f6d4f4cbd = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_d138e0becbd44c45b2562d3f6d4f4cbd.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_eb0a66056816413ea5542386ba562f50.RowDefinitions.add(RowDefinition_95166e17941a4ab8bb87ed6ca66d9f6f);
                Grid_eb0a66056816413ea5542386ba562f50.RowDefinitions.add(RowDefinition_d856d100b03c4aef8d67bc87627f8b6d);
                Grid_eb0a66056816413ea5542386ba562f50.RowDefinitions.add(RowDefinition_d138e0becbd44c45b2562d3f6d4f4cbd);

                this.RegisterName$1("EulerCircleSubjectLabelForI", TextBlock_f3a7e9dd34e74e9597dda047f211a8d2);
                TextBlock_f3a7e9dd34e74e9597dda047f211a8d2.Name = "EulerCircleSubjectLabelForI";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_f3a7e9dd34e74e9597dda047f211a8d2, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_f3a7e9dd34e74e9597dda047f211a8d2, 1);
                TextBlock_f3a7e9dd34e74e9597dda047f211a8d2.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_f3a7e9dd34e74e9597dda047f211a8d2.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_f3a7e9dd34e74e9597dda047f211a8d2.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_fa6b809170f7491d9d43700becfda726 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_fa6b809170f7491d9d43700becfda726.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.SubjectText");



                this.RegisterName$1("EulerCirclePredicateLabelForI", TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08);
                TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08.Name = "EulerCirclePredicateLabelForI";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08, 2);
                TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_4d6e696e855446618b67d63c4002e9a4 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_4d6e696e855446618b67d63c4002e9a4.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.PredicateText");



                Grid_eb0a66056816413ea5542386ba562f50.Children.add(TextBlock_f3a7e9dd34e74e9597dda047f211a8d2);
                Grid_eb0a66056816413ea5542386ba562f50.Children.add(TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08);

                var Binding_bb9df03d3da14b7e87f37088a3eeca92 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_bb9df03d3da14b7e87f37088a3eeca92.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.IIsVisible");
                var StaticResourceExtension_2ccbabb5db284b319054f3b71ac6914e = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_2ccbabb5db284b319054f3b71ac6914e.ResourceKey = "BoolToVis";





                var Grid_e69cb150e65643b2a7c6df77e556b7fb = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                var ColumnDefinition_de1bb67571384082ac35cdcc3c1b4209 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_de1bb67571384082ac35cdcc3c1b4209.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_9279d9a4a844412fb3d553f994dfa481 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_9279d9a4a844412fb3d553f994dfa481.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.2, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var ColumnDefinition_d88f0ff77d274e57b642250438a10101 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_d88f0ff77d274e57b642250438a10101.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_e69cb150e65643b2a7c6df77e556b7fb.ColumnDefinitions.add(ColumnDefinition_de1bb67571384082ac35cdcc3c1b4209);
                Grid_e69cb150e65643b2a7c6df77e556b7fb.ColumnDefinitions.add(ColumnDefinition_9279d9a4a844412fb3d553f994dfa481);
                Grid_e69cb150e65643b2a7c6df77e556b7fb.ColumnDefinitions.add(ColumnDefinition_d88f0ff77d274e57b642250438a10101);

                var RowDefinition_d50e1625b25c427d9038ff7952505512 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_d50e1625b25c427d9038ff7952505512.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.3, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_e25d772a608344489d0c76a72a672022 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_e25d772a608344489d0c76a72a672022.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                var RowDefinition_99854f4864ac44a5952dd048dc007d64 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_99854f4864ac44a5952dd048dc007d64.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_e69cb150e65643b2a7c6df77e556b7fb.RowDefinitions.add(RowDefinition_d50e1625b25c427d9038ff7952505512);
                Grid_e69cb150e65643b2a7c6df77e556b7fb.RowDefinitions.add(RowDefinition_e25d772a608344489d0c76a72a672022);
                Grid_e69cb150e65643b2a7c6df77e556b7fb.RowDefinitions.add(RowDefinition_99854f4864ac44a5952dd048dc007d64);

                this.RegisterName$1("EulerCircleSubjectLabelForO", TextBlock_8500851e18f149de88a0ad648bca5ece);
                TextBlock_8500851e18f149de88a0ad648bca5ece.Name = "EulerCircleSubjectLabelForO";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_8500851e18f149de88a0ad648bca5ece, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_8500851e18f149de88a0ad648bca5ece, 0);
                TextBlock_8500851e18f149de88a0ad648bca5ece.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_8500851e18f149de88a0ad648bca5ece.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_8500851e18f149de88a0ad648bca5ece.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_bf8c49c311d94419a3a1dcdd3ee53ee9 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_bf8c49c311d94419a3a1dcdd3ee53ee9.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.SubjectText");



                this.RegisterName$1("EulerCirclePredicateLabelForO", TextBlock_e23a2f406547429793fee5798e90bd6d);
                TextBlock_e23a2f406547429793fee5798e90bd6d.Name = "EulerCirclePredicateLabelForO";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_e23a2f406547429793fee5798e90bd6d, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_e23a2f406547429793fee5798e90bd6d, 2);
                TextBlock_e23a2f406547429793fee5798e90bd6d.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_e23a2f406547429793fee5798e90bd6d.VerticalAlignment = Bridge.global.Windows.UI.Xaml.VerticalAlignment.Center;
                TextBlock_e23a2f406547429793fee5798e90bd6d.HorizontalAlignment = Bridge.global.Windows.UI.Xaml.HorizontalAlignment.Center;
                var Binding_fe75196d7354469da152ffe354258229 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_fe75196d7354469da152ffe354258229.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.PredicateText");



                Grid_e69cb150e65643b2a7c6df77e556b7fb.Children.add(TextBlock_8500851e18f149de88a0ad648bca5ece);
                Grid_e69cb150e65643b2a7c6df77e556b7fb.Children.add(TextBlock_e23a2f406547429793fee5798e90bd6d);

                var Binding_12584727b6b04846b69ddb4c2170b74b = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_12584727b6b04846b69ddb4c2170b74b.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.EulerCircles.OIsVisible");
                var StaticResourceExtension_1b66da2da818458788232e00ca837690 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_1b66da2da818458788232e00ca837690.ResourceKey = "BoolToVis";





                Grid_df136bbf23a443b691cf8c42b802da99.Children.add(DockPanel_46731cc5c520418e91bfc9b7c2898b95);
                Grid_df136bbf23a443b691cf8c42b802da99.Children.add(Grid_c95ab594033c4aa4afa2e52af9c4c2f6);
                Grid_df136bbf23a443b691cf8c42b802da99.Children.add(Grid_2148481fe8e64f23bd1d9da2816beabd);
                Grid_df136bbf23a443b691cf8c42b802da99.Children.add(Grid_eb0a66056816413ea5542386ba562f50);
                Grid_df136bbf23a443b691cf8c42b802da99.Children.add(Grid_e69cb150e65643b2a7c6df77e556b7fb);


                this.Content = Grid_df136bbf23a443b691cf8c42b802da99;



                this.EulersCirclesTitleLabel = TextBlock_c4ee1c69f1134c169659bfb5836eb559;
                this.EulerCirclePathForA = Path_8133af5688ff47f980eaf883d50857e7;
                this.EulerCirclePathForE = Path_15b5d89055e4404690e84570abd0a8ef;
                this.EulerCirclePathForI = Path_b1af19eeee804b8e90f5a6c50f0006f2;
                this.EulerCirclePathForO = Path_6b1e4c199653449dbc9483660844e68a;
                this.EulerCircleSubjectLabelForA = TextBlock_6b9a275ac434470aae999b39159700a7;
                this.EulerCirclePredicateLabelForA = TextBlock_d5cb014827034a1395ee824f3d7cdee5;
                this.EulerCircleSubjectLabelForE = TextBlock_3d81fc356b3641e2bc7610be31fb9fcb;
                this.EulerCirclePredicateLabelForE = TextBlock_1b5d377ee45c4ecc953657782349dd75;
                this.EulerCircleSubjectLabelForI = TextBlock_f3a7e9dd34e74e9597dda047f211a8d2;
                this.EulerCirclePredicateLabelForI = TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08;
                this.EulerCircleSubjectLabelForO = TextBlock_8500851e18f149de88a0ad648bca5ece;
                this.EulerCirclePredicateLabelForO = TextBlock_e23a2f406547429793fee5798e90bd6d;

                var parents_4164c49dcefa468488692ba1bde369a2 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_4164c49dcefa468488692ba1bde369a2.add(Path_8133af5688ff47f980eaf883d50857e7);
                parents_4164c49dcefa468488692ba1bde369a2.add(DockPanel_46731cc5c520418e91bfc9b7c2898b95);
                parents_4164c49dcefa468488692ba1bde369a2.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_4164c49dcefa468488692ba1bde369a2.add(this);
                Binding_a3c47355950e41f097fc7d81e3acf340.Converter = Bridge.cast((StaticResourceExtension_fc6a046f53084120909ed51bdc32e747.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_a3c47355950e41f097fc7d81e3acf340, null, parents_4164c49dcefa468488692ba1bde369a2))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_8133af5688ff47f980eaf883d50857e7, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_a3c47355950e41f097fc7d81e3acf340);
                var parents_3d07bedc72ee4bd9a241df1cc619db37 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_3d07bedc72ee4bd9a241df1cc619db37.add(Path_15b5d89055e4404690e84570abd0a8ef);
                parents_3d07bedc72ee4bd9a241df1cc619db37.add(DockPanel_46731cc5c520418e91bfc9b7c2898b95);
                parents_3d07bedc72ee4bd9a241df1cc619db37.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_3d07bedc72ee4bd9a241df1cc619db37.add(this);
                Binding_8dbcf38b4b4c46509515754831f0cc41.Converter = Bridge.cast((StaticResourceExtension_76e0064e124f4069a33357ea2f29654a.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_8dbcf38b4b4c46509515754831f0cc41, null, parents_3d07bedc72ee4bd9a241df1cc619db37))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_15b5d89055e4404690e84570abd0a8ef, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_8dbcf38b4b4c46509515754831f0cc41);
                var parents_b78b9e8f6e6d48b39e95d1b4b59c3c1f = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_b78b9e8f6e6d48b39e95d1b4b59c3c1f.add(Path_b1af19eeee804b8e90f5a6c50f0006f2);
                parents_b78b9e8f6e6d48b39e95d1b4b59c3c1f.add(DockPanel_46731cc5c520418e91bfc9b7c2898b95);
                parents_b78b9e8f6e6d48b39e95d1b4b59c3c1f.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_b78b9e8f6e6d48b39e95d1b4b59c3c1f.add(this);
                Binding_f9b1c413f9c9458dbf3ed13f0de22c59.Converter = Bridge.cast((StaticResourceExtension_aa0ac9f442784d358eb4371c0d252494.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_f9b1c413f9c9458dbf3ed13f0de22c59, null, parents_b78b9e8f6e6d48b39e95d1b4b59c3c1f))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_b1af19eeee804b8e90f5a6c50f0006f2, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_f9b1c413f9c9458dbf3ed13f0de22c59);
                var parents_dc5405776e714e8682c9e86dafbb608a = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_dc5405776e714e8682c9e86dafbb608a.add(Path_6b1e4c199653449dbc9483660844e68a);
                parents_dc5405776e714e8682c9e86dafbb608a.add(DockPanel_46731cc5c520418e91bfc9b7c2898b95);
                parents_dc5405776e714e8682c9e86dafbb608a.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_dc5405776e714e8682c9e86dafbb608a.add(this);
                Binding_29a63e6cc83b43648b6479239b3bd564.Converter = Bridge.cast((StaticResourceExtension_b2cb1161bd0c4f04a05e513b4b431d65.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_29a63e6cc83b43648b6479239b3bd564, null, parents_dc5405776e714e8682c9e86dafbb608a))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Path_6b1e4c199653449dbc9483660844e68a, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_29a63e6cc83b43648b6479239b3bd564);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_6b9a275ac434470aae999b39159700a7, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_1ef248ce733c45c78f5b13a81300d0e1);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_d5cb014827034a1395ee824f3d7cdee5, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_bb6732cf39024cddb7f34b40c71a5486);
                var parents_02f07d7c27314c21bea210401b5e2021 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_02f07d7c27314c21bea210401b5e2021.add(Grid_c95ab594033c4aa4afa2e52af9c4c2f6);
                parents_02f07d7c27314c21bea210401b5e2021.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_02f07d7c27314c21bea210401b5e2021.add(this);
                Binding_13a11314b25343b4b46454f10efd6270.Converter = Bridge.cast((StaticResourceExtension_8f5362135b3349f6b66b2a8eabed2cbb.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_13a11314b25343b4b46454f10efd6270, null, parents_02f07d7c27314c21bea210401b5e2021))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_c95ab594033c4aa4afa2e52af9c4c2f6, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_13a11314b25343b4b46454f10efd6270);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_3d81fc356b3641e2bc7610be31fb9fcb, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_57842611b1de4964a87226d2846ee904);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_1b5d377ee45c4ecc953657782349dd75, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_8853f594243542e0824df98249dae3ed);
                var parents_e98837c3d6634688b7e4c575edf8b898 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_e98837c3d6634688b7e4c575edf8b898.add(Grid_2148481fe8e64f23bd1d9da2816beabd);
                parents_e98837c3d6634688b7e4c575edf8b898.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_e98837c3d6634688b7e4c575edf8b898.add(this);
                Binding_2f3d17ade3564dc3bd177d51d437feed.Converter = Bridge.cast((StaticResourceExtension_317025c6ba86432d9e507a707fb73fc5.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_2f3d17ade3564dc3bd177d51d437feed, null, parents_e98837c3d6634688b7e4c575edf8b898))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_2148481fe8e64f23bd1d9da2816beabd, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_2f3d17ade3564dc3bd177d51d437feed);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_f3a7e9dd34e74e9597dda047f211a8d2, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_fa6b809170f7491d9d43700becfda726);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_bc0f3a0c0534455183cd3e7cc1ec3e08, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_4d6e696e855446618b67d63c4002e9a4);
                var parents_069ada5fb8a046cea81d10cab07dca29 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_069ada5fb8a046cea81d10cab07dca29.add(Grid_eb0a66056816413ea5542386ba562f50);
                parents_069ada5fb8a046cea81d10cab07dca29.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_069ada5fb8a046cea81d10cab07dca29.add(this);
                Binding_bb9df03d3da14b7e87f37088a3eeca92.Converter = Bridge.cast((StaticResourceExtension_2ccbabb5db284b319054f3b71ac6914e.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_bb9df03d3da14b7e87f37088a3eeca92, null, parents_069ada5fb8a046cea81d10cab07dca29))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_eb0a66056816413ea5542386ba562f50, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_bb9df03d3da14b7e87f37088a3eeca92);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_8500851e18f149de88a0ad648bca5ece, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_bf8c49c311d94419a3a1dcdd3ee53ee9);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_e23a2f406547429793fee5798e90bd6d, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_fe75196d7354469da152ffe354258229);
                var parents_93ac99fda45d4a6fa0f8a1049c363771 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_93ac99fda45d4a6fa0f8a1049c363771.add(Grid_e69cb150e65643b2a7c6df77e556b7fb);
                parents_93ac99fda45d4a6fa0f8a1049c363771.add(Grid_df136bbf23a443b691cf8c42b802da99);
                parents_93ac99fda45d4a6fa0f8a1049c363771.add(this);
                Binding_12584727b6b04846b69ddb4c2170b74b.Converter = Bridge.cast((StaticResourceExtension_1b66da2da818458788232e00ca837690.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_12584727b6b04846b69ddb4c2170b74b, null, parents_93ac99fda45d4a6fa0f8a1049c363771))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_e69cb150e65643b2a7c6df77e556b7fb, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_12584727b6b04846b69ddb4c2170b74b);

            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.WorldviewExplorer.SubPages.PropositionProperties.PropositionPropertiesView", {
        inherits: [Windows.UI.Xaml.Controls.UserControl],
        fields: {
            PropositionPropertiesTitleLabel: null,
            PremiseCheckbox: null,
            ConclusionCheckbox: null,
            AssertThatItIsTrue: null,
            AssertThatItIsFalse: null,
            PropertyGridQuantifierLabel: null,
            PropertyGridSubjectLabel: null,
            PropertyGridCopulaLabel: null,
            PropertyGridPredicateLabel: null,
            PropertyGridCategoricalPropositionStatus: null,
            _contentLoaded: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                Windows.UI.Xaml.Controls.UserControl.ctor.call(this);
                this.InitializeComponent();
            }
        },
        methods: {
            InitializeComponent: function () {
                if (this._contentLoaded) {
                    return;
                }
                this._contentLoaded = true;


                if (Bridge.is(this, Windows.UI.Xaml.UIElement)) {
                    Bridge.cast(this, Windows.UI.Xaml.UIElement).XamlSourcePath = "SocraLogicHtml5\\ZeePortsAndAdapters\\User Interface\\Pages\\Proposition\\PropositionProperties\\PropositionPropertiesView.xaml";
                }

                var TextBlock_c6c6132898c4489fa5c3c9d425bf23cc = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var CheckBox_72a0778d64084fbb81da7ab3adfbf800 = new Bridge.global.Windows.UI.Xaml.Controls.CheckBox();
                var CheckBox_6eb74cb28b604242b17f8867e714c561 = new Bridge.global.Windows.UI.Xaml.Controls.CheckBox();
                var CheckBox_2e4b0710be3c4094aa8a528f9aec3f27 = new Bridge.global.Windows.UI.Xaml.Controls.CheckBox();
                var CheckBox_4fa90869dc4e421ea312b4f1b04c8b69 = new Bridge.global.Windows.UI.Xaml.Controls.CheckBox();
                var TextBlock_cc5287afd0954b0494a93d85fbe9bfcb = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_c0e5eaf94f82453ea377273b97e19812 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_461daa8a53b643b4986f8ee6d5c00bd5 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_731dfab042754347bd7437c96a68bb5a = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                var TextBlock_855c58be84e04bb2b62b7d4d401cd0a2 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();

                var BooleanToVisibilityConverter_177b62d954e4463c8de0c1184660e0ec = new Bridge.global.SocraLogicHtml5.Pages.ViewHelpers.BooleanToVisibilityConverter();

                this.Resources.setItem("BoolToVis", BooleanToVisibilityConverter_177b62d954e4463c8de0c1184660e0ec);

                var DockPanel_e7de7e7ce49e4755bc29b348eb56244d = new Bridge.global.Windows.UI.Xaml.Controls.DockPanel();
                DockPanel_e7de7e7ce49e4755bc29b348eb56244d.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, -29, -0.4, 0.4);
                this.RegisterName$1("PropositionPropertiesTitleLabel", TextBlock_c6c6132898c4489fa5c3c9d425bf23cc);
                TextBlock_c6c6132898c4489fa5c3c9d425bf23cc.Name = "PropositionPropertiesTitleLabel";
                Bridge.global.Windows.UI.Xaml.Controls.DockPanel.SetDock(TextBlock_c6c6132898c4489fa5c3c9d425bf23cc, Bridge.global.Windows.UI.Xaml.Controls.Dock.Top);
                TextBlock_c6c6132898c4489fa5c3c9d425bf23cc.Text = "Proposition Properties";
                TextBlock_c6c6132898c4489fa5c3c9d425bf23cc.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_c6c6132898c4489fa5c3c9d425bf23cc.FontSize = 16.0;
                TextBlock_c6c6132898c4489fa5c3c9d425bf23cc.FontWeight = System.Nullable.getValue(Bridge.cast(Bridge.unbox(Bridge.global.DotNetForHtml5.Core.TypeFromStringConverters.ConvertFromInvariantString(Bridge.global.Windows.UI.Text.FontWeight, "Bold"), Windows.UI.Text.FontWeight), Windows.UI.Text.FontWeight));

                var ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624 = new Bridge.global.Windows.UI.Xaml.Controls.ScrollViewer();
                ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 8, 0, 0);
                ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624.HorizontalScrollBarVisibility = Bridge.global.Windows.UI.Xaml.Controls.ScrollBarVisibility.Hidden;
                var Grid_d3bc240b65b443f68a6286448060565e = new Bridge.global.Windows.UI.Xaml.Controls.Grid();
                Grid_d3bc240b65b443f68a6286448060565e.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(2, 5, 2, 5);
                var ColumnDefinition_bf888c5d35174f1d9b5b0d4c3f897c35 = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_bf888c5d35174f1d9b5b0d4c3f897c35.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var ColumnDefinition_195f7570bf2b44f796b9469dad6e5c3e = new Bridge.global.Windows.UI.Xaml.Controls.ColumnDefinition();
                ColumnDefinition_195f7570bf2b44f796b9469dad6e5c3e.Width = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Star);

                Grid_d3bc240b65b443f68a6286448060565e.ColumnDefinitions.add(ColumnDefinition_bf888c5d35174f1d9b5b0d4c3f897c35);
                Grid_d3bc240b65b443f68a6286448060565e.ColumnDefinitions.add(ColumnDefinition_195f7570bf2b44f796b9469dad6e5c3e);

                var RowDefinition_fe2646443e834c9bafdb6ea41a144aa2 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_fe2646443e834c9bafdb6ea41a144aa2.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var RowDefinition_97c9a258655c4de4a21bda1d1c1b5b23 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_97c9a258655c4de4a21bda1d1c1b5b23.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var RowDefinition_32921698526247c2b595b368c0f765e6 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_32921698526247c2b595b368c0f765e6.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var RowDefinition_d791dee5bef640568f043f18e57960ec = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_d791dee5bef640568f043f18e57960ec.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var RowDefinition_fc06744384424383887dc6e72b65146d = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_fc06744384424383887dc6e72b65146d.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var RowDefinition_df5d6512efbe41e1a96f305876547dfb = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_df5d6512efbe41e1a96f305876547dfb.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                var RowDefinition_294f32e43d3a4ae4a5464637e0958041 = new Bridge.global.Windows.UI.Xaml.Controls.RowDefinition();
                RowDefinition_294f32e43d3a4ae4a5464637e0958041.Height = new Bridge.global.Windows.UI.Xaml.GridLength.$ctor2(1.0, Bridge.global.Windows.UI.Xaml.GridUnitType.Auto);

                Grid_d3bc240b65b443f68a6286448060565e.RowDefinitions.add(RowDefinition_fe2646443e834c9bafdb6ea41a144aa2);
                Grid_d3bc240b65b443f68a6286448060565e.RowDefinitions.add(RowDefinition_97c9a258655c4de4a21bda1d1c1b5b23);
                Grid_d3bc240b65b443f68a6286448060565e.RowDefinitions.add(RowDefinition_32921698526247c2b595b368c0f765e6);
                Grid_d3bc240b65b443f68a6286448060565e.RowDefinitions.add(RowDefinition_d791dee5bef640568f043f18e57960ec);
                Grid_d3bc240b65b443f68a6286448060565e.RowDefinitions.add(RowDefinition_fc06744384424383887dc6e72b65146d);
                Grid_d3bc240b65b443f68a6286448060565e.RowDefinitions.add(RowDefinition_df5d6512efbe41e1a96f305876547dfb);
                Grid_d3bc240b65b443f68a6286448060565e.RowDefinitions.add(RowDefinition_294f32e43d3a4ae4a5464637e0958041);

                var TextBlock_099244606b8f4f1c9cdf5925a9c312df = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_099244606b8f4f1c9cdf5925a9c312df, 0);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_099244606b8f4f1c9cdf5925a9c312df, 0);
                TextBlock_099244606b8f4f1c9cdf5925a9c312df.Text = "Type:  ";
                TextBlock_099244606b8f4f1c9cdf5925a9c312df.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                var Binding_6812ed8c85a14fb78da3cc1cc7f15d18 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_6812ed8c85a14fb78da3cc1cc7f15d18.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.EditablePropertiesVisible");
                var StaticResourceExtension_72527df9349d4431b78754e9d9c7907f = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_72527df9349d4431b78754e9d9c7907f.ResourceKey = "BoolToVis";





                var StackPanel_e4f7d7e76159479fb4583c49de8f30a5 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(StackPanel_e4f7d7e76159479fb4583c49de8f30a5, 0);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StackPanel_e4f7d7e76159479fb4583c49de8f30a5, 1);
                StackPanel_e4f7d7e76159479fb4583c49de8f30a5.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                this.RegisterName$1("PremiseCheckbox", CheckBox_72a0778d64084fbb81da7ab3adfbf800);
                CheckBox_72a0778d64084fbb81da7ab3adfbf800.Name = "PremiseCheckbox";
                CheckBox_72a0778d64084fbb81da7ab3adfbf800.Content = "Premise";
                var Binding_a9a6d8fd539e43ac9a1206f7b95f0e41 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_a9a6d8fd539e43ac9a1206f7b95f0e41.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.IsPremise");



                this.RegisterName$1("ConclusionCheckbox", CheckBox_6eb74cb28b604242b17f8867e714c561);
                CheckBox_6eb74cb28b604242b17f8867e714c561.Name = "ConclusionCheckbox";
                CheckBox_6eb74cb28b604242b17f8867e714c561.Content = "Conclusion";
                CheckBox_6eb74cb28b604242b17f8867e714c561.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(16, 0, 0, 0);
                var Binding_e2436e79e81b4871a2b890156a0084bb = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_e2436e79e81b4871a2b890156a0084bb.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.IsConclusion");



                StackPanel_e4f7d7e76159479fb4583c49de8f30a5.Children.add(CheckBox_72a0778d64084fbb81da7ab3adfbf800);
                StackPanel_e4f7d7e76159479fb4583c49de8f30a5.Children.add(CheckBox_6eb74cb28b604242b17f8867e714c561);

                var Binding_0bf3e7e226fa47ff85756423eeb35e2f = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_0bf3e7e226fa47ff85756423eeb35e2f.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.EditablePropertiesVisible");
                var StaticResourceExtension_318f1c828d034684aa613d484f925d04 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_318f1c828d034684aa613d484f925d04.ResourceKey = "BoolToVis";





                var TextBlock_64fff52811b14b3987f835f193b9d198 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_64fff52811b14b3987f835f193b9d198, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_64fff52811b14b3987f835f193b9d198, 0);
                TextBlock_64fff52811b14b3987f835f193b9d198.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_64fff52811b14b3987f835f193b9d198.Text = "Assert that it is:        ";
                var Binding_21ba1c1c08b945228d9837c6df27c477 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_21ba1c1c08b945228d9837c6df27c477.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.EditablePropertiesVisible");
                var StaticResourceExtension_3762dcb407e6473ea77caefcc297d812 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_3762dcb407e6473ea77caefcc297d812.ResourceKey = "BoolToVis";





                var StackPanel_66e2d724b7a349f98da5d16ef6172f97 = new Bridge.global.Windows.UI.Xaml.Controls.StackPanel();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(StackPanel_66e2d724b7a349f98da5d16ef6172f97, 1);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(StackPanel_66e2d724b7a349f98da5d16ef6172f97, 1);
                StackPanel_66e2d724b7a349f98da5d16ef6172f97.Orientation = Bridge.global.Windows.UI.Xaml.Controls.Orientation.Horizontal;
                this.RegisterName$1("AssertThatItIsTrue", CheckBox_2e4b0710be3c4094aa8a528f9aec3f27);
                CheckBox_2e4b0710be3c4094aa8a528f9aec3f27.Name = "AssertThatItIsTrue";
                CheckBox_2e4b0710be3c4094aa8a528f9aec3f27.Content = "True";
                var Binding_4ea0d37ec17d4520bcb7451d41bf3f68 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_4ea0d37ec17d4520bcb7451d41bf3f68.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.AssertThatItIs");



                this.RegisterName$1("AssertThatItIsFalse", CheckBox_4fa90869dc4e421ea312b4f1b04c8b69);
                CheckBox_4fa90869dc4e421ea312b4f1b04c8b69.Name = "AssertThatItIsFalse";
                CheckBox_4fa90869dc4e421ea312b4f1b04c8b69.Content = "False";
                CheckBox_4fa90869dc4e421ea312b4f1b04c8b69.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(37, 0, 0, 0);
                var Binding_7954e57874a34012877c0ba1f12b792b = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_7954e57874a34012877c0ba1f12b792b.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.InverseOfAssertThatItIs");



                StackPanel_66e2d724b7a349f98da5d16ef6172f97.Children.add(CheckBox_2e4b0710be3c4094aa8a528f9aec3f27);
                StackPanel_66e2d724b7a349f98da5d16ef6172f97.Children.add(CheckBox_4fa90869dc4e421ea312b4f1b04c8b69);

                var Binding_a24a3acdd26f4c5687efac2334694d0a = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_a24a3acdd26f4c5687efac2334694d0a.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.EditablePropertiesVisible");
                var StaticResourceExtension_1e375d290b4a4e65a49d6dea3cf23808 = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_1e375d290b4a4e65a49d6dea3cf23808.ResourceKey = "BoolToVis";





                var TextBlock_2888f3c7df3f4d76ac83151002dcb83e = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_2888f3c7df3f4d76ac83151002dcb83e, 2);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_2888f3c7df3f4d76ac83151002dcb83e, 0);
                TextBlock_2888f3c7df3f4d76ac83151002dcb83e.Margin = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 4, 0);
                TextBlock_2888f3c7df3f4d76ac83151002dcb83e.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_2888f3c7df3f4d76ac83151002dcb83e.Text = "Quantifier:  ";

                this.RegisterName$1("PropertyGridQuantifierLabel", TextBlock_cc5287afd0954b0494a93d85fbe9bfcb);
                TextBlock_cc5287afd0954b0494a93d85fbe9bfcb.Name = "PropertyGridQuantifierLabel";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_cc5287afd0954b0494a93d85fbe9bfcb, 2);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_cc5287afd0954b0494a93d85fbe9bfcb, 1);
                TextBlock_cc5287afd0954b0494a93d85fbe9bfcb.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_cc5287afd0954b0494a93d85fbe9bfcb.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                var Binding_8b668fde329f4c11b1db9d5fc5cda074 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_8b668fde329f4c11b1db9d5fc5cda074.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.QuantifierText");



                var TextBlock_0e8b1e2f5a584446b8ee7bfea0ba0ec1 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_0e8b1e2f5a584446b8ee7bfea0ba0ec1, 3);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_0e8b1e2f5a584446b8ee7bfea0ba0ec1, 0);
                TextBlock_0e8b1e2f5a584446b8ee7bfea0ba0ec1.Text = "Subject:  ";

                this.RegisterName$1("PropertyGridSubjectLabel", TextBlock_c0e5eaf94f82453ea377273b97e19812);
                TextBlock_c0e5eaf94f82453ea377273b97e19812.Name = "PropertyGridSubjectLabel";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_c0e5eaf94f82453ea377273b97e19812, 3);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_c0e5eaf94f82453ea377273b97e19812, 1);
                TextBlock_c0e5eaf94f82453ea377273b97e19812.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_c0e5eaf94f82453ea377273b97e19812.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                var Binding_b4b91acb0e3e42d0b6ca0c8a154cd688 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_b4b91acb0e3e42d0b6ca0c8a154cd688.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.SubjectText");



                var TextBlock_8672f81076e540329746bff0e71f99ee = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_8672f81076e540329746bff0e71f99ee, 4);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_8672f81076e540329746bff0e71f99ee, 0);
                TextBlock_8672f81076e540329746bff0e71f99ee.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_8672f81076e540329746bff0e71f99ee.Text = "Copula:  ";

                this.RegisterName$1("PropertyGridCopulaLabel", TextBlock_461daa8a53b643b4986f8ee6d5c00bd5);
                TextBlock_461daa8a53b643b4986f8ee6d5c00bd5.Name = "PropertyGridCopulaLabel";
                TextBlock_461daa8a53b643b4986f8ee6d5c00bd5.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_461daa8a53b643b4986f8ee6d5c00bd5.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_461daa8a53b643b4986f8ee6d5c00bd5, 4);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_461daa8a53b643b4986f8ee6d5c00bd5, 1);
                var Binding_1b1823db2d734daa8a6e81c3f72b98fb = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_1b1823db2d734daa8a6e81c3f72b98fb.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.CopulaText");



                var TextBlock_241c560d92cc4d0299ff3d79fa1e050e = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_241c560d92cc4d0299ff3d79fa1e050e, 5);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_241c560d92cc4d0299ff3d79fa1e050e, 0);
                TextBlock_241c560d92cc4d0299ff3d79fa1e050e.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_241c560d92cc4d0299ff3d79fa1e050e.Text = "Predicate:  ";

                this.RegisterName$1("PropertyGridPredicateLabel", TextBlock_731dfab042754347bd7437c96a68bb5a);
                TextBlock_731dfab042754347bd7437c96a68bb5a.Name = "PropertyGridPredicateLabel";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_731dfab042754347bd7437c96a68bb5a, 5);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_731dfab042754347bd7437c96a68bb5a, 1);
                TextBlock_731dfab042754347bd7437c96a68bb5a.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_731dfab042754347bd7437c96a68bb5a.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                var Binding_4fff4c0476524311affee592686f369e = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_4fff4c0476524311affee592686f369e.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.PredicateText");



                var TextBlock_02c0d4dc156c496caa9fe153e9413c78 = new Bridge.global.Windows.UI.Xaml.Controls.TextBlock();
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_02c0d4dc156c496caa9fe153e9413c78, 6);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_02c0d4dc156c496caa9fe153e9413c78, 0);
                TextBlock_02c0d4dc156c496caa9fe153e9413c78.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                TextBlock_02c0d4dc156c496caa9fe153e9413c78.Text = "Category:  ";

                this.RegisterName$1("PropertyGridCategoricalPropositionStatus", TextBlock_855c58be84e04bb2b62b7d4d401cd0a2);
                TextBlock_855c58be84e04bb2b62b7d4d401cd0a2.Name = "PropertyGridCategoricalPropositionStatus";
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetRow(TextBlock_855c58be84e04bb2b62b7d4d401cd0a2, 6);
                Bridge.global.Windows.UI.Xaml.Controls.Grid.SetColumn(TextBlock_855c58be84e04bb2b62b7d4d401cd0a2, 1);
                TextBlock_855c58be84e04bb2b62b7d4d401cd0a2.TextWrapping = Bridge.global.Windows.UI.Xaml.TextWrapping.Wrap;
                TextBlock_855c58be84e04bb2b62b7d4d401cd0a2.Padding = new Bridge.global.Windows.UI.Xaml.Thickness.$ctor2(0, 0, 0, 3);
                var Binding_678ff5ac316f4970bcb0d8079d2a8f4e = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_678ff5ac316f4970bcb0d8079d2a8f4e.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.Category");



                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_099244606b8f4f1c9cdf5925a9c312df);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(StackPanel_e4f7d7e76159479fb4583c49de8f30a5);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_64fff52811b14b3987f835f193b9d198);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(StackPanel_66e2d724b7a349f98da5d16ef6172f97);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_2888f3c7df3f4d76ac83151002dcb83e);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_cc5287afd0954b0494a93d85fbe9bfcb);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_0e8b1e2f5a584446b8ee7bfea0ba0ec1);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_c0e5eaf94f82453ea377273b97e19812);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_8672f81076e540329746bff0e71f99ee);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_461daa8a53b643b4986f8ee6d5c00bd5);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_241c560d92cc4d0299ff3d79fa1e050e);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_731dfab042754347bd7437c96a68bb5a);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_02c0d4dc156c496caa9fe153e9413c78);
                Grid_d3bc240b65b443f68a6286448060565e.Children.add(TextBlock_855c58be84e04bb2b62b7d4d401cd0a2);

                var Binding_28045583dc40492a887186743c6f3383 = new Bridge.global.Windows.UI.Xaml.Data.Binding.ctor();
                Binding_28045583dc40492a887186743c6f3383.Path = new Bridge.global.Windows.UI.Xaml.PropertyPath.ctor("StepList.SelectedStep.PropositionInspector.PropositionProperties.AllPropertiesVisible");
                var StaticResourceExtension_cb19476175e94ec08ff70db35ed7cbad = new Bridge.global.System.Windows.Markup.StaticResourceExtension.ctor();
                StaticResourceExtension_cb19476175e94ec08ff70db35ed7cbad.ResourceKey = "BoolToVis";





                ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624.Content = Grid_d3bc240b65b443f68a6286448060565e;


                DockPanel_e7de7e7ce49e4755bc29b348eb56244d.Children.add(TextBlock_c6c6132898c4489fa5c3c9d425bf23cc);
                DockPanel_e7de7e7ce49e4755bc29b348eb56244d.Children.add(ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624);


                this.Content = DockPanel_e7de7e7ce49e4755bc29b348eb56244d;



                this.PropositionPropertiesTitleLabel = TextBlock_c6c6132898c4489fa5c3c9d425bf23cc;
                this.PremiseCheckbox = CheckBox_72a0778d64084fbb81da7ab3adfbf800;
                this.ConclusionCheckbox = CheckBox_6eb74cb28b604242b17f8867e714c561;
                this.AssertThatItIsTrue = CheckBox_2e4b0710be3c4094aa8a528f9aec3f27;
                this.AssertThatItIsFalse = CheckBox_4fa90869dc4e421ea312b4f1b04c8b69;
                this.PropertyGridQuantifierLabel = TextBlock_cc5287afd0954b0494a93d85fbe9bfcb;
                this.PropertyGridSubjectLabel = TextBlock_c0e5eaf94f82453ea377273b97e19812;
                this.PropertyGridCopulaLabel = TextBlock_461daa8a53b643b4986f8ee6d5c00bd5;
                this.PropertyGridPredicateLabel = TextBlock_731dfab042754347bd7437c96a68bb5a;
                this.PropertyGridCategoricalPropositionStatus = TextBlock_855c58be84e04bb2b62b7d4d401cd0a2;

                var parents_f167589628fe48a3b37618f9ba697a26 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_f167589628fe48a3b37618f9ba697a26.add(TextBlock_099244606b8f4f1c9cdf5925a9c312df);
                parents_f167589628fe48a3b37618f9ba697a26.add(Grid_d3bc240b65b443f68a6286448060565e);
                parents_f167589628fe48a3b37618f9ba697a26.add(ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624);
                parents_f167589628fe48a3b37618f9ba697a26.add(DockPanel_e7de7e7ce49e4755bc29b348eb56244d);
                parents_f167589628fe48a3b37618f9ba697a26.add(this);
                Binding_6812ed8c85a14fb78da3cc1cc7f15d18.Converter = Bridge.cast((StaticResourceExtension_72527df9349d4431b78754e9d9c7907f.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_6812ed8c85a14fb78da3cc1cc7f15d18, null, parents_f167589628fe48a3b37618f9ba697a26))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_099244606b8f4f1c9cdf5925a9c312df, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_6812ed8c85a14fb78da3cc1cc7f15d18);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(CheckBox_72a0778d64084fbb81da7ab3adfbf800, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, Binding_a9a6d8fd539e43ac9a1206f7b95f0e41);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(CheckBox_6eb74cb28b604242b17f8867e714c561, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, Binding_e2436e79e81b4871a2b890156a0084bb);
                var parents_c8645bd925c04622801dc9cff917a280 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_c8645bd925c04622801dc9cff917a280.add(StackPanel_e4f7d7e76159479fb4583c49de8f30a5);
                parents_c8645bd925c04622801dc9cff917a280.add(Grid_d3bc240b65b443f68a6286448060565e);
                parents_c8645bd925c04622801dc9cff917a280.add(ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624);
                parents_c8645bd925c04622801dc9cff917a280.add(DockPanel_e7de7e7ce49e4755bc29b348eb56244d);
                parents_c8645bd925c04622801dc9cff917a280.add(this);
                Binding_0bf3e7e226fa47ff85756423eeb35e2f.Converter = Bridge.cast((StaticResourceExtension_318f1c828d034684aa613d484f925d04.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_0bf3e7e226fa47ff85756423eeb35e2f, null, parents_c8645bd925c04622801dc9cff917a280))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(StackPanel_e4f7d7e76159479fb4583c49de8f30a5, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_0bf3e7e226fa47ff85756423eeb35e2f);
                var parents_5e94ff43838948c5ae0b99b23f45f5b4 = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_5e94ff43838948c5ae0b99b23f45f5b4.add(TextBlock_64fff52811b14b3987f835f193b9d198);
                parents_5e94ff43838948c5ae0b99b23f45f5b4.add(Grid_d3bc240b65b443f68a6286448060565e);
                parents_5e94ff43838948c5ae0b99b23f45f5b4.add(ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624);
                parents_5e94ff43838948c5ae0b99b23f45f5b4.add(DockPanel_e7de7e7ce49e4755bc29b348eb56244d);
                parents_5e94ff43838948c5ae0b99b23f45f5b4.add(this);
                Binding_21ba1c1c08b945228d9837c6df27c477.Converter = Bridge.cast((StaticResourceExtension_3762dcb407e6473ea77caefcc297d812.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_21ba1c1c08b945228d9837c6df27c477, null, parents_5e94ff43838948c5ae0b99b23f45f5b4))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_64fff52811b14b3987f835f193b9d198, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_21ba1c1c08b945228d9837c6df27c477);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(CheckBox_2e4b0710be3c4094aa8a528f9aec3f27, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, Binding_4ea0d37ec17d4520bcb7451d41bf3f68);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(CheckBox_4fa90869dc4e421ea312b4f1b04c8b69, Bridge.global.Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, Binding_7954e57874a34012877c0ba1f12b792b);
                var parents_e39bc616a4ca4b89b391e930ca46d86e = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_e39bc616a4ca4b89b391e930ca46d86e.add(StackPanel_66e2d724b7a349f98da5d16ef6172f97);
                parents_e39bc616a4ca4b89b391e930ca46d86e.add(Grid_d3bc240b65b443f68a6286448060565e);
                parents_e39bc616a4ca4b89b391e930ca46d86e.add(ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624);
                parents_e39bc616a4ca4b89b391e930ca46d86e.add(DockPanel_e7de7e7ce49e4755bc29b348eb56244d);
                parents_e39bc616a4ca4b89b391e930ca46d86e.add(this);
                Binding_a24a3acdd26f4c5687efac2334694d0a.Converter = Bridge.cast((StaticResourceExtension_1e375d290b4a4e65a49d6dea3cf23808.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_a24a3acdd26f4c5687efac2334694d0a, null, parents_e39bc616a4ca4b89b391e930ca46d86e))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(StackPanel_66e2d724b7a349f98da5d16ef6172f97, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_a24a3acdd26f4c5687efac2334694d0a);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_cc5287afd0954b0494a93d85fbe9bfcb, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_8b668fde329f4c11b1db9d5fc5cda074);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_c0e5eaf94f82453ea377273b97e19812, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_b4b91acb0e3e42d0b6ca0c8a154cd688);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_461daa8a53b643b4986f8ee6d5c00bd5, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_1b1823db2d734daa8a6e81c3f72b98fb);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_731dfab042754347bd7437c96a68bb5a, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_4fff4c0476524311affee592686f369e);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(TextBlock_855c58be84e04bb2b62b7d4d401cd0a2, Bridge.global.Windows.UI.Xaml.Controls.TextBlock.TextProperty, Binding_678ff5ac316f4970bcb0d8079d2a8f4e);
                var parents_8f5280b4a4054bb5a2c040c7e4289eae = new (Bridge.global.System.Collections.Generic.List$1(System.Object)).ctor();
                parents_8f5280b4a4054bb5a2c040c7e4289eae.add(Grid_d3bc240b65b443f68a6286448060565e);
                parents_8f5280b4a4054bb5a2c040c7e4289eae.add(ScrollViewer_3d923547b1f84e33b6ecad2be5d2c624);
                parents_8f5280b4a4054bb5a2c040c7e4289eae.add(DockPanel_e7de7e7ce49e4755bc29b348eb56244d);
                parents_8f5280b4a4054bb5a2c040c7e4289eae.add(this);
                Binding_28045583dc40492a887186743c6f3383.Converter = Bridge.cast((StaticResourceExtension_cb19476175e94ec08ff70db35ed7cbad.ProvideValue(new Bridge.global.System.ServiceProvider.$ctor1(Binding_28045583dc40492a887186743c6f3383, null, parents_8f5280b4a4054bb5a2c040c7e4289eae))), Windows.UI.Xaml.Data.IValueConverter);
                Bridge.global.Windows.UI.Xaml.Data.BindingOperations.SetBinding(Grid_d3bc240b65b443f68a6286448060565e, Bridge.global.Windows.UI.Xaml.UIElement.VisibilityProperty, Binding_28045583dc40492a887186743c6f3383);

            }
        }
    });

    Bridge.define("TutorialVm.Substitute.ISubstituter", {
        $kind: "interface"
    });

    Bridge.define("Term.Factory.ITermFactory", {
        $kind: "interface"
    });

    Bridge.define("Term.ITerm", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.Dictionaries.ITutorialDictionaryFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.Factory.ITutorialFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.Instances.TutorialInstanceFactory", {
        fields: {
            TutorialFactory: null,
            Tutorial: null,
            ResultsStepFactory: null,
            TutorialSteps: null,
            TutorialStats: null,
            ContentStepFactory: null
        },
        methods: {
            Create: function () {
                this.InitStepsAndStats();
                this.SetupFactories();
                this.AddSteps();
                this.CreateTutorial();
                this.AddResultsStep();
                return this.Tutorial;
            },
            InitStepsAndStats: function () {
                this.TutorialSteps = new (System.Collections.ObjectModel.Collection$1(Tutorial.TutorialStep.ITutorialStep)).ctor();
                this.TutorialStats = new Tutorial.Stats.TutorialStats(this.TutorialSteps);
            },
            SetupFactories: function () {
                this.AddCommonFactories();
                this.AddSpecificFactories();
            },
            AddCommonFactories: function () {
                this.TutorialFactory = new Tutorial.Factory.TutorialFactory();
                this.ResultsStepFactory = new Tutorial.TutorialStep.ResultsStep.ResultsStepFactory();
                this.ContentStepFactory = new Tutorial.TutorialStep.ContentStep.ContentStepFactory();
            },
            CreateTutorial: function () {
                this.Tutorial = this.TutorialFactory.Tutorial$Factory$ITutorialFactory$Create(this.GetTutorialName(), this.TutorialSteps, this.TutorialStats);
            },
            AddResultsStep: function () {
                var resultsStep = this.ResultsStepFactory.Create(this.Tutorial.Tutorial$ITutorial$Stats);
                this.Tutorial.Tutorial$ITutorial$Steps.add(resultsStep);
            }
        }
    });

    Bridge.define("Tutorial.ITutorial", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.Stats.ITutorialStats", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.Abilities.IAbilitiesFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.Ability", {
        $kind: "enum",
        statics: {
            fields: {
                Answerable: 0,
                DisplaysTutorialStats: 1,
                Completable: 2,
                ChecksAPropositionAnswer: 3,
                ChecksASyllogismAnswer: 4,
                ChecksAWordAnswer: 5
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.ActionName", {
        $kind: "enum",
        statics: {
            fields: {
                CheckThisAnswer: 0,
                UpdateAnalysisResults: 1
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.ContentStep.IOffTheShelfContentStepFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Category.ICategoryQuestionFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.StepFactory", {
        fields: {
            Step: null,
            AnswerCheckerAction: null,
            _abilitiesFactory: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();

            }
        },
        methods: {
            CreateStep: function () {
                this.CreateBasicTutorialStep();
                this.AddAbilities();
                this.AddInitialData();
                this.AddActions();
            },
            CreateBasicTutorialStep: function () {
                this.Step = new Tutorial.TutorialStep.TutorialStep(this.GetTitle(), this.GetPrompt());
            },
            AddAbilities: function () {
                this.Step.Tutorial$TutorialStep$ITutorialStep$Abilities.add(Tutorial.TutorialStep.Ability.Answerable);
                this.Step.Tutorial$TutorialStep$ITutorialStep$Abilities.add(Tutorial.TutorialStep.Ability.Completable);
                this.AddDifferentiatingAbility();
            },
            AddDifferentiatingAbility: function () {
                var differentiatingAbility = this.GetDifferentiatingAbility();
                this.Step.Tutorial$TutorialStep$ITutorialStep$Abilities.add(differentiatingAbility);
            },
            AddInitialData: function () {
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.IsCompleted, Bridge.box(false, System.Boolean, System.Boolean.toString));
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnalysisStatus, Bridge.box(LogicalAnalysisEngine.Status.LogicalAnalysisStatus.NotStarted, LogicalAnalysisEngine.Status.LogicalAnalysisStatus, System.Enum.toStringFn(LogicalAnalysisEngine.Status.LogicalAnalysisStatus)));
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnalysisFeedbackCollection, new (System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.AnalysisFeedback.IAnalysisFeedback)).ctor());
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnswerQuestionAttempts, Bridge.box(0, System.Int32));
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.TutorialStats, new Tutorial.Stats.TutorialStatsNullObject());
            },
            AddActions: function () {
                this.AddPostAnswerActions();
                this.CreateAnswerCheckerAction();
                this.AddAnswerChecker();
            },
            AddPostAnswerActions: function () {
                this.Step.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.add(Tutorial.TutorialStep.ActionName.UpdateAnalysisResults, new Tutorial.TutorialStep.StepAction.UpdateAnalysisResults(this.Step));
            },
            AddAnswerChecker: function () {
                this.Step.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.add(Tutorial.TutorialStep.ActionName.CheckThisAnswer, this.AnswerCheckerAction);
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.QuestionSteps.Proposition.CategoricalLogicSyntax.Parts.IPropositionPartQuestionFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.StepAction.ITutorialStepAction", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.ContentStep.IContentStepFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.Data", {
        $kind: "enum",
        statics: {
            fields: {
                IsCompleted: 0,
                AnalysisStatus: 1,
                AnalysisFeedbackCollection: 2,
                TutorialStats: 3,
                AnswerQuestionAttempts: 4
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.ITutorialStep", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.PropositionMatchStep.IPropositionMatchQuestionFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.StepNumberGenerator.IQuestionNumberGenerator", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Factories.ISyllogismAnswerCheckerActionFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.SyllogismSteps.IValidSyllogismQuestionFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood", {
        $kind: "enum",
        statics: {
            fields: {
                AAA: 0,
                AOO: 1,
                EAE: 2
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.ResultsStep.IResultsStepFactory", {
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.StepAction.AnalysisData", {
        fields: {
            LogicalAnalysisStatus: 0,
            AnalysisFeedbackCollection: null
        },
        ctors: {
            ctor: function (logicalAnalysisStatus, analysisFeedbackCollection) {
                this.$initialize();
                this.LogicalAnalysisStatus = logicalAnalysisStatus;
                this.AnalysisFeedbackCollection = analysisFeedbackCollection;
            }
        }
    });

    Bridge.define("TutorialPersistence.DataObject.ITutorialDataObject", {
        $kind: "interface"
    });

    Bridge.define("TutorialPersistence.Deserializer.Utilities.StringTranslator", {
        statics: {
            fields: {
                BoolDictionary: null
            },
            ctors: {
                init: function () {
                    this.BoolDictionary = function (_o1) {
                            _o1.add("True", true);
                            _o1.add("False", false);
                            _o1.add("true", true);
                            _o1.add("false", false);
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(System.String,System.Boolean)).ctor());
                }
            },
            methods: {
                GetBool: function (text) {
                    return TutorialPersistence.Deserializer.Utilities.StringTranslator.BoolDictionary.getItem(text);
                }
            }
        }
    });

    Bridge.define("TutorialVm.Data.TutorialViewModelData", {
        fields: {
            ProgressBar: null,
            PropositionInspector: null,
            SelectNextStep: null,
            SelectPreviousStep: null,
            StepList: null,
            HandleNewStepVMSelectedVisitor: null,
            Tutorial: null
        }
    });

    Bridge.define("TutorialVm.Factory.ITutorialViewModelFactory", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Factory.TutorialViewModelFactoryData", {
        fields: {
            AppearanceManagerWrapper: null,
            InitializeTutorialVMVisitor: null,
            Messenger: null,
            PersistTutorialVisitor: null,
            SetInitialFocusForCurrentStepVisitor: null,
            Tutorial: null,
            TutorialDataObject: null,
            TutorialViewModel: null,
            TutorialViewModelData: null,
            UpdateAllPropertiesOfTutorialAndSelectedStepVisitor: null,
            VMsteps: null
        }
    });

    Bridge.define("TutorialVm.Factory.TutorialViewModelPersistenceData", {
        fields: {
            LoadDeserializedDataIntoSteps: null,
            PersistTutorialVisitor: null,
            TutorialDeserializer: null,
            FileReader: null
        }
    });

    Bridge.define("TutorialVm.Visitors.ITutorialViewModelVisitable", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.ProgressBar.IProgressBarViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.PropositionInspector.IPropositionInspectorVisibilityViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.SelectNextStep.ISelectNextStepViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.SelectPreviousStep.ISelectPreviousStepViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.StepList.Visitors.INewStepSelectionVisitable", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.StepList.Visitors.INewStepSelectionVisitor", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Abilities.IAbilitiesViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Abilities.AbilitiesVMData", {
        fields: {
            ChecksAPropositionAnswer: false,
            ChecksASyllogismAnswer: false,
            IsAnswerable: false,
            IsCompletable: false
        }
    });

    Bridge.define("TutorialVm.TutorialStep.CheckAnswer.ICheckAnswerViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.CheckAnswer.CheckAnswerViewModelData", {
        fields: {
            TutorialStep: null,
            Enabled: false,
            Visible: false,
            CommandsCanExecute: false,
            UpdateToPostAnswerStateVisitor: null,
            UpdateAllPropertiesOfMeAndMyParentVisitor: null,
            UpdateFocusToPostAnswerStateVisitor: null,
            PersistTutorialVisitor: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.ICreatePropositionViewModelStrategy", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Data.StepVMData", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new TutorialVm.TutorialStep.Data.StepVMData(); }
            }
        },
        fields: {
            TutorialStep: null,
            CreatePropositionViewModelStrategy: null,
            PlaceholderParentTutorial: null,
            Abilities: null,
            Stats: null,
            MainFeedback: null,
            RetryAnswer: null,
            AnswerCheck: null,
            StudentAnswer: null,
            StudentAnswer2: null,
            StudentAnswer3: null,
            FeedbackDetail: null,
            PropositionInspector: null,
            ListItem: null,
            MainContent: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3517588253, this.TutorialStep, this.CreatePropositionViewModelStrategy, this.PlaceholderParentTutorial, this.Abilities, this.Stats, this.MainFeedback, this.RetryAnswer, this.AnswerCheck, this.StudentAnswer, this.StudentAnswer2, this.StudentAnswer3, this.FeedbackDetail, this.PropositionInspector, this.ListItem, this.MainContent]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, TutorialVm.TutorialStep.Data.StepVMData)) {
                    return false;
                }
                return Bridge.equals(this.TutorialStep, o.TutorialStep) && Bridge.equals(this.CreatePropositionViewModelStrategy, o.CreatePropositionViewModelStrategy) && Bridge.equals(this.PlaceholderParentTutorial, o.PlaceholderParentTutorial) && Bridge.equals(this.Abilities, o.Abilities) && Bridge.equals(this.Stats, o.Stats) && Bridge.equals(this.MainFeedback, o.MainFeedback) && Bridge.equals(this.RetryAnswer, o.RetryAnswer) && Bridge.equals(this.AnswerCheck, o.AnswerCheck) && Bridge.equals(this.StudentAnswer, o.StudentAnswer) && Bridge.equals(this.StudentAnswer2, o.StudentAnswer2) && Bridge.equals(this.StudentAnswer3, o.StudentAnswer3) && Bridge.equals(this.FeedbackDetail, o.FeedbackDetail) && Bridge.equals(this.PropositionInspector, o.PropositionInspector) && Bridge.equals(this.ListItem, o.ListItem) && Bridge.equals(this.MainContent, o.MainContent);
            },
            $clone: function (to) {
                var s = to || new TutorialVm.TutorialStep.Data.StepVMData();
                s.TutorialStep = this.TutorialStep;
                s.CreatePropositionViewModelStrategy = this.CreatePropositionViewModelStrategy;
                s.PlaceholderParentTutorial = this.PlaceholderParentTutorial;
                s.Abilities = this.Abilities;
                s.Stats = this.Stats;
                s.MainFeedback = this.MainFeedback;
                s.RetryAnswer = this.RetryAnswer;
                s.AnswerCheck = this.AnswerCheck;
                s.StudentAnswer = this.StudentAnswer;
                s.StudentAnswer2 = this.StudentAnswer2;
                s.StudentAnswer3 = this.StudentAnswer3;
                s.FeedbackDetail = this.FeedbackDetail;
                s.PropositionInspector = this.PropositionInspector;
                s.ListItem = this.ListItem;
                s.MainContent = this.MainContent;
                return s;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.ITutorialStepViewModelFactory", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.TutorialStepViewModelFactoryData", {
        fields: {
            TutorialStep: null,
            QuestionNumber: null,
            StepVMData: null,
            AbilitiesVMData: null,
            RetryAnswerVMData: null,
            CheckAnswerVMData: null,
            StatsVMData: null,
            StudentAnswerVMData: null,
            StudentAnswerVMData2: null,
            StudentAnswerVMData3: null,
            MainFeedbackVMData: null,
            FeedbackDetailVMData: null,
            PropositionInspectorVMData: null,
            MainContentVMData: null,
            InitializeVisitor: null,
            PersistTutorialVisitor: null,
            ListItemVMData: null,
            StepAbilities: null,
            AppearanceManagerWrapper: null,
            Messenger: null
        },
        ctors: {
            init: function () {
                this.StepVMData = new TutorialVm.TutorialStep.Data.StepVMData();
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.FeedbackDetail.IFeedbackDetailViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.FeedbackDetail.FeedbackDetailViewModelData", {
        fields: {
            GraphicFeedbackGridFactory: null,
            TutorialStep: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.IChainToGetCompleteGraphicFeedbackItemData", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.IGraphicFeedbackGridFactory", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.IGraphicAnalysisFeedbackItem", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.GraphicAnalysisFeedbackItemData", {
        fields: {
            FeedbackTypeText: null,
            DescriptionText: null,
            FeedbackTypeTextVisible: false,
            SuccessIconVisible: false,
            ErrorIconVisible: false,
            AppearanceManagerWrapper: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.ITutorialStepViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.ListItem.IListItemViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.ListItem.ListItemViewModelData", {
        fields: {
            AppearanceManagerWrapper: null,
            IsStepAnswerable: false,
            InformationIconVisible: false,
            NotAnsweredIconVisible: false,
            ResultsIconVisible: false,
            Number: null,
            TutorialStep: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.MainContent.IMainContentViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.MainContent.MainContentViewModelData", {
        fields: {
            ShowExtraMarginOnTheRight: false,
            Number: null,
            IsStepAnswerable: false,
            TutorialStep: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.MainFeedback.IMainFeedbackViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.MainFeedback.MainFeedbackViewModelData", {
        fields: {
            AppearanceManagerWrapper: null,
            NotAnsweredIconVisible: false,
            TutorialStep: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.PropositionInspector.IPropositionInspectorViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.PropositionInspector.PropositionInspectorViewModelData", {
        fields: {
            CreatePropositionViewModelNullObject: null,
            EulerCircles: null,
            PropositionProperties: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.RetryAnswer.IRetryAnswerViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.RetryAnswer.RetryAnswerViewModelData", {
        fields: {
            CommandsCanExecute: false,
            UpdateAllPropertiesOfMeAndMyParentVisitor: null,
            UpdateFocusToAnswerSubmissionStateVisitor: null,
            UpdateToAnswerSubmissionStateVisitor: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Stats.ITutorialStepStatsViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Stats.StatsVMData", {
        fields: {
            TutorialStatsVisible: false,
            RawTutorialStats: null,
            AppearanceManagerWrapper: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.IGetStylizedStudentAnswerStrategy", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.StudentAnswer.IStudentAnswerViewModel", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModelData", {
        fields: {
            GetStylizedStrategy: null,
            IsStepAnswerable: false,
            RawVisible: false,
            CreatePropositionViewModelStrategy: null
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitable", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitor", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Visitors.ITutorialViewModelVisitor", {
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Visitors.PersistTutorial.DataObjectFactory.TutorialDataObjectFactory", {
        methods: {
            AddSelectedStep: function (tutorialViewModel, tutorialDataObject) {
                tutorialDataObject.TutorialPersistence$DataObject$ITutorialDataObject$SelectedStep = tutorialViewModel.TutorialVm$ITutorialViewModel$CurrentlySelectedStepIndex();
                return tutorialDataObject;
            },
            AddTutorialStats: function (tutorialViewModel, tutorialDataObject) {
                var resultsStep = System.Linq.Enumerable.from(tutorialViewModel.TutorialVm$ITutorialViewModel$GetTutorialStepViewModels()).last();
                var rawResultsStep = resultsStep.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawTutorialStep();
                var rawTutorialStats = Bridge.cast(rawResultsStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.TutorialStats), Tutorial.Stats.ITutorialStats);
                tutorialDataObject.TutorialPersistence$DataObject$ITutorialDataObject$OverallAnswerQuestionAttempts = rawTutorialStats.Tutorial$Stats$ITutorialStats$AnswerQuestionAttempts;
                tutorialDataObject.TutorialPersistence$DataObject$ITutorialDataObject$OverallQuestionsAnsweredCorrectly = rawTutorialStats.Tutorial$Stats$ITutorialStats$QuestionsAnsweredCorrectly;
                tutorialDataObject.TutorialPersistence$DataObject$ITutorialDataObject$OverallQuestionsAnsweredIncorrectly = rawTutorialStats.Tutorial$Stats$ITutorialStats$QuestionsAnsweredIncorrectly;
                tutorialDataObject.TutorialPersistence$DataObject$ITutorialDataObject$TotalQuestions = rawTutorialStats.Tutorial$Stats$ITutorialStats$TotalQuestions;
                return tutorialDataObject;
            }
        }
    });

    Bridge.define("Argument.IArgument", {
        inherits: [Analyzable.IAnalyzableEntity],
        $kind: "interface"
    });

    Bridge.define("Argument.Factory.ArgumentFactory", {
        inherits: [Argument.Factory.IArgumentFactory],
        fields: {
            _propositionFactory: null
        },
        alias: [
            "Create", "Argument$Factory$IArgumentFactory$Create",
            "Create$1", "Argument$Factory$IArgumentFactory$Create$1",
            "CreateDefaultArgument1", "Argument$Factory$IArgumentFactory$CreateDefaultArgument1",
            "CreateDefaultArgument2", "Argument$Factory$IArgumentFactory$CreateDefaultArgument2"
        ],
        ctors: {
            ctor: function (propositionFactory) {
                this.$initialize();
                this._propositionFactory = propositionFactory;
            }
        },
        methods: {
            Create: function (name) {
                return new Argument.Argument(name);
            },
            Create$1: function (argumnetsName, argumentsPropositions) {
                var $t;
                var argument = this.Create(argumnetsName);
                $t = Bridge.getEnumerator(argumentsPropositions);
                try {
                    while ($t.moveNext()) {
                        var proposition = $t.Current;
                        argument.Argument$IArgument$Propositions.add(proposition);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return argument;
            },
            CreateDefaultArgument1: function () {
                var argument = this.Create("Humanity");
                argument.Argument$IArgument$Propositions.add(this._propositionFactory.Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition1());
                argument.Argument$IArgument$Propositions.add(this._propositionFactory.Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition2());
                argument.Argument$IArgument$Propositions.add(this._propositionFactory.Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition3());
                argument.Argument$IArgument$Propositions.add(this._propositionFactory.Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition4());
                return argument;
            },
            CreateDefaultArgument2: function () {
                var argument = this.Create("Gospel");
                argument.Argument$IArgument$Propositions.add(this._propositionFactory.Proposition$Factory$IPropositionFactory$CreateDefaultGospelProposition1());
                argument.Argument$IArgument$Propositions.add(this._propositionFactory.Proposition$Factory$IPropositionFactory$CreateDefaultGospelProposition2());
                argument.Argument$IArgument$Propositions.add(this._propositionFactory.Proposition$Factory$IPropositionFactory$CreateDefaultGospelProposition3());
                return argument;
            }
        }
    });

    Bridge.define("EulerCirclesVm.EulerCirclesViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,EulerCirclesVm.IEulerCirclesViewModel],
        fields: {
            _subjectText: null,
            _predicateText: null,
            _eulerCircleOIsVisible: false,
            _eulerCircleAIsVisible: false,
            _eulerCircleEIsVisible: false,
            _eulerCircleIIsVisible: false,
            _appearanceManagerWrapper: null
        },
        props: {
            SubjectText: {
                get: function () {
                    return this._subjectText;
                },
                set: function (value) {
                    this._subjectText = value;
                    this.OnPropertyChanged("SubjectText");
                }
            },
            PredicateText: {
                get: function () {
                    return this._predicateText;
                },
                set: function (value) {
                    this._predicateText = value;
                    this.OnPropertyChanged("PredicateText");
                }
            },
            AIsVisible: {
                get: function () {
                    return this._eulerCircleAIsVisible;
                },
                set: function (value) {
                    this._eulerCircleAIsVisible = value;
                    this.OnPropertyChanged("AIsVisible");
                }
            },
            EIsVisible: {
                get: function () {
                    return this._eulerCircleEIsVisible;
                },
                set: function (value) {
                    this._eulerCircleEIsVisible = value;
                    this.OnPropertyChanged("EIsVisible");
                }
            },
            IIsVisible: {
                get: function () {
                    return this._eulerCircleIIsVisible;
                },
                set: function (value) {
                    this._eulerCircleIIsVisible = value;
                    this.OnPropertyChanged("IIsVisible");
                }
            },
            OIsVisible: {
                get: function () {
                    return this._eulerCircleOIsVisible;
                },
                set: function (value) {
                    this._eulerCircleOIsVisible = value;
                    this.OnPropertyChanged("OIsVisible");
                }
            },
            CircleColor: {
                get: function () {
                    return this._appearanceManagerWrapper.AppearanceManager$IAppearanceManagerWrapper$GetCurrentAccentColor();
                }
            }
        },
        alias: [
            "SubjectText", "EulerCirclesVm$IEulerCirclesViewModel$SubjectText",
            "PredicateText", "EulerCirclesVm$IEulerCirclesViewModel$PredicateText",
            "AIsVisible", "EulerCirclesVm$IEulerCirclesViewModel$AIsVisible",
            "EIsVisible", "EulerCirclesVm$IEulerCirclesViewModel$EIsVisible",
            "IIsVisible", "EulerCirclesVm$IEulerCirclesViewModel$IIsVisible",
            "OIsVisible", "EulerCirclesVm$IEulerCirclesViewModel$OIsVisible",
            "CircleColor", "EulerCirclesVm$IEulerCirclesViewModel$CircleColor",
            "UpdateCircles", "EulerCirclesVm$IEulerCirclesViewModel$UpdateCircles",
            "MakeAllCirclesInvisible", "EulerCirclesVm$IEulerCirclesViewModel$MakeAllCirclesInvisible"
        ],
        ctors: {
            ctor: function (appearanceManagerWrapper, messenger) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._appearanceManagerWrapper = appearanceManagerWrapper;
                this._subjectText = "[color=Red]Not Found[/color]";
                this._predicateText = "[color=Red]Not Found[/color]";

                messenger.Messaging$IMessenger$Register(this, Bridge.box(Messaging.MessengerToken.AccentColorChanged, Messaging.MessengerToken, System.Enum.toStringFn(Messaging.MessengerToken)), Bridge.fn.bind(this, function (messengerToken) {
                    this.UpdateCircleColor();
                }));
            }
        },
        methods: {
            UpdateCircleColor: function () {
                this.OnPropertyChanged("CircleColor");
            },
            UpdateCircles: function (category, subjectText, predicateText) {
                this.SubjectText = subjectText;
                this.PredicateText = predicateText;
                this.ShowAppropriateCircle(category);
            },
            ShowAppropriateCircle: function (category) {
                switch (category) {
                    case Proposition.Parts.PropositionCategory.A: 
                        this.AIsVisible = true;
                        this.EIsVisible = false;
                        this.IIsVisible = false;
                        this.OIsVisible = false;
                        break;
                    case Proposition.Parts.PropositionCategory.E: 
                        this.AIsVisible = false;
                        this.EIsVisible = true;
                        this.IIsVisible = false;
                        this.OIsVisible = false;
                        break;
                    case Proposition.Parts.PropositionCategory.I: 
                        this.AIsVisible = false;
                        this.EIsVisible = false;
                        this.IIsVisible = true;
                        this.OIsVisible = false;
                        break;
                    case Proposition.Parts.PropositionCategory.O: 
                        this.AIsVisible = false;
                        this.EIsVisible = false;
                        this.IIsVisible = false;
                        this.OIsVisible = true;
                        break;
                    default: 
                        this.MakeAllCirclesInvisible();
                        break;
                }

                this.OnPropertyChanged("AIsVisible");
                this.OnPropertyChanged("EIsVisible");
                this.OnPropertyChanged("IIsVisible");
                this.OnPropertyChanged("OIsVisible");
            },
            MakeAllCirclesInvisible: function (notifyPropertyChanges) {
                if (notifyPropertyChanges === void 0) { notifyPropertyChanges = true; }
                this.AIsVisible = false;
                this.EIsVisible = false;
                this.IIsVisible = false;
                this.OIsVisible = false;
                if (notifyPropertyChanges) {
                    this.OnPropertyChanged("AIsVisible");
                    this.OnPropertyChanged("EIsVisible");
                    this.OnPropertyChanged("IIsVisible");
                    this.OnPropertyChanged("OIsVisible");
                }
            }
        }
    });

    Bridge.define("EulerCirclesVm.Factory.EulerCirclesViewModelFactory", {
        inherits: [EulerCirclesVm.Factory.IEulerCirclesViewModelFactory],
        fields: {
            _appearanceManagerWrapper: null,
            _messenger: null
        },
        alias: ["Create", "EulerCirclesVm$Factory$IEulerCirclesViewModelFactory$Create"],
        ctors: {
            ctor: function (appearanceManagerWrapper, messenger) {
                this.$initialize();
                this._appearanceManagerWrapper = appearanceManagerWrapper;
                this._messenger = messenger;
            }
        },
        methods: {
            Create: function () {
                return new EulerCirclesVm.EulerCirclesViewModel(this._appearanceManagerWrapper, this._messenger);
            }
        }
    });

    Bridge.define("FilePersistence.File.FileReader.FileReaderMock", {
        inherits: [FilePersistence.File.FileReader.IFileReader],
        fields: {
            _doesFileExist: false,
            _fileContents: null
        },
        alias: [
            "Exists", "FilePersistence$File$FileReader$IFileReader$Exists",
            "Read", "FilePersistence$File$FileReader$IFileReader$Read"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._doesFileExist = true;
                this._fileContents = "";
            }
        },
        methods: {
            SetIfFileExists: function (doesFileExist) {
                this._doesFileExist = doesFileExist;
            },
            SetReadFileContents: function (fileContents) {
                this._fileContents = fileContents;
            },
            Exists: function (filePath) {
                return this._doesFileExist;
            },
            Read: function (filePath) {
                return this._fileContents;
            }
        }
    });

    Bridge.define("FilePersistence.File.FileReader.FileReaderNullObject", {
        inherits: [FilePersistence.File.FileReader.IFileReader],
        alias: [
            "Exists", "FilePersistence$File$FileReader$IFileReader$Exists",
            "Read", "FilePersistence$File$FileReader$IFileReader$Read"
        ],
        methods: {
            Exists: function (filePath) {
                return false;
            },
            Read: function (filePath) {
                return "";
            }
        }
    });

    Bridge.define("Items.Item", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,Items.IItem],
        fields: {
            _backtoReadOnlyModeCommand: null,
            _setToEditModeCommand: null,
            _isInReadOnlyMode: false,
            _isInEditMode: false,
            _isTextBoxFocused: false,
            AppearanceManagerWrapper: null,
            CommandsCanExecute: false
        },
        props: {
            IsInReadOnlyMode: {
                get: function () {
                    return this._isInReadOnlyMode;
                },
                set: function (value) {
                    this._isInReadOnlyMode = value;
                    this.OnPropertyChanged("IsInReadOnlyMode");
                }
            },
            IsInEditMode: {
                get: function () {
                    return this._isInEditMode;
                },
                set: function (value) {
                    this._isInEditMode = value;
                    this.OnPropertyChanged("IsInEditMode");
                }
            },
            IsTextBoxFocused: {
                get: function () {
                    return this._isTextBoxFocused;
                },
                set: function (value) {
                    this._isTextBoxFocused = value;
                    this.OnPropertyChanged("IsTextBoxFocused");
                }
            },
            BacktoReadOnlyModeCommand: {
                get: function () {
                    return this._backtoReadOnlyModeCommand || ((this._backtoReadOnlyModeCommand = new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.BacktoReadOnlyMode), this.CommandsCanExecute)));
                }
            },
            SetToEditModeCommand: {
                get: function () {
                    return this._setToEditModeCommand || ((this._setToEditModeCommand = new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.SetToEditMode), this.CommandsCanExecute)));
                },
                set: function (value) {
                    this._setToEditModeCommand = value;
                }
            }
        },
        alias: [
            "IsInReadOnlyMode", "Items$IItem$IsInReadOnlyMode",
            "IsInEditMode", "Items$IItem$IsInEditMode",
            "IsTextBoxFocused", "Items$IItem$IsTextBoxFocused",
            "BacktoReadOnlyModeCommand", "Items$IItem$BacktoReadOnlyModeCommand",
            "SetToEditModeCommand", "Items$IItem$SetToEditModeCommand",
            "ChangeAccessModeTo", "Items$IItem$ChangeAccessModeTo"
        ],
        ctors: {
            init: function () {
                this.CommandsCanExecute = true;
            },
            ctor: function (appearanceManagerWrapper) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this.AppearanceManagerWrapper = appearanceManagerWrapper;
                this._isInReadOnlyMode = true;
                this._isInEditMode = false;
                this._isTextBoxFocused = false;
            }
        },
        methods: {
            ChangeAccessModeTo: function (itemAccessMode) {
                switch (itemAccessMode) {
                    case Items.AccessMode.ItemAccessMode.ReadOnly: 
                        this.IsInReadOnlyMode = true;
                        this.IsInEditMode = false;
                        break;
                    case Items.AccessMode.ItemAccessMode.Edit: 
                        this.IsInReadOnlyMode = false;
                        this.IsInEditMode = true;
                        break;
                    default: 
                        throw new System.ArgumentException.$ctor1(System.Enum.toString(Items.AccessMode.ItemAccessMode, itemAccessMode) + " is an unhandled propositionAccessMode");
                }
            }
        }
    });

    Bridge.define("Items.TreeView.ITreeViewItem", {
        inherits: [Items.IItem],
        $kind: "interface"
    });

    Bridge.define("LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback", {
        inherits: [LogicalAnalysisEngine.AnalysisFeedback.IAnalysisFeedback],
        fields: {
            AnalysisFeedbackType: 0,
            Description: null
        },
        alias: [
            "AnalysisFeedbackType", "LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$AnalysisFeedbackType",
            "Description", "LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$Description"
        ],
        ctors: {
            ctor: function (analysisFeedbackType, description) {
                this.$initialize();
                this.AnalysisFeedbackType = analysisFeedbackType;
                this.Description = description;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Common.FeedbackAppender", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Common.IFeedbackAppender],
        fields: {
            _logicalAnalysisEngine: null
        },
        alias: [
            "AddSuccess", "LogicalAnalysisEngine$ArgumentAnalysis$Common$IFeedbackAppender$AddSuccess",
            "AddFailure", "LogicalAnalysisEngine$ArgumentAnalysis$Common$IFeedbackAppender$AddFailure"
        ],
        ctors: {
            ctor: function (logicalAnalysisEngine) {
                this.$initialize();
                this._logicalAnalysisEngine = logicalAnalysisEngine;
            }
        },
        methods: {
            AddSuccess: function (feedbackDescription) {
                var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback);
            },
            AddFailure: function (feedbackDescription) {
                this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription);
                this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _argument: null,
            _proposition: null,
            _logicalAnalysisEngine: null,
            _entityToAnalyze: 0
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (argument, logicalAnalysisEngine) {
                this.$initialize();
                this._argument = argument;
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._entityToAnalyze = LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.EntityToAnalyze.Argument;
            },
            $ctor1: function (proposition, logicalAnalysisEngine) {
                this.$initialize();
                this._proposition = proposition;
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._entityToAnalyze = LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.EntityToAnalyze.Proposition;
            }
        },
        methods: {
            Execute: function () {
                if (this._entityToAnalyze === LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.EntityToAnalyze.Argument) {
                    this.CreateFeedbackAndAddToCollection(this._argument, this._logicalAnalysisEngine);
                }

                if (this._entityToAnalyze === LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.EntityToAnalyze.Proposition) {
                    this.CreateFeedbackAndAddToCollection$1(this._proposition, this._logicalAnalysisEngine);
                }
            },
            CreateFeedbackAndAddToCollection: function (argument, logicalAnalysisEngine) {
                var $t;
                $t = Bridge.getEnumerator(argument.Argument$IArgument$Propositions);
                try {
                    while ($t.moveNext()) {
                        var proposition = $t.Current;
                        this.CreateFeedbackAndAddToCollection$1(proposition, logicalAnalysisEngine);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            CreateFeedbackAndAddToCollection$1: function (proposition, logicalAnalysisEngine) {
                if (!proposition.Proposition$IProposition$IsSyntaxValid) {
                    logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;

                    var feedbackDescription = this.GetFeedbackDescription(proposition);
                    var newIssue = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription);
                    logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newIssue);
                }
            },
            GetFeedbackDescription: function (proposition) {
                if (this._entityToAnalyze === LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.EntityToAnalyze.Argument) {
                    return "Proposition '" + (proposition.Proposition$IProposition$RawSentence || "") + "' has an invalid syntax";
                } else {
                    return "Invalid syntax";
                }
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.SetFinalAnalysisStateStep", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null
        },
        ctors: {
            ctor: function (logicalAnalysisEngine) {
                this.$initialize();
                this._logicalAnalysisEngine = logicalAnalysisEngine;
            }
        },
        methods: {
            LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute: function () {
                if (this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus !== LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail) {
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass;
                }
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.TermsAnalysisStep", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _termFactory: null,
            TermAnalysisStepDecoraterCollection: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (logicalAnalysisEngine, termFactory) {
                this.$initialize();
                this.TermAnalysisStepDecoraterCollection = new (System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.TermAnalysisSteps.TermAnalysisStep)).ctor();
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._termFactory = termFactory;
            }
        },
        methods: {
            Execute: function () {
                var argument = Bridge.cast(this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalyzableEntity, Argument.IArgument);
                this._termFactory.Term$Factory$ITermFactory$CreateUnanalyzedTermsAndAddToTermsCollection(argument, this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$TermsCollection, this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$GetInitialTermEquivalenceMapping());

                this.AnalyzeTerms(argument, this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$TermsCollection);
                this.AnalyzeTerms(argument, this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$TermsCollection);
            },
            AnalyzeTerms: function (argument, termCollection) {
                var $t;
                $t = Bridge.getEnumerator(termCollection);
                try {
                    while ($t.moveNext()) {
                        var termUnderAnalysis = $t.Current;
                        this.PerformAnalysisBasedOnPropositionClaims(argument, termCollection, termUnderAnalysis);
                        this.PerformAnalysisBasedOnResultingPropertyImplications(termUnderAnalysis);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            PerformAnalysisBasedOnPropositionClaims: function (argument, termCollection, termUnderAnalysis) {
                var $t;
                $t = Bridge.getEnumerator(argument.Argument$IArgument$Propositions);
                try {
                    while ($t.moveNext()) {
                        var proposition = $t.Current;
                        if (proposition.Proposition$IProposition$IsPremise) {
                            this.AnalyzeTermInLightOfPropositionsSubjectTerm(termCollection, termUnderAnalysis, proposition);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            AnalyzeTermInLightOfPropositionsSubjectTerm: function (termCollection, termUnderAnalysis, proposition) {
                var $t;
                if (Bridge.referenceEquals(proposition.Proposition$IProposition$GetCleanedTermNameFromSubjectText(), termUnderAnalysis.Term$ITerm$Name)) {
                    var subjectTerm = termUnderAnalysis;
                    var predicateTerm = System.Linq.Enumerable.from(termCollection).first(function (x) {
                            return Bridge.referenceEquals(x.Term$ITerm$Name, proposition.Proposition$IProposition$GetCleanedTermNameFromPredicateText());
                        });

                    $t = Bridge.getEnumerator(this.TermAnalysisStepDecoraterCollection);
                    try {
                        while ($t.moveNext()) {
                            var termAnalysisStep = $t.Current;
                            termAnalysisStep.Execute(proposition, subjectTerm, predicateTerm);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            PerformAnalysisBasedOnResultingPropertyImplications: function (termUnderAnalysis) {
                var $t;
                $t = Bridge.getEnumerator(this.TermAnalysisStepDecoraterCollection);
                try {
                    while ($t.moveNext()) {
                        var termAnalysisStep = $t.Current;
                        termAnalysisStep.Execute$1(termUnderAnalysis);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.ValidSyllogismLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.IValidSyllogismLogicalAnalysisEngineFactory],
        fields: {
            LogicalAnalysisEngine: null,
            FeedbackAppender: null,
            ArgumentAnswer: null,
            _validSyllogismAnalysisStep: null,
            _setFinalAnalysisStateStep: null,
            _syntaxAnalysisStep: null
        },
        alias: ["Create", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$IValidSyllogismLogicalAnalysisEngineFactory$Create"],
        methods: {
            Create: function (argumentAnswer) {
                this.ArgumentAnswer = argumentAnswer;

                this.CreateLogicalAnalysisEngine();
                this.CreateFeedbackAppender();
                this.CreateBaseAnalysisSteps();
                this.AddBaseAnalysisStepsToLogicEngine();
                this.CreateChildAnalysisSteps();
                this.AddChildAnalysisStepsToLogicEngine();

                return this.LogicalAnalysisEngine;
            },
            CreateLogicalAnalysisEngine: function () {
                this.LogicalAnalysisEngine = new LogicalAnalysisEngine.LogicalAnalysisEngine.$ctor1(this.ArgumentAnswer, new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor());
            },
            CreateFeedbackAppender: function () {
                this.FeedbackAppender = new LogicalAnalysisEngine.ArgumentAnalysis.Common.FeedbackAppender(this.LogicalAnalysisEngine);
            },
            CreateBaseAnalysisSteps: function () {
                this.CreateSyntaxAnalysisStep();
                this.CreateValidSyllogismAnalysisStep();
                this.CreateSetFinalAnalysisStateStep();
            },
            CreateSyntaxAnalysisStep: function () {
                this._syntaxAnalysisStep = new LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.ctor(this.ArgumentAnswer, this.LogicalAnalysisEngine);
            },
            CreateValidSyllogismAnalysisStep: function () {
                var validSyllogismStepFactory = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Factory.ValidSyllogismStepFactory(this.ArgumentAnswer, this.LogicalAnalysisEngine, this.FeedbackAppender);
                this._validSyllogismAnalysisStep = validSyllogismStepFactory.Create();
            },
            CreateSetFinalAnalysisStateStep: function () {
                this._setFinalAnalysisStateStep = new LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.SetFinalAnalysisStateStep(this.LogicalAnalysisEngine);
            },
            AddBaseAnalysisStepsToLogicEngine: function () {
                this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStepChecoraterCollection.add(this._syntaxAnalysisStep);
                this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStepChecoraterCollection.add(this._validSyllogismAnalysisStep);
                this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStepChecoraterCollection.add(this._setFinalAnalysisStateStep);
            },
            CreateChildAnalysisSteps: function () { },
            AddChildAnalysisStepsToLogicEngine: function () { }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.IsAMoodStep", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            ArgumentAnswer: null,
            FeedbackAppender: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (argumentAnswer, feedbackAppender) {
                this.$initialize();
                this.ArgumentAnswer = argumentAnswer;
                this.FeedbackAppender = feedbackAppender;
            }
        },
        methods: {
            Execute: function () {
                if (this.ArgumentAnswer.Argument$IArgument$Propositions.Count !== 3) {
                    this.FeedbackAppender.LogicalAnalysisEngine$ArgumentAnalysis$Common$IFeedbackAppender$AddFailure(this.GetMoodFailureDescription());
                    return;
                }


                if (this.ArgumentIsInProperMood()) {
                    this.FeedbackAppender.LogicalAnalysisEngine$ArgumentAnalysis$Common$IFeedbackAppender$AddSuccess(this.GetMoodSuccessDescription());
                } else {
                    this.FeedbackAppender.LogicalAnalysisEngine$ArgumentAnalysis$Common$IFeedbackAppender$AddFailure(this.GetMoodFailureDescription());
                }
            },
            GetMoodFailureDescription: function () {
                return "Syllogism is not an " + (this.GetMoodName() || "") + " argument";
            },
            GetMoodSuccessDescription: function () {
                return "Syllogism is an " + (this.GetMoodName() || "") + " argument";
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Basic.AreThere3PropositionsChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                var argumentAnswer = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$ArgumentAnswer;

                if (argumentAnswer.Argument$IArgument$Propositions.Count === 3) {
                    this.AddSuccessFeedback("Syllogism has three and only three propositions");
                    this.NextChain.Process(validSyllogismData);
                } else {
                    this.AddFailureFeedback("Syllogism does not have three and only three propositions");
                    return;
                }


            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Basic.AreThere3TermsChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _termsCollection: null
        },
        ctors: {
            ctor: function (termsCollection, nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._termsCollection = termsCollection;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                if (this._termsCollection.Count === 3) {
                    this.AddSuccessFeedback("Syllogism has three and only three terms");
                    this.NextChain.Process(validSyllogismData);
                } else {
                    this.AddFailureFeedback("Syllogisms does not have three and only three terms");
                    return;
                }
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Basic.Prep.TermAnalysisChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _termsAnalysisStep: null
        },
        ctors: {
            ctor: function (termsAnalysisStep, nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._termsAnalysisStep = termsAnalysisStep;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this._termsAnalysisStep.Execute();
                this.NextChain.Process(validSyllogismData);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.HasANegativeConclusionWhenOneOfThePremisesIsNegative", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _negativityCalculator: null,
            _premise1: null,
            _premise2: null,
            _conclusion: null
        },
        ctors: {
            ctor: function (nextChain, negativityCalculator, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._negativityCalculator = negativityCalculator;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitializeMembers(validSyllogismData);

                if (this.PropositionIsNegative(this._premise1) || this.PropositionIsNegative(this._premise2)) {
                    if (this.PropositionIsNegative(this._conclusion)) {
                        this.AddSuccessFeedback("Syllogism has a negative conclusion when one of the premises is negative");
                    } else {
                        this.AddFailureFeedback("Syllogism does not have a negative conclusion when one of the premises is negative");
                    }
                }

                this.NextChain.Process(validSyllogismData);
            },
            InitializeMembers: function (validSyllogismData) {
                this._premise1 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1;
                this._premise2 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2;
                this._conclusion = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Conclusion;
            },
            PropositionIsNegative: function (proposition) {
                return this._negativityCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$NegativityCalculators$INegativityCalculator$PropositionIsNegative(proposition);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.HasANegativePremiseWhenTheConclusionIsNegative", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _negativityCalculator: null,
            _premise1: null,
            _premise2: null,
            _conclusion: null
        },
        ctors: {
            ctor: function (nextChain, negativityCalculator, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._negativityCalculator = negativityCalculator;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitializeMembers(validSyllogismData);

                if (this.PropositionIsNegative(this._conclusion)) {
                    if (this.PropositionIsNegative(this._premise1) || this.PropositionIsNegative(this._premise2)) {
                        this.AddSuccessFeedback("Syllogism has a negative premise when the conclusion is negative");
                    } else {
                        this.AddFailureFeedback("Syllogism does not have a negative premise when the conclusion is negative");
                    }
                }

                this.NextChain.Process(validSyllogismData);
            },
            InitializeMembers: function (validSyllogismData) {
                this._premise1 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1;
                this._premise2 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2;
                this._conclusion = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Conclusion;
            },
            PropositionIsNegative: function (proposition) {
                return this._negativityCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$NegativityCalculators$INegativityCalculator$PropositionIsNegative(proposition);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.IsTheMiddleTermDistributedAtLeastOnceChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _middleTerm: null,
            _premise1: null,
            _premise2: null,
            _distributionCalculator: null
        },
        ctors: {
            ctor: function (distributionCalculator, nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._distributionCalculator = distributionCalculator;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitizeMembers(validSyllogismData);

                if (this.MiddleTermIsDistributedAtLeastOnceInThePremises()) {
                    this.AddSuccessFeedback("Syllogism has middle term that is distributed at least once");
                } else {
                    this.AddFailureFeedback("Syllogism does not have a middle term that is distributed at least once");
                }

                this.NextChain.Process(validSyllogismData);
            },
            InitizeMembers: function (validSyllogismData) {
                this._premise1 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1;
                this._premise2 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2;
                this._middleTerm = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MiddleTerm;
            },
            MiddleTermIsDistributedAtLeastOnceInThePremises: function () {
                return this._distributionCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$DistributionCalculators$IDistributionCalculator$TermIsDistributedInProposition(this._middleTerm, this._premise1) || this._distributionCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$DistributionCalculators$IDistributionCalculator$TermIsDistributedInProposition(this._middleTerm, this._premise2);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.NoSyllogismCanHaveTwoNegativePremisesChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _negativityCalculator: null,
            _premise1: null,
            _premise2: null
        },
        ctors: {
            ctor: function (nextChain, negativityCalculator, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._negativityCalculator = negativityCalculator;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitizeMembers(validSyllogismData);

                if (this.PropositionIsNegative(this._premise1) && this.PropositionIsNegative(this._premise2)) {
                    this.AddFailureFeedback("Syllogism has two negative premises");
                } else {
                    this.AddSuccessFeedback("Syllogism does not have two negative premises");
                }

                this.NextChain.Process(validSyllogismData);
            },
            InitizeMembers: function (validSyllogismData) {
                this._premise1 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1;
                this._premise2 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2;
            },
            PropositionIsNegative: function (proposition) {
                return this._negativityCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$NegativityCalculators$INegativityCalculator$PropositionIsNegative(proposition);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.NoTermUndistributedInAPremiseButDistributedInConclusionChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _distributionCalculator: null,
            _premise1: null,
            _premise2: null,
            _conclusion: null
        },
        ctors: {
            ctor: function (distributionCalculator, nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._distributionCalculator = distributionCalculator;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitizeMembers(validSyllogismData);

                if (this.AtLeastOneTermDistributedInTheConclusionIsUndistributedInAPremise()) {
                    this.AddFailureFeedback("Syllogism has a term that is undistributed in a premise but is distributed in the conclusion");
                } else {
                    this.AddSuccessFeedback("Syllogism has no term that is undistributed in a premise but is distributed in the conclusion");
                }

                this.NextChain.Process(validSyllogismData);
            },
            InitizeMembers: function (validSyllogismData) {
                this._premise1 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1;
                this._premise2 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2;
                this._conclusion = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Conclusion;
            },
            AtLeastOneTermDistributedInTheConclusionIsUndistributedInAPremise: function () {
                var $t;
                var termsDistributedInTheConclusion = this.GetTermsDistributedInTheConclusion();

                var atLeastOneTermDistributedInTheConclusionIsUndistributedInAPremise = false;
                $t = Bridge.getEnumerator(termsDistributedInTheConclusion);
                try {
                    while ($t.moveNext()) {
                        var term = $t.Current;
                        if (this._distributionCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$DistributionCalculators$IDistributionCalculator$TermIsUndistributedInProposition(term, this._premise1)) {
                            atLeastOneTermDistributedInTheConclusionIsUndistributedInAPremise = true;
                        }

                        if (this._distributionCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$DistributionCalculators$IDistributionCalculator$TermIsUndistributedInProposition(term, this._premise2)) {
                            atLeastOneTermDistributedInTheConclusionIsUndistributedInAPremise = true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return atLeastOneTermDistributedInTheConclusionIsUndistributedInAPremise;
            },
            GetTermsDistributedInTheConclusion: function () {
                var $t;
                var termsDistributedInTheConclusion = new (System.Collections.ObjectModel.Collection$1(System.String)).ctor();
                var conclusionTerms = this.GetConclusionTerms();

                $t = Bridge.getEnumerator(conclusionTerms);
                try {
                    while ($t.moveNext()) {
                        var conclusionTerm = $t.Current;
                        if (this._distributionCalculator.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$DistributionCalculators$IDistributionCalculator$TermIsDistributedInProposition(conclusionTerm, this._conclusion)) {
                            termsDistributedInTheConclusion.add(conclusionTerm);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return termsDistributedInTheConclusion;
            },
            GetConclusionTerms: function () {
                var conclusionTerms = new (System.Collections.ObjectModel.Collection$1(System.String)).ctor();
                conclusionTerms.add(this._conclusion.Proposition$IProposition$GetCleanedTermNameFromSubjectText());
                conclusionTerms.add(this._conclusion.Proposition$IProposition$GetCleanedTermNameFromPredicateText());

                return conclusionTerms;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.AristotlesBasicRulesChainFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.ChainFactory],
        fields: {
            _logicalAnalysisEngine: null,
            _areThere3TermsChain: null,
            _areThere3PropositionsChain: null,
            _termsAnalysisChain: null,
            _preperationChain: null
        },
        ctors: {
            ctor: function (logicalAnalysisEngine, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.ChainFactory.ctor.call(this, feedbackAppender);
                this._logicalAnalysisEngine = logicalAnalysisEngine;
            }
        },
        methods: {
            Create: function (nextChain) {
                this.CreateAreThere3TermsChain(nextChain);
                this.CreateAreThere3PropositionsChain(this._areThere3TermsChain);
                this.CreatePreperationChain(this._areThere3PropositionsChain);

                var aristotlesBasicRulesChain = this._preperationChain;

                return aristotlesBasicRulesChain;
            },
            CreateAreThere3TermsChain: function (nextChain) {
                this._areThere3TermsChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Basic.AreThere3TermsChain(this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$TermsCollection, nextChain, this.FeedbackAppender);
            },
            CreateAreThere3PropositionsChain: function (nextChain) {
                this._areThere3PropositionsChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Basic.AreThere3PropositionsChain(nextChain, this.FeedbackAppender);
            },
            CreatePreperationChain: function (nextChain) {
                this.CreateTermsAnalysisChain(nextChain);

                this._preperationChain = this._termsAnalysisChain;
            },
            CreateTermsAnalysisChain: function (nextChain) {
                var termFactory = new Term.Factory.TermFactory();
                var termsAnalysisStep = new LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.TermsAnalysisStep(this._logicalAnalysisEngine, termFactory);
                this._termsAnalysisChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Basic.Prep.TermAnalysisChain(termsAnalysisStep, nextChain, this.FeedbackAppender);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.AristotlesOtherRulesChainFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.ChainFactory],
        fields: {
            _negativityCalculator: null,
            _distributionCalculator: null,
            _hasANegativePremiseWhenTheConclusionIsNegative: null,
            _hasANegativeConclusionWhenOneOfThePremisesIsNegative: null,
            _noSyllogismCanHaveTwoNegativePremisesChain: null,
            _noTermUndistributedInAPremiseButDistributedInConclusionChain: null,
            _isTheMiddleTermDistributedAtLeastOnceChain: null
        },
        ctors: {
            ctor: function (feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.ChainFactory.ctor.call(this, feedbackAppender);
            }
        },
        methods: {
            Create: function (nextChain) {
                this.CreateCalculatorsForTheChains();

                this.CreateHasANegativePremiseWhenTheConclusionIsNegative(nextChain);
                this.CreateHasANegativeConclusionWhenOneOfThePremisesIsNegative(this._hasANegativePremiseWhenTheConclusionIsNegative);
                this.CreateNoSyllogismCanHaveTwoNegativePremisesChain(this._hasANegativeConclusionWhenOneOfThePremisesIsNegative);
                this.CreateNoTermUndistributedInAPremiseButDistributedInConclusionChain(this._noSyllogismCanHaveTwoNegativePremisesChain);
                this.CreateIsTheMiddleTermDistributedAtLeastOnceChain(this._noTermUndistributedInAPremiseButDistributedInConclusionChain);

                var aristotlesOtherRulesChain = this._isTheMiddleTermDistributedAtLeastOnceChain;

                return aristotlesOtherRulesChain;
            },
            CreateCalculatorsForTheChains: function () {
                this._distributionCalculator = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.DistributionCalculators.DistributionCalculator();
                this._negativityCalculator = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.NegativityCalculators.NegativityCalculator();
            },
            CreateHasANegativePremiseWhenTheConclusionIsNegative: function (nextChain) {
                this._hasANegativePremiseWhenTheConclusionIsNegative = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.HasANegativePremiseWhenTheConclusionIsNegative(nextChain, this._negativityCalculator, this.FeedbackAppender);
            },
            CreateHasANegativeConclusionWhenOneOfThePremisesIsNegative: function (nextChain) {
                this._hasANegativeConclusionWhenOneOfThePremisesIsNegative = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.HasANegativeConclusionWhenOneOfThePremisesIsNegative(nextChain, this._negativityCalculator, this.FeedbackAppender);
            },
            CreateNoSyllogismCanHaveTwoNegativePremisesChain: function (nextChain) {
                this._noSyllogismCanHaveTwoNegativePremisesChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.NoSyllogismCanHaveTwoNegativePremisesChain(nextChain, this._negativityCalculator, this.FeedbackAppender);
            },
            CreateNoTermUndistributedInAPremiseButDistributedInConclusionChain: function (nextChain) {
                this._noTermUndistributedInAPremiseButDistributedInConclusionChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.NoTermUndistributedInAPremiseButDistributedInConclusionChain(this._distributionCalculator, nextChain, this.FeedbackAppender);
            },
            CreateIsTheMiddleTermDistributedAtLeastOnceChain: function (nextChain) {
                this._isTheMiddleTermDistributedAtLeastOnceChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.AristotlesRules.Other.IsTheMiddleTermDistributedAtLeastOnceChain(this._distributionCalculator, nextChain, this.FeedbackAppender);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.SyllogismBasicsChainFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.ChainFactory],
        fields: {
            _termsCollection: null,
            _deriveMinorPremiseChain: null,
            _deriveMajorPremiseChain: null,
            _deriveMajorMinorAndMiddleTermsChain: null,
            _derivePremisesAndConclusionChain: null,
            _isEachTermUsedTwiceChain: null,
            _isEachPropositionCategorical: null
        },
        ctors: {
            ctor: function (termsCollection, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.ChainFactory.ctor.call(this, feedbackAppender);
                this._termsCollection = termsCollection;
            }
        },
        methods: {
            Create: function (nextChain) {
                this.CreateMinorPremiseChain(nextChain);
                this.CreateMajorPremiseChain(this._deriveMinorPremiseChain);
                this.CreateMajorMinorAndMiddleTermsChain(this._deriveMajorPremiseChain);
                this.CreatePremisesAndConclusionChain(this._deriveMajorMinorAndMiddleTermsChain);
                this.CreateIsEachTermUsedTwiceChain(this._derivePremisesAndConclusionChain);
                this.CreateIsEachPropositionCategoricalChain(this._isEachTermUsedTwiceChain);

                var validSyllogismChain = this._isEachPropositionCategorical;

                return validSyllogismChain;
            },
            CreateMinorPremiseChain: function (nextChain) {
                this._deriveMinorPremiseChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DeriveMinorPremiseChain(nextChain, this.FeedbackAppender);
            },
            CreateMajorPremiseChain: function (nextChain) {
                this._deriveMajorPremiseChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DeriveMajorPremiseChain(nextChain, this.FeedbackAppender);
            },
            CreateMajorMinorAndMiddleTermsChain: function (nextChain) {
                this._deriveMajorMinorAndMiddleTermsChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DeriveMajorMinorAndMiddleTermsChain(this._termsCollection, nextChain, this.FeedbackAppender);
            },
            CreatePremisesAndConclusionChain: function (nextChain) {
                this._derivePremisesAndConclusionChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremisesAndConclusionChain(nextChain, this.FeedbackAppender);
            },
            CreateIsEachTermUsedTwiceChain: function (nextChain) {
                this._isEachTermUsedTwiceChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.IsEachTermUsedTwice(this._termsCollection, nextChain, this.FeedbackAppender);
            },
            CreateIsEachPropositionCategoricalChain: function (nextChain) {
                this._isEachPropositionCategorical = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.IsEachPropositionCategorical(nextChain, this.FeedbackAppender);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DeriveMajorMinorAndMiddleTermsChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _termsCollection: null,
            _validSyllogismData: null,
            _premise1: null,
            _premise2: null,
            _conclusion: null,
            _middleTermCandidate: null,
            _middleTermWasFound: false
        },
        ctors: {
            ctor: function (termsCollection, nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._termsCollection = termsCollection;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitializeMembers(validSyllogismData);

                this.DeriveMinorTerm();
                this.DeriveMajorTerm();
                this.AttemptToDeriveMiddleTerm();

                if (this._middleTermWasFound) {
                    this.AddSuccessFeedback("Syllogism has a minor, major, and middle term");
                } else {
                    this.AddFailureFeedback("Syllogism does not have a middle term");
                }

                this.NextChain.Process(validSyllogismData);
            },
            InitializeMembers: function (validSyllogismData) {
                this._validSyllogismData = validSyllogismData;
                this._premise1 = this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1;
                this._premise2 = this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2;
                this._conclusion = this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Conclusion;
            },
            DeriveMinorTerm: function () {
                this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MinorTerm = this._conclusion.Proposition$IProposition$GetCleanedTermNameFromSubjectText();
            },
            DeriveMajorTerm: function () {
                this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MajorTerm = this._conclusion.Proposition$IProposition$GetCleanedTermNameFromPredicateText();
            },
            AttemptToDeriveMiddleTerm: function () {
                this._middleTermCandidate = this.GetTheRemainingTermThatIsNotTheMajorOrMinorTerm();

                if (this.MiddleTermCandidateIsNotInTheConclusion() && this.MiddleTermCandidateIsInEachPremise()) {
                    this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MiddleTerm = this._middleTermCandidate;
                    this._middleTermWasFound = true;

                } else {
                    this._middleTermWasFound = false;
                }
            },
            GetTheRemainingTermThatIsNotTheMajorOrMinorTerm: function () {
                var remainingTerm = System.Linq.Enumerable.from(this._termsCollection).first(Bridge.fn.bind(this, function (term) {
                        return !Bridge.referenceEquals(term.Term$ITerm$Name, this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MajorTerm) && !Bridge.referenceEquals(term.Term$ITerm$Name, this._validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MinorTerm);
                    }));

                return remainingTerm.Term$ITerm$Name;
            },
            MiddleTermCandidateIsNotInTheConclusion: function () {
                return System.String.contains(this._conclusion.Proposition$IProposition$RawSentence,this._middleTermCandidate) === false;
            },
            MiddleTermCandidateIsInEachPremise: function () {
                return System.String.contains(this._premise1.Proposition$IProposition$RawSentence.toLowerCase(),this._middleTermCandidate) && System.String.contains(this._premise2.Proposition$IProposition$RawSentence.toLowerCase(),this._middleTermCandidate);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremisesAndConclusionChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                var argumentAnswer = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$ArgumentAnswer;

                validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1 = argumentAnswer.Argument$IArgument$Propositions.getItem(0);
                validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2 = argumentAnswer.Argument$IArgument$Propositions.getItem(1);
                validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Conclusion = argumentAnswer.Argument$IArgument$Propositions.getItem(2);

                this.NextChain.Process(validSyllogismData);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DerivePremiseTypeChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            MinorTerm: null,
            MajorTerm: null,
            Premise1: null,
            Premise1Subject: null,
            Premise1Predicate: null,
            Premise2: null,
            Premise2Subject: null,
            Premise2Predicate: null,
            MinorPremise: null,
            MajorPremise: null
        },
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
            }
        },
        methods: {
            InitializeMembers: function (validSyllogismData) {
                this.InitializeTerms(validSyllogismData);
                this.InitializePropositions(validSyllogismData);
            },
            InitializeTerms: function (validSyllogismData) {
                this.MinorTerm = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MinorTerm.toLowerCase();
                this.MajorTerm = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MajorTerm.toLowerCase();
                this.Premise1Subject = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1.Proposition$IProposition$GetCleanedTermNameFromSubjectText();
                this.Premise1Predicate = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1.Proposition$IProposition$GetCleanedTermNameFromPredicateText();
                this.Premise2Subject = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2.Proposition$IProposition$GetCleanedTermNameFromSubjectText();
                this.Premise2Predicate = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2.Proposition$IProposition$GetCleanedTermNameFromPredicateText();
            },
            InitializePropositions: function (validSyllogismData) {
                this.Premise1 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1;
                this.Premise2 = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2;
                this.MinorPremise = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MinorPremise;
                this.MajorPremise = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MajorPremise;
            },
            TermIsInTheFirstPremise: function (term) {
                return Bridge.referenceEquals(this.Premise1Subject, term) || Bridge.referenceEquals(this.Premise1Predicate, term);
            },
            TermIsInTheSecondPremise: function (term) {
                return Bridge.referenceEquals(this.Premise2Subject, term) || Bridge.referenceEquals(this.Premise2Predicate, term);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.IsEachPropositionCategorical", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _argumentAnswer: null
        },
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitializeMembers(validSyllogismData);

                if (this.EachPropositionIsCategorical()) {
                    this.AddSuccessFeedback("Syllogism has all categorical propositions");
                } else {
                    this.AddFailureFeedback("Syllogism does not have all categorical propositions");
                }

                this.NextChain.Process(validSyllogismData);
            },
            InitializeMembers: function (validSyllogismData) {
                this._argumentAnswer = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$ArgumentAnswer;
            },
            EachPropositionIsCategorical: function () {
                var $t;
                var eachPropositionIsCategorical = true;
                $t = Bridge.getEnumerator(this._argumentAnswer.Argument$IArgument$Propositions);
                try {
                    while ($t.moveNext()) {
                        var proposition = $t.Current;
                        if (proposition.Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.None) {
                            eachPropositionIsCategorical = false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return eachPropositionIsCategorical;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.IsEachTermUsedTwice", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        fields: {
            _termsCollection: null,
            _argumentAnswer: null
        },
        ctors: {
            ctor: function (termsCollection, nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
                this._termsCollection = termsCollection;
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitializeMembers(validSyllogismData);

                if (this.EachTermIsUsedTwice()) {
                    this.AddSuccessFeedback("Syllogism has each term used twice");
                } else {
                    this.AddFailureFeedback("Syllogism does not have each term used twice");
                }

                this.NextChain.Process(validSyllogismData);
            },
            EachTermIsUsedTwice: function () {
                return !!(!!(this.TermIsUsedTwice(this._termsCollection.getItem(0)) & this.TermIsUsedTwice(this._termsCollection.getItem(1))) & this.TermIsUsedTwice(this._termsCollection.getItem(2)));
            },
            InitializeMembers: function (validSyllogismData) {
                this._argumentAnswer = validSyllogismData.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$ArgumentAnswer;
            },
            TermIsUsedTwice: function (term) {
                if (this.CountOfTimesTermIsUsed(term) === 2) {
                    return true;
                } else {
                    return false;
                }
            },
            CountOfTimesTermIsUsed: function (term) {
                return ((((this.GetCountOfTermUsageInAProposition(term, this._argumentAnswer.Argument$IArgument$Propositions.getItem(0)) + this.GetCountOfTermUsageInAProposition(term, this._argumentAnswer.Argument$IArgument$Propositions.getItem(1))) | 0) + this.GetCountOfTermUsageInAProposition(term, this._argumentAnswer.Argument$IArgument$Propositions.getItem(2))) | 0);
            },
            GetCountOfTermUsageInAProposition: function (term, proposition) {
                return System.Text.RegularExpressions.Regex.matches(proposition.Proposition$IProposition$RawSentence.toLowerCase(), term.Term$ITerm$Name.toLowerCase()).getCount();
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Terminators.TerminatingChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain],
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.ValidSyllogismChain.ctor.call(this, nextChain, feedbackAppender);
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                return;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Data.ValidSyllogismData", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Data.IValidSyllogismData],
        fields: {
            ArgumentAnswer: null,
            Premise1: null,
            Premise2: null,
            Conclusion: null,
            MinorTerm: null,
            MajorTerm: null,
            MiddleTerm: null,
            MinorPremise: null,
            MajorPremise: null
        },
        alias: [
            "ArgumentAnswer", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$ArgumentAnswer",
            "Premise1", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise1",
            "Premise2", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Premise2",
            "Conclusion", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$Conclusion",
            "MinorTerm", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MinorTerm",
            "MajorTerm", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MajorTerm",
            "MiddleTerm", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MiddleTerm",
            "MinorPremise", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MinorPremise",
            "MajorPremise", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Data$IValidSyllogismData$MajorPremise"
        ],
        ctors: {
            ctor: function (argumentAnswer) {
                this.$initialize();
                this.ArgumentAnswer = argumentAnswer;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.DistributionCalculators.DistributionCalculator", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.DistributionCalculators.IDistributionCalculator],
        fields: {
            _term: null,
            _proposition: null
        },
        alias: [
            "TermIsDistributedInProposition", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$DistributionCalculators$IDistributionCalculator$TermIsDistributedInProposition",
            "TermIsUndistributedInProposition", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$DistributionCalculators$IDistributionCalculator$TermIsUndistributedInProposition"
        ],
        methods: {
            TermIsDistributedInProposition: function (term, propostion) {
                this._term = term;
                this._proposition = propostion;

                if (this.TheTermIsTheSubjectInAnAProposition()) {
                    return true;
                }

                if (this.TheTermIsTheSubjectOrPredicateInAnEProposition()) {
                    return true;
                }

                if (this.TheTermIsThePredicateInAnOProposition()) {
                    return true;
                }

                return false;
            },
            TheTermIsTheSubjectInAnAProposition: function () {
                return this.ThePropositionIsCategoryA() && this.TheTermIsTheSubject();
            },
            ThePropositionIsCategoryA: function () {
                return this._proposition.Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.A;
            },
            TheTermIsTheSubject: function () {
                return Bridge.referenceEquals(this._proposition.Proposition$IProposition$GetCleanedTermNameFromSubjectText(), this._term);
            },
            TheTermIsTheSubjectOrPredicateInAnEProposition: function () {
                return this.ThePropositionIsCategoryE() && this.TheTermIsTheSubjectOrPredicate();
            },
            ThePropositionIsCategoryE: function () {
                return this._proposition.Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.E;
            },
            TheTermIsTheSubjectOrPredicate: function () {
                return this.TheTermIsTheSubject() || this.TheTermIsThePredicate();
            },
            TheTermIsThePredicate: function () {
                return Bridge.referenceEquals(this._proposition.Proposition$IProposition$GetCleanedTermNameFromPredicateText(), this._term);
            },
            TheTermIsThePredicateInAnOProposition: function () {
                return this.ThePropositionIsCategoryO() && this.TheTermIsThePredicate();
            },
            ThePropositionIsCategoryO: function () {
                return this._proposition.Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.O;
            },
            TermIsUndistributedInProposition: function (term, propostion) {
                this._term = term;
                this._proposition = propostion;

                if (this.ThePropositionIsCategoryA() && this.TheTermIsThePredicate()) {
                    return true;
                }

                if (this._proposition.Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.I && this.TheTermIsTheSubjectOrPredicate()) {
                    return true;
                }

                if (this.ThePropositionIsCategoryO() && this.TheTermIsTheSubject()) {
                    return true;
                }

                return false;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Factory.ValidSyllogismStepFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Factory.IValidSyllogismStepFactory],
        fields: {
            _argumentAnswer: null,
            _logicalAnalysisEngine: null,
            _feedbackAppender: null,
            _aristotlesOtherRulesChainFactory: null,
            _syllogismBasicsChainFactory: null,
            _aristotlesBasicRulesChainFactory: null,
            _terminatingChain: null,
            _aristotlesOtherRulesChain: null,
            _syllogismBasicsChain: null,
            _aristotlesBasicRulesChain: null
        },
        alias: ["Create", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$Factory$IValidSyllogismStepFactory$Create"],
        ctors: {
            ctor: function (argumentAnswer, logicalAnalysisEngine, feedbackAppender) {
                this.$initialize();
                this._argumentAnswer = argumentAnswer;
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._feedbackAppender = feedbackAppender;
            }
        },
        methods: {
            Create: function () {
                var validSyllogismData = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Data.ValidSyllogismData(this._argumentAnswer);
                var validSyllogismChain = this.CreateValidSyllogismChain();

                return new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.ValidSyllogismAnalysisStep(validSyllogismChain, validSyllogismData);
            },
            CreateValidSyllogismChain: function () {
                this.CreateChainFactories();

                this.CreateTerminatingChain();
                this.CreateAristotlesOtherRulesChain(this._terminatingChain);
                this.CreateSyllogismBasicsChain(this._aristotlesOtherRulesChain);
                this.CreateAristotlesBasicRulesChain(this._syllogismBasicsChain);

                var validSyllogismChain = this._aristotlesBasicRulesChain;

                return validSyllogismChain;
            },
            CreateChainFactories: function () {
                this._aristotlesOtherRulesChainFactory = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.AristotlesOtherRulesChainFactory(this._feedbackAppender);
                this._syllogismBasicsChainFactory = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.SyllogismBasicsChainFactory(this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$TermsCollection, this._feedbackAppender);
                this._aristotlesBasicRulesChainFactory = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Factories.AristotlesBasicRulesChainFactory(this._logicalAnalysisEngine, this._feedbackAppender);
            },
            CreateTerminatingChain: function () {
                this._terminatingChain = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.Terminators.TerminatingChain(null, this._feedbackAppender);
            },
            CreateAristotlesOtherRulesChain: function (nextChain) {
                this._aristotlesOtherRulesChain = this._aristotlesOtherRulesChainFactory.Create(nextChain);
            },
            CreateSyllogismBasicsChain: function (nextChain) {
                this._syllogismBasicsChain = this._syllogismBasicsChainFactory.Create(nextChain);
            },
            CreateAristotlesBasicRulesChain: function (nextChain) {
                this._aristotlesBasicRulesChain = this._aristotlesBasicRulesChainFactory.Create(nextChain);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.NegativityCalculators.NegativityCalculator", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.NegativityCalculators.INegativityCalculator],
        alias: ["PropositionIsNegative", "LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$LogicalAnalysisSteps$ValidSyllogismStep$NegativityCalculators$INegativityCalculator$PropositionIsNegative"],
        methods: {
            PropositionIsNegative: function (proposition) {
                return proposition.Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.E || proposition.Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.O;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.ValidSyllogismAnalysisStep", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _validSyllogismChain: null,
            _validSyllogismData: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (validSyllogismChain, validSyllogismData) {
                this.$initialize();
                this._validSyllogismChain = validSyllogismChain;
                this._validSyllogismData = validSyllogismData;
            }
        },
        methods: {
            Execute: function () {
                this._validSyllogismChain.Process(this._validSyllogismData);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.LogicalAnalysisEngine", {
        inherits: [LogicalAnalysisEngine.ILogicalAnalysisEngine],
        fields: {
            AnalyzableEntity: null,
            TermsCollection: null,
            AnalysisStepChecoraterCollection: null,
            AnalysisStatus: 0,
            AnalysisFeedbackCollection: null,
            _initialTermEquivalenceMapping: null
        },
        alias: [
            "AnalyzableEntity", "LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalyzableEntity",
            "TermsCollection", "LogicalAnalysisEngine$ILogicalAnalysisEngine$TermsCollection",
            "AnalysisStepChecoraterCollection", "LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStepChecoraterCollection",
            "AnalysisStatus", "LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus",
            "AnalysisFeedbackCollection", "LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection",
            "PerformAnalysis", "LogicalAnalysisEngine$ILogicalAnalysisEngine$PerformAnalysis",
            "GetInitialTermEquivalenceMapping", "LogicalAnalysisEngine$ILogicalAnalysisEngine$GetInitialTermEquivalenceMapping"
        ],
        ctors: {
            $ctor1: function (analyzableEntity, initialTermEquivalenceMapping) {
                LogicalAnalysisEngine.LogicalAnalysisEngine.ctor.call(this, analyzableEntity);
                this._initialTermEquivalenceMapping = initialTermEquivalenceMapping;
            },
            ctor: function (analyzableEntity) {
                this.$initialize();
                this.AnalyzableEntity = analyzableEntity;
                this.TermsCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.AnalysisStepChecoraterCollection = new (System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep)).ctor();
                this.AnalysisFeedbackCollection = new (System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.AnalysisFeedback.IAnalysisFeedback)).ctor();
                this.AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.NotStarted;
            }
        },
        methods: {
            PerformAnalysis: function () {
                var $t;
                this.AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.InProgress;
                $t = Bridge.getEnumerator(this.AnalysisStepChecoraterCollection);
                try {
                    while ($t.moveNext()) {
                        var logicalAnalysisStep = $t.Current;
                        logicalAnalysisStep.LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            GetInitialTermEquivalenceMapping: function () {
                return this._initialTermEquivalenceMapping;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.PropositionMatch.PropositionMatchLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory],
        fields: {
            _propositionFactory: null,
            _expectedProposition: null
        },
        ctors: {
            ctor: function (propositionFactory, expectedProposition) {
                this.$initialize();
                LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory.ctor.call(this);
                this._propositionFactory = propositionFactory;
                this._expectedProposition = expectedProposition;
            }
        },
        methods: {
            GetPropositionToAnalyze: function () {
                return this._expectedProposition;
            },
            AddQuestionSpecificAnalysisSteps: function () {
                var propositionAnswer = this._propositionFactory.Create(this.TextAnswer);

                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.$ctor1(propositionAnswer, this.LogicalAnalysisEngine));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsTheQuantifierCorrectForThisCategory(propositionAnswer, this.LogicalAnalysisEngine, this._expectedProposition.Proposition$IProposition$Category));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Subject.IsThisTheSubject(this.LogicalAnalysisEngine, propositionAnswer.Proposition$IProposition$SubjectText));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Copula.IsThisTheCopula(this.LogicalAnalysisEngine, propositionAnswer.Proposition$IProposition$CopulaText));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Predicate.IsThisThePredicate(this.LogicalAnalysisEngine, propositionAnswer.Proposition$IProposition$PredicateText));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsThePropositionInTheRightCategory(propositionAnswer, this.LogicalAnalysisEngine, this._expectedProposition.Proposition$IProposition$Category));

            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.CategoryLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory],
        fields: {
            _propositionFactory: null,
            _expectedCategory: 0,
            _propositionAnswer: null
        },
        ctors: {
            ctor: function (propositionFactory, expectedCategory) {
                this.$initialize();
                LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory.ctor.call(this);
                this._propositionFactory = propositionFactory;
                this._expectedCategory = expectedCategory;
            }
        },
        methods: {
            GetPropositionToAnalyze: function () {
                this._propositionAnswer = this._propositionFactory.Create(this.TextAnswer);
                return this._propositionAnswer;
            },
            AddQuestionSpecificAnalysisSteps: function () {
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.ArgumentAnalysis.NonSyllogisms.LogicalAnalysisStep.BeforeTermAnalysisSteps.SyntaxAnalysisStep.$ctor1(this._propositionAnswer, this.LogicalAnalysisEngine));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsTheQuantifierCorrectForThisCategory(this._propositionAnswer, this.LogicalAnalysisEngine, this._expectedCategory));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsTheCopulaCorrectForThisCategory(this._propositionAnswer, this.LogicalAnalysisEngine, this._expectedCategory));
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsThePropositionInTheRightCategory(this._propositionAnswer, this.LogicalAnalysisEngine, this._expectedCategory));
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsTheCopulaCorrectForThisCategory", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _expectedCategory: 0,
            _proposition: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (proposition, logicalAnalysisEngine, expectedCategory) {
                this.$initialize();
                this._proposition = proposition;
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._expectedCategory = expectedCategory;
            }
        },
        methods: {
            Execute: function () {
                this.HandleIfACategory();
                this.HandleIfECategory();
                this.HandleIfICategory();
                this.HandleIfOCategory();
            },
            HandleIfACategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.A) {
                    if (this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Is || this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Are) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            HandleIfECategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.E) {
                    if (this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Is || this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Are) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            HandleIfICategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.I) {
                    if (this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Is || this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Are) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            HandleIfOCategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.O) {
                    if (this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.IsNot || this._proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.AreNot) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            AddSuccessFeedback: function () {
                var feedbackDescription = "Correct copula";
                var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                this._logicalAnalysisEngine.AnalysisFeedbackCollection.add(newFeedback);
            },
            AddFailureFeedback: function () {
                this._logicalAnalysisEngine.AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                var feedbackDescription = "Incorrect copula";
                var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription);
                this._logicalAnalysisEngine.AnalysisFeedbackCollection.add(newFeedback);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsThePropositionInTheRightCategory", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _expectedCategory: 0,
            _proposition: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (proposition, logicalAnalysisEngine, expectedCategory) {
                this.$initialize();
                this._proposition = proposition;
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._expectedCategory = expectedCategory;
            }
        },
        methods: {
            Execute: function () {
                if (this._proposition.Proposition$IProposition$Category === this._expectedCategory) {
                    var feedbackDescription = "Correct category";
                    var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                    this._logicalAnalysisEngine.AnalysisFeedbackCollection.add(newFeedback);
                } else {
                    this._logicalAnalysisEngine.AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                    var feedbackDescription1 = "Incorrect category";
                    var newFeedback1 = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription1);
                    this._logicalAnalysisEngine.AnalysisFeedbackCollection.add(newFeedback1);
                }
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.IsTheQuantifierCorrectForThisCategory", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _expectedCategory: 0,
            _proposition: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (proposition, logicalAnalysisEngine, expectedCategory) {
                this.$initialize();
                this._proposition = proposition;
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._expectedCategory = expectedCategory;
            }
        },
        methods: {
            Execute: function () {
                this.HandleIfACategory();
                this.HandleIfECategory();
                this.HandleIfICategory();
                this.HandleIfOCategory();
            },
            HandleIfACategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.A) {
                    if (this._proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.All) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            HandleIfECategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.E) {
                    if (this._proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.No) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            HandleIfICategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.I) {
                    if (this._proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.Some) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            HandleIfOCategory: function () {
                if (this._expectedCategory === Proposition.Parts.PropositionCategory.O) {
                    if (this._proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.Some) {
                        this.AddSuccessFeedback();
                    } else {
                        this.AddFailureFeedback();
                    }
                }
            },
            AddSuccessFeedback: function () {
                var feedbackDescription = "Correct quantifier";
                var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                this._logicalAnalysisEngine.AnalysisFeedbackCollection.add(newFeedback);
            },
            AddFailureFeedback: function () {
                this._logicalAnalysisEngine.AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                var feedbackDescription = "Incorrect quantifier";
                var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription);
                this._logicalAnalysisEngine.AnalysisFeedbackCollection.add(newFeedback);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Copula.CopulaLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory],
        fields: {
            _propositionInPrompt: null
        },
        ctors: {
            ctor: function (propositionInPrompt) {
                this.$initialize();
                LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory.ctor.call(this);
                this._propositionInPrompt = propositionInPrompt;
            }
        },
        methods: {
            GetPropositionToAnalyze: function () {
                return this._propositionInPrompt;
            },
            AddQuestionSpecificAnalysisSteps: function () {
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Copula.IsThisTheCopula(this.LogicalAnalysisEngine, this.TextAnswer));
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Copula.IsThisTheCopula", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _submittedCopula: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (logicalAnalysisEngine, submittedCopula) {
                this.$initialize();
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                if (submittedCopula == null) {
                    this._submittedCopula = "";
                } else {
                    this._submittedCopula = submittedCopula;
                }
            }
        },
        methods: {
            Execute: function () {
                var proposition = Bridge.cast(this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalyzableEntity, Proposition.Proposition);
                var cleanedSubmittedAnswer = Proposition.Utilities.StringCleaner.RemoveUndesirableCharacters(this._submittedCopula);

                if (Bridge.referenceEquals(proposition.CopulaText.toUpperCase().trim(), cleanedSubmittedAnswer.toUpperCase().trim())) {
                    var feedbackDescription = "Correct copula";
                    var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback);
                } else {
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                    var feedbackDescription1 = "Incorrect copula";
                    var newFeedback1 = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription1);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback1);
                }

            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Predicate.IsThisThePredicate", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _submittedPredicate: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (logicalAnalysisEngine, submittedPredicate) {
                this.$initialize();
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._submittedPredicate = submittedPredicate;
            }
        },
        methods: {
            Execute: function () {
                var proposition = Bridge.cast(this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalyzableEntity, Proposition.Proposition);
                var cleanedSubmittedAnswer = Proposition.Utilities.StringCleaner.RemoveUndesirableCharacters(this._submittedPredicate);

                if (Bridge.referenceEquals(proposition.PredicateText.toUpperCase(), cleanedSubmittedAnswer.toUpperCase().trim())) {
                    var feedbackDescription = "Correct predicate";
                    var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback);
                } else {
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                    var feedbackDescription1 = "Incorrect predicate";
                    var newFeedback1 = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription1);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback1);
                }

            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Predicate.PredicateLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory],
        fields: {
            _propositionInPrompt: null
        },
        ctors: {
            ctor: function (propositionInPrompt) {
                this.$initialize();
                LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory.ctor.call(this);
                this._propositionInPrompt = propositionInPrompt;
            }
        },
        methods: {
            GetPropositionToAnalyze: function () {
                return this._propositionInPrompt;
            },
            AddQuestionSpecificAnalysisSteps: function () {
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Predicate.IsThisThePredicate(this.LogicalAnalysisEngine, this.TextAnswer));
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Quantifier.IsThisTheQuantifier", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _submittedQuantifier: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (logicalAnalysisEngine, submittedQuantifier) {
                this.$initialize();
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._submittedQuantifier = submittedQuantifier;
            }
        },
        methods: {
            Execute: function () {
                var proposition = Bridge.cast(this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalyzableEntity, Proposition.Proposition);
                var cleanedSubmittedAnswer = Proposition.Utilities.StringCleaner.RemoveUndesirableCharacters(this._submittedQuantifier);

                if (Bridge.referenceEquals(proposition.QuantifierText.toUpperCase(), cleanedSubmittedAnswer.toUpperCase().trim())) {
                    var feedbackDescription = "Correct quantifier";
                    var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback);
                } else {
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                    var feedbackDescription1 = "Incorrect quantifier";
                    var newFeedback1 = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription1);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback1);
                }

            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Quantifier.QuantifierLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory],
        fields: {
            _propositionInPrompt: null
        },
        ctors: {
            ctor: function (propositionInPrompt) {
                this.$initialize();
                LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory.ctor.call(this);
                this._propositionInPrompt = propositionInPrompt;
            }
        },
        methods: {
            GetPropositionToAnalyze: function () {
                return this._propositionInPrompt;
            },
            AddQuestionSpecificAnalysisSteps: function () {
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Quantifier.IsThisTheQuantifier(this.LogicalAnalysisEngine, this.TextAnswer));
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Subject.IsThisTheSubject", {
        inherits: [LogicalAnalysisEngine.LogicalAnalysisStep.ILogicalAnalysisStep],
        fields: {
            _logicalAnalysisEngine: null,
            _submittedSubject: null
        },
        alias: ["Execute", "LogicalAnalysisEngine$LogicalAnalysisStep$ILogicalAnalysisStep$Execute"],
        ctors: {
            ctor: function (logicalAnalysisEngine, submittedSubject) {
                this.$initialize();
                this._logicalAnalysisEngine = logicalAnalysisEngine;
                this._submittedSubject = submittedSubject;
            }
        },
        methods: {
            Execute: function () {
                var proposition = Bridge.cast(this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalyzableEntity, Proposition.Proposition);
                var cleanedSubmittedAnswer = Proposition.Utilities.StringCleaner.RemoveUndesirableCharacters(this._submittedSubject);

                if (Bridge.referenceEquals(proposition.SubjectText.toUpperCase(), cleanedSubmittedAnswer.toUpperCase().trim())) {
                    var feedbackDescription = "Correct subject";
                    var newFeedback = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success, feedbackDescription);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback);
                } else {
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus = LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
                    var feedbackDescription1 = "Incorrect subject";
                    var newFeedback1 = new LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedback(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error, feedbackDescription1);
                    this._logicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection.add(newFeedback1);
                }

            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.PropositionAnalysis.Syntax.Subject.SubjectLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory],
        fields: {
            _propositionInPrompt: null
        },
        ctors: {
            ctor: function (propositionInPrompt) {
                this.$initialize();
                LogicalAnalysisEngine.PropositionAnalysis.PropositionAnalysisEngineFactory.ctor.call(this);
                this._propositionInPrompt = propositionInPrompt;
            }
        },
        methods: {
            GetPropositionToAnalyze: function () {
                return this._propositionInPrompt;
            },
            AddQuestionSpecificAnalysisSteps: function () {
                this.LogicalAnalysisEngine.AnalysisStepChecoraterCollection.add(new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Subject.IsThisTheSubject(this.LogicalAnalysisEngine, this.TextAnswer));
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DeriveCategoryChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                if (!proposition.Proposition$IProposition$IsSyntaxValid) {
                    proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.None;
                } else if ((proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.All) && (proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Are || proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Is)) {
                    proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.A;
                } else if ((proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.No) && (proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Are || proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Is)) {
                    proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.E;
                } else if ((proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.Some) && (proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Are || proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.Is)) {
                    proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.I;
                } else if ((proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.Some) && (proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.AreNot || proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.IsNot)) {
                    proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.O;
                } else {
                    proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.None;
                }

                return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DeriveCopula.DeriveCopulaChainWhenItsInTheMiddle", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                var rawSentenceAllCaps = proposition.Proposition$IProposition$RawSentence.toUpperCase();
                if (System.String.contains(rawSentenceAllCaps," ARE NOT ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.AreNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAreNot.toLowerCase();
                    factoryData.CopulaText = " ARE NOT ";
                } else if (System.String.contains(rawSentenceAllCaps," IS NOT ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.IsNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIsNot.toLowerCase();
                    factoryData.CopulaText = " IS NOT ";
                } else if (System.String.contains(rawSentenceAllCaps," ARE ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Are;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAre.toLowerCase();
                    factoryData.CopulaText = " ARE ";
                } else if (System.String.contains(rawSentenceAllCaps," IS ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Is;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIs.toLowerCase();
                    factoryData.CopulaText = " IS ";
                } else {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.None;
                    proposition.Proposition$IProposition$CopulaText = null;
                    factoryData.CopulaText = "";
                }

                return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DeriveCopula.DeriveCopulaChainWhenItsTheFirstCharacters", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextCopulaChain: null,
            _nextPhaseChain: null,
            _rawSentenceAllCaps: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextCopulaChain, nextPhaseChain) {
                this.$initialize();
                this._nextCopulaChain = nextCopulaChain;
                this._nextPhaseChain = nextPhaseChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                this._rawSentenceAllCaps = proposition.Proposition$IProposition$RawSentence.toUpperCase();

                if (this.FitstCharactersOfTheSentenceContain("ARE NOT ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.AreNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAreNot.toLowerCase();
                    factoryData.CopulaText = "ARE NOT ";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.FitstCharactersOfTheSentenceContain("ARE NOT")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.AreNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAreNot.toLowerCase();
                    factoryData.CopulaText = "ARE NOT";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.FitstCharactersOfTheSentenceContain("IS NOT ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.IsNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIsNot.toLowerCase();
                    factoryData.CopulaText = "IS NOT ";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.FitstCharactersOfTheSentenceContain("IS NOT")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.IsNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIsNot.toLowerCase();
                    factoryData.CopulaText = "IS NOT";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.FitstCharactersOfTheSentenceContain("ARE ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Are;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAre.toLowerCase();
                    factoryData.CopulaText = "ARE ";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.FitstCharactersOfTheSentenceContain("IS ")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Is;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIs.toLowerCase();
                    factoryData.CopulaText = "IS ";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else {
                    return this._nextCopulaChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                }
            },
            FitstCharactersOfTheSentenceContain: function (copulaText) {
                if (this._rawSentenceAllCaps.length >= copulaText.length) {
                    return System.String.contains(this._rawSentenceAllCaps.substr(0, copulaText.length),copulaText);
                } else {
                    return false;
                }
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DeriveCopula.DeriveCopulaChainWhenItsTheLastCharacters", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextCopulaChain: null,
            _nextPhaseChain: null,
            _rawSentenceAllCaps: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextCopulaChain, nextPhaseChain) {
                this.$initialize();
                this._nextCopulaChain = nextCopulaChain;
                this._nextPhaseChain = nextPhaseChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                this._rawSentenceAllCaps = proposition.Proposition$IProposition$RawSentence.toUpperCase();

                if (this.LastCharactersOfTheSentenceContain(" ARE NOT")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.AreNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAreNot.toLowerCase();
                    factoryData.CopulaText = " ARE NOT";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.LastCharactersOfTheSentenceContain(" IS NOT")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.IsNot;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIsNot.toLowerCase();
                    factoryData.CopulaText = " IS NOT";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.LastCharactersOfTheSentenceContain(" ARE")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Are;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAre.toLowerCase();
                    factoryData.CopulaText = " ARE";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else if (this.LastCharactersOfTheSentenceContain(" IS")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Is;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIs.toLowerCase();
                    factoryData.CopulaText = " IS";
                    return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                } else {
                    return this._nextCopulaChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                }
            },
            LastCharactersOfTheSentenceContain: function (copulaText) {
                if (this._rawSentenceAllCaps.length >= copulaText.length) {
                    return System.String.contains(this._rawSentenceAllCaps.substr(((this._rawSentenceAllCaps.length - copulaText.length) | 0)),copulaText);
                } else {
                    return false;
                }
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DerivePredicateChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                if (proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.None) {
                    proposition.Proposition$IProposition$PredicateText = "";
                } else {
                    proposition.Proposition$IProposition$PredicateText = this.GetTextAfterCopula(proposition.Proposition$IProposition$RawSentence, factoryData.CopulaText);
                }

                return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            },
            GetTextAfterCopula: function (rawSentence, copulaText) {
                var startIndex = (System.String.indexOf(rawSentence.toUpperCase(), copulaText) + copulaText.length) | 0;
                return rawSentence.substr(startIndex).trim();
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DeriveQuantifierChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextPhaseChain: null,
            _handleSentenceWithNoSpacesChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextPhaseChain, handleSentenceWithNoSpacesChain) {
                this.$initialize();
                this._nextPhaseChain = nextPhaseChain;
                this._handleSentenceWithNoSpacesChain = handleSentenceWithNoSpacesChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                var rawSentenceAllCaps = System.String.trimStart(proposition.Proposition$IProposition$RawSentence.toUpperCase());
                var indexOfFirstSpace = System.String.indexOf(rawSentenceAllCaps, String.fromCharCode(32));

                if (this.SentenceHasNoSpaces(indexOfFirstSpace)) {
                    return this._handleSentenceWithNoSpacesChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                }

                var firstWord = rawSentenceAllCaps.substr(0, ((indexOfFirstSpace + 1) | 0));

                if (Bridge.referenceEquals(firstWord, Proposition.Parts.PropositionText.QuantifierAll)) {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.All;
                    proposition.Proposition$IProposition$QuantifierText = Proposition.Parts.PropositionText.QuantifierAllCamelCase;
                    factoryData.QuantifierTextOffset = 4;
                } else if (Bridge.referenceEquals(firstWord, Proposition.Parts.PropositionText.QuantifierSome)) {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.Some;
                    proposition.Proposition$IProposition$QuantifierText = Proposition.Parts.PropositionText.QuantifierSomeCamelCase;
                    factoryData.QuantifierTextOffset = 5;
                } else if (Bridge.referenceEquals(firstWord, Proposition.Parts.PropositionText.QuantifierNo)) {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.No;
                    proposition.Proposition$IProposition$QuantifierText = Proposition.Parts.PropositionText.QuantifierNoCamelCase;
                    factoryData.QuantifierTextOffset = 3;
                } else {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.None;
                    proposition.Proposition$IProposition$QuantifierText = null;
                    factoryData.QuantifierTextOffset = 0;
                }

                return this._nextPhaseChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            },
            SentenceHasNoSpaces: function (indexOfFirstSpace) {
                return indexOfFirstSpace === -1;
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DeriveSubjectChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                proposition.Proposition$IProposition$SubjectText = this.GetTextBetweenQuantifierAndCopula(System.String.trimStart(proposition.Proposition$IProposition$RawSentence), factoryData.QuantifierTextOffset, factoryData.CopulaText);
                return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            },
            GetTextBetweenQuantifierAndCopula: function (rawSentence, quantifierTextOffset, copulaText) {
                var subjectTextStartIndex = quantifierTextOffset;
                var subjectTextEndIndex = System.String.indexOf(rawSentence.toUpperCase(), copulaText);
                var subjectTextLength = (subjectTextEndIndex - quantifierTextOffset) | 0;
                if (subjectTextLength > -1) {
                    return rawSentence.substr(subjectTextStartIndex, subjectTextLength).trim();
                } else {
                    return "";
                }
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.DeriveSyntaxValidityChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                if (proposition.Proposition$IProposition$Copula === Proposition.Parts.Copula.None || proposition.Proposition$IProposition$Quantifier === Proposition.Parts.Quantifier.None || Bridge.referenceEquals(proposition.Proposition$IProposition$SubjectText, "") || Bridge.referenceEquals(proposition.Proposition$IProposition$PredicateText, "")) {
                    proposition.Proposition$IProposition$IsSyntaxValid = false;
                } else {
                    proposition.Proposition$IProposition$IsSyntaxValid = true;
                }

                return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.FinalCleanOfRawSentenceChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                proposition.Proposition$IProposition$RawSentence = proposition.Proposition$IProposition$RawSentence.trim();
                return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.HandleBlankPropositionChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                if (Bridge.referenceEquals(proposition.Proposition$IProposition$RawSentence, "")) {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.None;
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.None;
                    proposition.Proposition$IProposition$SubjectText = "";
                    proposition.Proposition$IProposition$PredicateText = "";
                    proposition.Proposition$IProposition$IsSyntaxValid = false;
                    proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.None;
                    return proposition;
                } else {
                    return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
                }
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.HandleSentenceWithNoSpacesChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        methods: {
            Process: function (proposition, factoryData) {
                var rawSentenceAllCaps = System.String.trimStart(proposition.Proposition$IProposition$RawSentence.toUpperCase());

                this.HandleQuantifier(proposition, rawSentenceAllCaps);
                this.HandleCopula(proposition, factoryData, rawSentenceAllCaps);
                proposition.Proposition$IProposition$SubjectText = "";
                proposition.Proposition$IProposition$PredicateText = "";
                proposition.Proposition$IProposition$IsSyntaxValid = false;
                proposition.Proposition$IProposition$Category = Proposition.Parts.PropositionCategory.None;
                return proposition;
            },
            HandleQuantifier: function (proposition, rawSentenceAllCaps) {
                if (Bridge.referenceEquals(rawSentenceAllCaps, Proposition.Parts.PropositionText.QuantifierAll.trim())) {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.All;
                    proposition.Proposition$IProposition$QuantifierText = Proposition.Parts.PropositionText.QuantifierAllCamelCase;
                } else if (Bridge.referenceEquals(rawSentenceAllCaps, Proposition.Parts.PropositionText.QuantifierSome.trim())) {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.Some;
                    proposition.Proposition$IProposition$QuantifierText = Proposition.Parts.PropositionText.QuantifierSomeCamelCase;
                } else if (Bridge.referenceEquals(rawSentenceAllCaps, Proposition.Parts.PropositionText.QuantifierNo.trim())) {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.No;
                    proposition.Proposition$IProposition$QuantifierText = Proposition.Parts.PropositionText.QuantifierNoCamelCase;
                } else {
                    proposition.Proposition$IProposition$Quantifier = Proposition.Parts.Quantifier.None;
                    proposition.Proposition$IProposition$QuantifierText = null;
                }
            },
            HandleCopula: function (proposition, factoryData, rawSentenceAllCaps) {
                if (Bridge.referenceEquals(rawSentenceAllCaps, "ARE")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Are;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaAre.toLowerCase();
                    factoryData.CopulaText = "ARE";
                } else if (Bridge.referenceEquals(rawSentenceAllCaps, "IS")) {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.Is;
                    proposition.Proposition$IProposition$CopulaText = Proposition.Parts.PropositionText.CopulaIs.toLowerCase();
                    factoryData.CopulaText = "IS";
                } else {
                    proposition.Proposition$IProposition$Copula = Proposition.Parts.Copula.None;
                    proposition.Proposition$IProposition$CopulaText = null;
                    factoryData.CopulaText = "";
                }
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.InitialCleanOfRawSentenceChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (proposition, factoryData) {
                proposition.Proposition$IProposition$RawSentence = Proposition.Utilities.StringCleaner.RemoveUndesirableCharacters(proposition.Proposition$IProposition$RawSentence);
                return this._nextChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(proposition, factoryData);
            }
        }
    });

    Bridge.define("Proposition.Factory.Chains.TerminatingChain", {
        inherits: [Proposition.Factory.Chains.IPropositionFactoryChain],
        alias: ["Process", "Proposition$Factory$Chains$IPropositionFactoryChain$Process"],
        methods: {
            Process: function (proposition, factoryData) {
                return proposition;
            }
        }
    });

    Bridge.define("Proposition.Factory.PropositionFactory", {
        inherits: [Proposition.Factory.IPropositionFactory],
        statics: {
            methods: {
                SetupCopulaChain: function (nextPhaseChain) {
                    var deriveCopulaChainWhenItsInTheMiddle = new Proposition.Factory.Chains.DeriveCopula.DeriveCopulaChainWhenItsInTheMiddle(nextPhaseChain);
                    var deriveCopulaChainWhenItsTheLastCharacters = new Proposition.Factory.Chains.DeriveCopula.DeriveCopulaChainWhenItsTheLastCharacters(deriveCopulaChainWhenItsInTheMiddle, nextPhaseChain);
                    var deriveCopulaChainWhenItsTheFirstCharacters = new Proposition.Factory.Chains.DeriveCopula.DeriveCopulaChainWhenItsTheFirstCharacters(deriveCopulaChainWhenItsTheLastCharacters, nextPhaseChain);
                    return deriveCopulaChainWhenItsTheFirstCharacters;
                }
            }
        },
        fields: {
            _propositionCreationChain: null
        },
        alias: [
            "Create", "Proposition$Factory$IPropositionFactory$Create",
            "CreateDefaultHumanityProposition1", "Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition1",
            "CreateDefaultHumanityProposition2", "Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition2",
            "CreateDefaultHumanityProposition3", "Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition3",
            "CreateDefaultHumanityProposition4", "Proposition$Factory$IPropositionFactory$CreateDefaultHumanityProposition4",
            "CreateDefaultGospelProposition1", "Proposition$Factory$IPropositionFactory$CreateDefaultGospelProposition1",
            "CreateDefaultGospelProposition2", "Proposition$Factory$IPropositionFactory$CreateDefaultGospelProposition2",
            "CreateDefaultGospelProposition3", "Proposition$Factory$IPropositionFactory$CreateDefaultGospelProposition3"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._propositionCreationChain = this.SetupChainOfResponsibilityForPropositionCreation();
            }
        },
        methods: {
            SetupChainOfResponsibilityForPropositionCreation: function () {
                var terminatingChain = new Proposition.Factory.Chains.TerminatingChain();
                var finalCleanOfRawSentenceChain = new Proposition.Factory.Chains.FinalCleanOfRawSentenceChain(terminatingChain);
                var deriveCategoryChain = new Proposition.Factory.Chains.DeriveCategoryChain(finalCleanOfRawSentenceChain);
                var deriveSyntaxValidityChain = new Proposition.Factory.Chains.DeriveSyntaxValidityChain(deriveCategoryChain);
                var derivePredicateChain = new Proposition.Factory.Chains.DerivePredicateChain(deriveSyntaxValidityChain);
                var deriveSubjectChain = new Proposition.Factory.Chains.DeriveSubjectChain(derivePredicateChain);
                var deriveCopulaChain = Proposition.Factory.PropositionFactory.SetupCopulaChain(deriveSubjectChain);
                var deriveQuantifierChain = new Proposition.Factory.Chains.DeriveQuantifierChain(deriveCopulaChain, new Proposition.Factory.Chains.HandleSentenceWithNoSpacesChain());
                var initialCleanOfRawSentenceChain = new Proposition.Factory.Chains.InitialCleanOfRawSentenceChain(deriveQuantifierChain);
                return new Proposition.Factory.Chains.HandleBlankPropositionChain(initialCleanOfRawSentenceChain);
            },
            Create: function (rawSentence, isPremise, assertThatItIs) {
                var $t;
                if (isPremise === void 0) { isPremise = true; }
                if (assertThatItIs === void 0) { assertThatItIs = true; }
                var newProposition = ($t = new Proposition.Proposition(), $t.RawSentence = rawSentence, $t.IsPremise = isPremise, $t.AssertThatItIs = assertThatItIs, $t);
                var factoryData = new Proposition.Factory.PropositionFactoryData();

                return this._propositionCreationChain.Proposition$Factory$Chains$IPropositionFactoryChain$Process(newProposition, factoryData);
            },
            CreateDefaultHumanityProposition1: function () {
                return this.Create("All men are mortal");
            },
            CreateDefaultHumanityProposition2: function () {
                return this.Create("Socrates being a man");
            },
            CreateDefaultHumanityProposition3: function () {
                return this.Create("Socrates is mortal", false, true);
            },
            CreateDefaultHumanityProposition4: function () {
                return this.Create("All Socrates is God", false, false);
            },
            CreateDefaultGospelProposition1: function () {
                return this.Create("All men are sinners");
            },
            CreateDefaultGospelProposition2: function () {
                return this.Create("Jesus is a redeemer");
            },
            CreateDefaultGospelProposition3: function () {
                return this.Create("All who trust Jesus are saved");
            }
        }
    });

    Bridge.define("Proposition.Factory.PropositionFactoryData", {
        inherits: [Proposition.Factory.IPropositionFactoryData],
        fields: {
            CopulaText: null,
            QuantifierTextOffset: 0
        },
        alias: [
            "CopulaText", "Proposition$Factory$IPropositionFactoryData$CopulaText",
            "QuantifierTextOffset", "Proposition$Factory$IPropositionFactoryData$QuantifierTextOffset"
        ]
    });

    Bridge.define("Proposition.IProposition", {
        inherits: [Analyzable.IAnalyzableEntity],
        $kind: "interface"
    });

    Bridge.define("PropositionPropertiesVm.Factory.PropositionPropertiesViewModelFactory", {
        inherits: [PropositionPropertiesVm.Factory.IPropositionPropertiesViewModelFactory],
        alias: ["Create", "PropositionPropertiesVm$Factory$IPropositionPropertiesViewModelFactory$Create"],
        methods: {
            Create: function (selectedPropositionViewModel, propositionViewModelFactory, messenger) {
                return new PropositionPropertiesVm.PropositionPropertiesViewModel(selectedPropositionViewModel, propositionViewModelFactory, messenger);
            }
        }
    });

    Bridge.define("PropositionPropertiesVm.PropositionPropertiesViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,PropositionPropertiesVm.IPropositionPropertiesViewModel],
        fields: {
            _selectedPropositionViewModel: null,
            _allPropertiesVisible: false,
            _editablePropertiesVisible: false,
            _propositionViewModelFactory: null,
            _notFoundWithColor: null,
            _undeterminedWithColor: null
        },
        props: {
            SelectedPropositionViewModel: {
                get: function () {
                    if (this._selectedPropositionViewModel != null) {
                        return this._selectedPropositionViewModel;
                    } else {
                        return this._propositionViewModelFactory.PropositionVm$Factory$IPropositionViewModelFactory$CreateBlank();
                    }

                },
                set: function (value) {
                    this._selectedPropositionViewModel = value;
                    this.UpdatePropertiesVisibility();
                    this.FireOnPropertyChangedForAllProperties(Messaging.MessengerToken.SelectedPropositionChanged);
                }
            },
            IsPremise: {
                get: function () {
                    return this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$IsPremise;
                },
                set: function (value) {
                    this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$IsPremise = value;
                    this.OnPropertyChanged("IsPremise");
                    this.OnPropertyChanged("IsConclusion");
                }
            },
            IsConclusion: {
                get: function () {
                    return this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$IsConclusion;
                },
                set: function (value) {
                    this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$IsConclusion = value;
                    this.OnPropertyChanged("IsConclusion");
                    this.OnPropertyChanged("IsPremise");
                }
            },
            AssertThatItIs: {
                get: function () {
                    return this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$AssertThatItIs;
                },
                set: function (value) {
                    this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$AssertThatItIs = value;
                    this.OnPropertyChanged("AssertThatItIs");
                    this.OnPropertyChanged("InverseOfAssertThatItIs");
                }
            },
            InverseOfAssertThatItIs: {
                get: function () {
                    return !this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$AssertThatItIs;
                },
                set: function (value) {
                    this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$AssertThatItIs = !value;
                    this.OnPropertyChanged("AssertThatItIs");
                    this.OnPropertyChanged("InverseOfAssertThatItIs");
                }
            },
            QuantifierText: {
                get: function () {
                    if (this.SelectedPropositionViewModel.Items$IItem$IsInEditMode) {
                        return Proposition.Parts.PropositionText.Tbd;
                    }

                    if (this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$QuantifierText == null) {
                        return this._notFoundWithColor;
                    }

                    return this.GetQuantifierTextWithoutExtraSpaces();
                }
            },
            SubjectText: {
                get: function () {
                    if (this.SelectedPropositionViewModel.Items$IItem$IsInEditMode) {
                        return Proposition.Parts.PropositionText.Tbd;
                    }

                    if (Bridge.referenceEquals(this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$SubjectText, "") || this.SubjectTextOnlyContainWhiteSpaces()) {
                        return this._notFoundWithColor;
                    }

                    return this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$SubjectText;
                }
            },
            CopulaText: {
                get: function () {
                    if (this.SelectedPropositionViewModel.Items$IItem$IsInEditMode) {
                        return Proposition.Parts.PropositionText.Tbd;
                    }

                    if (this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$CopulaText == null) {
                        return this._notFoundWithColor;
                    }

                    return this.GetCopulaTextWithoutExtraSpaces();
                }
            },
            PredicateText: {
                get: function () {
                    if (this.SelectedPropositionViewModel.Items$IItem$IsInEditMode) {
                        return Proposition.Parts.PropositionText.Tbd;
                    }

                    if (Bridge.referenceEquals(this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$PredicateText, "") || this.PredicateTextContainsOnlyWhiteSpaces()) {
                        return this._notFoundWithColor;
                    }
                    return this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$PredicateText;
                }
            },
            Category: {
                get: function () {
                    if (this.SelectedPropositionViewModel.Items$IItem$IsInEditMode) {
                        return Proposition.Parts.PropositionText.Tbd;
                    }

                    if (this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$IsSyntaxValid) {
                        return Proposition.Utilities.CategoryStringTranslator.GetString(this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$Category);
                    }

                    return this._undeterminedWithColor;
                }
            },
            EditablePropertiesVisible: {
                get: function () {
                    return this._editablePropertiesVisible;
                },
                set: function (value) {
                    this._editablePropertiesVisible = value;
                    this.OnPropertyChanged("EditablePropertiesVisible");
                }
            },
            AllPropertiesVisible: {
                get: function () {
                    return this._allPropertiesVisible;
                }
            }
        },
        alias: [
            "SelectedPropositionViewModel", "PropositionPropertiesVm$IPropositionPropertiesViewModel$SelectedPropositionViewModel",
            "IsPremise", "PropositionPropertiesVm$IPropositionPropertiesViewModel$IsPremise",
            "IsConclusion", "PropositionPropertiesVm$IPropositionPropertiesViewModel$IsConclusion",
            "AssertThatItIs", "PropositionPropertiesVm$IPropositionPropertiesViewModel$AssertThatItIs",
            "InverseOfAssertThatItIs", "PropositionPropertiesVm$IPropositionPropertiesViewModel$InverseOfAssertThatItIs",
            "QuantifierText", "PropositionPropertiesVm$IPropositionPropertiesViewModel$QuantifierText",
            "SubjectText", "PropositionPropertiesVm$IPropositionPropertiesViewModel$SubjectText",
            "CopulaText", "PropositionPropertiesVm$IPropositionPropertiesViewModel$CopulaText",
            "PredicateText", "PropositionPropertiesVm$IPropositionPropertiesViewModel$PredicateText",
            "Category", "PropositionPropertiesVm$IPropositionPropertiesViewModel$Category",
            "EditablePropertiesVisible", "PropositionPropertiesVm$IPropositionPropertiesViewModel$EditablePropertiesVisible",
            "AllPropertiesVisible", "PropositionPropertiesVm$IPropositionPropertiesViewModel$AllPropertiesVisible"
        ],
        ctors: {
            init: function () {
                this._notFoundWithColor = (SocraLogicHtml5.Common.ColorDepot.GetRedTag() || "") + (Proposition.Parts.PropositionText.NotFound || "") + (SocraLogicHtml5.Common.ColorDepot.GetEndColorTag() || "");
                this._undeterminedWithColor = (SocraLogicHtml5.Common.ColorDepot.GetRedTag() || "") + (Proposition.Parts.PropositionText.Undetermined || "") + (SocraLogicHtml5.Common.ColorDepot.GetEndColorTag() || "");
            },
            ctor: function (selectedPropositionViewModel, propositionViewModelFactory, messenger) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._propositionViewModelFactory = propositionViewModelFactory;
                this.SelectedPropositionViewModel = selectedPropositionViewModel;
                this._editablePropertiesVisible = true;
                messenger.Messaging$IMessenger$Register(this, Bridge.box(Messaging.MessengerToken.SelectedPropositionChanged, Messaging.MessengerToken, System.Enum.toStringFn(Messaging.MessengerToken)), Bridge.fn.cacheBind(this, this.FireOnPropertyChangedForAllProperties));
            }
        },
        methods: {
            FireOnPropertyChangedForAllProperties: function (messengerToken) {
                this.OnPropertyChanged("IsPremise");
                this.OnPropertyChanged("IsConclusion");
                this.OnPropertyChanged("AssertThatItIs");
                this.OnPropertyChanged("InverseOfAssertThatItIs");
                this.OnPropertyChanged("CopulaText");
                this.OnPropertyChanged("SubjectText");
                this.OnPropertyChanged("PredicateText");
                this.OnPropertyChanged("QuantifierText");
                this.OnPropertyChanged("Category");
                this.OnPropertyChanged("AllPropertiesVisible");
            },
            UpdatePropertiesVisibility: function () {
                if (this._selectedPropositionViewModel == null) {
                    this._allPropertiesVisible = false;
                } else {
                    this._allPropertiesVisible = true;
                }
            },
            GetQuantifierTextWithoutExtraSpaces: function () {
                return System.String.replaceAll(System.String.replaceAll(this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$QuantifierText, "] ", "]"), " [", "[").trim();
            },
            SubjectTextOnlyContainWhiteSpaces: function () {
                return this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$SubjectText.trim().length === 0;
            },
            GetCopulaTextWithoutExtraSpaces: function () {
                return System.String.replaceAll(System.String.replaceAll(this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$CopulaText, "] ", "]"), " [", "[").trim();
            },
            PredicateTextContainsOnlyWhiteSpaces: function () {
                return this.SelectedPropositionViewModel.PropositionVm$IPropositionViewModel$PredicateText.trim().length === 0;
            }
        }
    });

    Bridge.define("PropositionVm.Factory.PropositionViewModelFactory", {
        inherits: [PropositionVm.Factory.IPropositionViewModelFactory],
        fields: {
            _propositionFactory: null,
            _appearanceManagerWrapper: null,
            _messenger: null
        },
        alias: [
            "CreateBlank", "PropositionVm$Factory$IPropositionViewModelFactory$CreateBlank",
            "Create", "PropositionVm$Factory$IPropositionViewModelFactory$Create",
            "CreateCollection", "PropositionVm$Factory$IPropositionViewModelFactory$CreateCollection"
        ],
        ctors: {
            ctor: function (propositionFactory, appearanceManagerWrapper, messenger) {
                this.$initialize();
                this._propositionFactory = propositionFactory;
                this._appearanceManagerWrapper = appearanceManagerWrapper;
                this._messenger = messenger;
            }
        },
        methods: {
            CreateBlank: function () {
                return new PropositionVm.PropositionViewModel(this._propositionFactory.Proposition$Factory$IPropositionFactory$Create("", true, true), this._propositionFactory, this._messenger, this._appearanceManagerWrapper);
            },
            Create: function (proposition) {
                return new PropositionVm.PropositionViewModel(proposition, this._propositionFactory, this._messenger, this._appearanceManagerWrapper);
            },
            CreateCollection: function (propositions) {
                var $t;
                var propositionViewModels = new (System.Collections.ObjectModel.ObservableCollection$1(PropositionVm.IPropositionViewModel)).ctor();

                $t = Bridge.getEnumerator(propositions);
                try {
                    while ($t.moveNext()) {
                        var proposition = $t.Current;
                        var propositionViewModel = this.Create(proposition);
                        propositionViewModels.add(propositionViewModel);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return propositionViewModels;
            }
        }
    });

    Bridge.define("PropositionVm.IPropositionViewModel", {
        inherits: [Items.IItem],
        $kind: "interface"
    });

    Bridge.define("SocraLogicHtml5.AppearanceManagerWrapper.AppearanceManagerWrapperHtml5NullObject", {
        inherits: [AppearanceManager.IAppearanceManagerWrapper],
        events: {
            PropertyChanged: null
        },
        alias: [
            "addPropertyChanged", "AppearanceManager$IAppearanceManagerWrapper$addPropertyChanged",
            "removePropertyChanged", "AppearanceManager$IAppearanceManagerWrapper$removePropertyChanged",
            "GetCurrentAccentColor", "AppearanceManager$IAppearanceManagerWrapper$GetCurrentAccentColor",
            "GetCurrentFontSize", "AppearanceManager$IAppearanceManagerWrapper$GetCurrentFontSize",
            "GetCurrentThemeSource", "AppearanceManager$IAppearanceManagerWrapper$GetCurrentThemeSource",
            "GetDarkThemeSource", "AppearanceManager$IAppearanceManagerWrapper$GetDarkThemeSource",
            "GetLightThemeSource", "AppearanceManager$IAppearanceManagerWrapper$GetLightThemeSource",
            "SetCurrentAccentColor", "AppearanceManager$IAppearanceManagerWrapper$SetCurrentAccentColor",
            "SetCurrentFontSize", "AppearanceManager$IAppearanceManagerWrapper$SetCurrentFontSize",
            "SetCurrentThemeSource", "AppearanceManager$IAppearanceManagerWrapper$SetCurrentThemeSource"
        ],
        methods: {
            GetCurrentAccentColor: function () {
                return new Windows.UI.Color();
            },
            GetCurrentFontSize: function () {
                return SocraLogicHtml5.AppearanceManagerWrapper.FontSize.Large;
            },
            GetCurrentThemeSource: function () {
                return null;
            },
            GetDarkThemeSource: function () {
                return null;
            },
            GetLightThemeSource: function () {
                return null;
            },
            SetCurrentAccentColor: function (color) { },
            SetCurrentFontSize: function (fontSize) { },
            SetCurrentThemeSource: function (themeSource) { }
        }
    });

    Bridge.define("SocraLogicHtml5.Messenger.MessengerHtml5NullObject", {
        inherits: [Messaging.IMessenger],
        alias: [
            "Register", "Messaging$IMessenger$Register",
            "Send", "Messaging$IMessenger$Send"
        ],
        methods: {
            Register: function (recipient, token, action) { },
            Send: function (messengerToken) { }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Factory.Production.ProductionHtml5TutorialViewModelFactory", {
        inherits: [TutorialVm.Factory.Production.ProductionTutorialViewModelFactory],
        methods: {
            CreateProductionAppearanceManager: function () {
                this.AppearanceManagerWrapper = new SocraLogicHtml5.AppearanceManagerWrapper.AppearanceManagerWrapperHtml5NullObject();
            },
            CreateProductionMessenger: function () {
                this.Messenger = new SocraLogicHtml5.Messenger.MessengerHtml5NullObject();
            },
            CreateProductionPersistenceData: function (filePath) {
                this.LoadDeserializedDataIntoSteps = new TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedHtml5DataIntoSteps();
                this.FileReader = new SocraLogicHtml5.Pages.Tutorials.Factory.TutorialDeserializer.FileReader.IsolatedStorageSettingsReaderHtml5();
                this.TutorialDeserializer = new SocraLogicHtml5.Pages.Tutorials.Factory.TutorialDeserializer.Html5XmlToTutorialDataObjectHtml5Deserializer(filePath, this.FileReader);
                this.PersistTutorialVisitor = new TutorialVm.Visitors.PersistTutorial.Xml.PersistTutorialToXmlVisitor(new TutorialVm.Visitors.PersistTutorial.DataObjectFactory.TutorialDataObjectFactoryHtml5(), new SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.TutorialXmlSerializer.TutorialXmlSerializerHtml5(), new SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.XmlFileSaver.IsolatedStorageSettingSaverHtml5(), filePath);
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Factory.TutorialDeserializer.FileReader.IsolatedStorageFileReaderHtml5", {
        inherits: [FilePersistence.File.FileReader.IFileReader],
        alias: [
            "Exists", "FilePersistence$File$FileReader$IFileReader$Exists",
            "Read", "FilePersistence$File$FileReader$IFileReader$Read"
        ],
        methods: {
            Exists: function (filePath) {
                var storage = System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly();
                try {
                    return storage.FileExists(filePath);
                }
                finally {
                    if (Bridge.hasValue(storage)) {
                        storage.System$IDisposable$Dispose();
                    }
                }
            },
            Read: function (filePath) {
                var contents = "";
                var storage = System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly();
                try {
                    var fileStream = storage.OpenFile(filePath, 3);
                    try {
                        if (fileStream != null) {
                            var streamReader = new System.IO.StreamReader.$ctor1(fileStream);
                            try {
                                contents = streamReader.ReadToEnd();
                            }
                            finally {
                                if (Bridge.hasValue(streamReader)) {
                                    streamReader.System$IDisposable$Dispose();
                                }
                            }
                        } else {
                            Windows.UI.Xaml.MessageBox.Show("Unable to load the file SampleFile.txt from the storage.");
                        }

                    }
                    finally {
                        if (Bridge.hasValue(fileStream)) {
                            fileStream.System$IDisposable$Dispose();
                        }
                    }
                }
                finally {
                    if (Bridge.hasValue(storage)) {
                        storage.System$IDisposable$Dispose();
                    }
                }
                return contents;
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Factory.TutorialDeserializer.FileReader.IsolatedStorageSettingsReaderHtml5", {
        inherits: [FilePersistence.File.FileReader.IFileReader],
        alias: [
            "Exists", "FilePersistence$File$FileReader$IFileReader$Exists",
            "Read", "FilePersistence$File$FileReader$IFileReader$Read"
        ],
        methods: {
            Exists: function (filePath) {
                return System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings.Contains(filePath);
            },
            Read: function (filePath) {
                var contents = { v : "" };
                System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings.TryGetValue(System.String, filePath, contents);
                return contents.v;
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Factory.TutorialDeserializer.Html5XmlToTutorialDataObjectHtml5Deserializer", {
        inherits: [TutorialPersistence.Deserializer.ITutorialDeserializer],
        fields: {
            _fileReader: null,
            _filePath: null
        },
        alias: ["Deserialize", "TutorialPersistence$Deserializer$ITutorialDeserializer$Deserialize"],
        ctors: {
            ctor: function (filePath, fileReader) {
                this.$initialize();
                this._fileReader = fileReader;
                this._filePath = filePath;
            }
        },
        methods: {
            Deserialize: function () {
                return this.Deserialize$1(this._fileReader.FilePersistence$File$FileReader$IFileReader$Read(this._filePath));
            },
            Deserialize$1: function (serializedXml) {
                var dataContractSerializer = new System.Runtime.Serialization.DataContractSerializer.ctor(TutorialPersistence.DataObject.TutorialDataObjectHtml5);
                return Bridge.cast(dataContractSerializer.DeserializeFromString(serializedXml), TutorialPersistence.DataObject.TutorialDataObjectHtml5);
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.TutorialXmlSerializer.TutorialXmlSerializerHtml5", {
        inherits: [TutorialPersistence.Serializers.Xml.TutorialXmlSerializer.ITutorialXmlSerializer],
        alias: ["Serialize", "TutorialPersistence$Serializers$Xml$TutorialXmlSerializer$ITutorialXmlSerializer$Serialize"],
        methods: {
            Serialize: function (tutorialXmlData) {
                var dataContractSerializer = new System.Runtime.Serialization.DataContractSerializer.ctor(TutorialPersistence.DataObject.TutorialDataObjectHtml5);
                return dataContractSerializer.SerializeToString(tutorialXmlData);
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.XmlFileSaver.IsolatedStorageFileSaverHtml5", {
        inherits: [TutorialPersistence.Serializers.Xml.XmlFileSaver.ITutorialFileSaver],
        alias: ["Save", "TutorialPersistence$Serializers$Xml$XmlFileSaver$ITutorialFileSaver$Save"],
        methods: {
            Save: function (contents, filename) {
                var $t;
                var storage = System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly();
                try {
                    var fs = null;
                    $t = (fs = storage.CreateFile(filename));
                    try {
                        if (fs != null) {
                            var encoding = new System.Text.UTF8Encoding.ctor();
                            var bytes = encoding.GetBytes$2(contents);
                            fs.Write(bytes, 0, bytes.length);
                            fs.Close();
                        } else {
                            Windows.UI.Xaml.MessageBox.Show("Unable to save the file" + (filename || "") + " to the storage.");
                        }
                    }
                    finally {
                        if (Bridge.hasValue($t)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
                finally {
                    if (Bridge.hasValue(storage)) {
                        storage.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.XmlFileSaver.IsolatedStorageSettingSaverHtml5", {
        inherits: [TutorialPersistence.Serializers.Xml.XmlFileSaver.ITutorialFileSaver],
        alias: ["Save", "TutorialPersistence$Serializers$Xml$XmlFileSaver$ITutorialFileSaver$Save"],
        methods: {
            Save: function (contents, filename) {
                System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings.setItem(filename, contents);
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.XmlFileSaver.TutorialXmlFileDownloaderHtml5", {
        inherits: [TutorialPersistence.Serializers.Xml.XmlFileSaver.ITutorialFileSaver],
        alias: ["Save", "TutorialPersistence$Serializers$Xml$XmlFileSaver$ITutorialFileSaver$Save"],
        methods: {
            Save: function (contents, filename) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = CSHTML5.Extensions.FileSystem.FileSaver.SaveTextToFile(contents, filename);
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Pages.Tutorials.Visitors.PersistTutorial.Xml.XmlFileSaver.TutorialXmlFileSaverHtml5Mock", {
        inherits: [TutorialPersistence.Serializers.Xml.XmlFileSaver.ITutorialFileSaver],
        fields: {
            _contents: null,
            _filename: null,
            _saveCalledCounter: 0
        },
        props: {
            NumberOfTimesSaveWasCalled: {
                get: function () {
                    return this._saveCalledCounter;
                }
            },
            FileNamePassedInOnLastSave: {
                get: function () {
                    return this._filename;
                }
            },
            ContentsPassedInOnLastSave: {
                get: function () {
                    return this._contents;
                }
            }
        },
        alias: ["Save", "TutorialPersistence$Serializers$Xml$XmlFileSaver$ITutorialFileSaver$Save"],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._saveCalledCounter = 0;
                this._contents = "n/a";
                this._filename = "n/a";
            }
        },
        methods: {
            Save: function (contents, filename) {
                this._contents = contents;
                this._filename = filename;
                this._saveCalledCounter = (this._saveCalledCounter + 1) | 0;
            }
        }
    });

    Bridge.define("SocraLogicHtml5.Substitute.Substituter", {
        inherits: [TutorialVm.Substitute.ISubstituter],
        alias: [
            "GetTutorialViewModelSubstitute", "TutorialVm$Substitute$ISubstituter$GetTutorialViewModelSubstitute",
            "GetTutorialStepViewModelPartialSubstitute", "TutorialVm$Substitute$ISubstituter$GetTutorialStepViewModelPartialSubstitute",
            "GetTutorialViewModelPartialSubstitute", "TutorialVm$Substitute$ISubstituter$GetTutorialViewModelPartialSubstitute"
        ],
        methods: {
            GetTutorialViewModelSubstitute: function () {
                return new TutorialVm.TutorialViewModel(new TutorialVm.Data.TutorialViewModelData());
            },
            GetTutorialStepViewModelPartialSubstitute: function (stepVMData, messenger) {
                return new TutorialVm.TutorialStep.TutorialStepViewModel(stepVMData.$clone(), messenger);
            },
            GetTutorialViewModelPartialSubstitute: function (tutorialViewModelData) {
                return new TutorialVm.TutorialViewModel(tutorialViewModelData);
            }
        }
    });

    Bridge.define("Term.Factory.TermFactory", {
        inherits: [Term.Factory.ITermFactory],
        alias: ["CreateUnanalyzedTermsAndAddToTermsCollection", "Term$Factory$ITermFactory$CreateUnanalyzedTermsAndAddToTermsCollection"],
        methods: {
            CreateUnanalyzedTermsAndAddToTermsCollection: function (argument, unAnalyzedTermsCollection, initialTermEquivalenceMapping) {
                var $t;
                $t = Bridge.getEnumerator(argument.Argument$IArgument$Propositions);
                try {
                    while ($t.moveNext()) {
                        var proposition = $t.Current;
                        this.AddSubjectAndPredicateTermsToCollectionIfNeeded(unAnalyzedTermsCollection, proposition);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this.TransferEquivalencesToUnanalyzedTermCollection(unAnalyzedTermsCollection, initialTermEquivalenceMapping);
            },
            AddSubjectAndPredicateTermsToCollectionIfNeeded: function (unAnalyzedTermsCollection, proposition) {
                this.AddTermIfNotAlreadyInCollection(unAnalyzedTermsCollection, proposition.Proposition$IProposition$GetCleanedTermNameFromSubjectText());

                this.AddTermIfNotAlreadyInCollection(unAnalyzedTermsCollection, proposition.Proposition$IProposition$GetCleanedTermNameFromPredicateText());
            },
            AddTermIfNotAlreadyInCollection: function (unAnalyzedTermsCollection, potentialNewTermName) {
                if (this.CollectionDoesNotHaveThisTerm(unAnalyzedTermsCollection, potentialNewTermName)) {
                    unAnalyzedTermsCollection.add(new Term.Term(potentialNewTermName));
                }
            },
            CollectionDoesNotHaveThisTerm: function (unAnalyzedTermsCollection, potentialNewTermName) {
                return System.Linq.Enumerable.from(unAnalyzedTermsCollection).count(function (x) {
                        return Bridge.referenceEquals(x.Term$ITerm$Name, potentialNewTermName);
                    }) === 0;

            },
            CollectionDoesHaveThisTerm: function (unAnalyzedTermsCollection, potentialNewTermName) {
                return System.Linq.Enumerable.from(unAnalyzedTermsCollection).count(function (x) {
                        return Bridge.referenceEquals(x.Term$ITerm$Name, potentialNewTermName);
                    }) > 0;
            },
            TransferEquivalencesToUnanalyzedTermCollection: function (unAnalyzedTermsCollection, initialTermEquivalenceMapping) {
                var $t;
                $t = Bridge.getEnumerator(initialTermEquivalenceMapping);
                try {
                    while ($t.moveNext()) {
                        var mappingTerm = $t.Current;
                        if (this.CollectionDoesHaveThisTerm(unAnalyzedTermsCollection, mappingTerm.Term$ITerm$Name)) {
                            this.TransferEquivalances(unAnalyzedTermsCollection, mappingTerm);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            TransferEquivalances: function (unAnalyzedTermsCollection, mappingTerm) {
                var $t;
                $t = Bridge.getEnumerator(mappingTerm.Term$ITerm$EquivalentTermCollection);
                try {
                    while ($t.moveNext()) {
                        var equivelantTerm = $t.Current;
                        var unAnalyzedTerm = this.AddEquivalentTermToUnanalyzedTermsEquivalenceCollection(unAnalyzedTermsCollection, mappingTerm, equivelantTerm);

                        this.AddUnanalyzedTermToEquivalentTermsEquivalenceCollection(unAnalyzedTermsCollection, equivelantTerm, unAnalyzedTerm);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            AddEquivalentTermToUnanalyzedTermsEquivalenceCollection: function (unAnalyzedTermsCollection, mappingTerm, equivelantTerm) {
                var unAnalyzedTerm = System.Linq.Enumerable.from(unAnalyzedTermsCollection).first(function (x) {
                        return Bridge.referenceEquals(x.Term$ITerm$Name, mappingTerm.Term$ITerm$Name);
                    });
                unAnalyzedTerm.Term$ITerm$EquivalentTermCollection.add(equivelantTerm);
                return unAnalyzedTerm;
            },
            AddUnanalyzedTermToEquivalentTermsEquivalenceCollection: function (unAnalyzedTermsCollection, equivelantTerm, unAnalyzedTerm) {
                var unAnalyzedTermThatMatchesEquivalentTerm = System.Linq.Enumerable.from(unAnalyzedTermsCollection).first(function (x) {
                        return Bridge.referenceEquals(x.Term$ITerm$Name, equivelantTerm.Term$ITerm$Name);
                    });
                unAnalyzedTermThatMatchesEquivalentTerm.Term$ITerm$EquivalentTermCollection.add(unAnalyzedTerm);
            }
        }
    });

    Bridge.define("Term.Term", {
        inherits: [Term.ITerm],
        fields: {
            UniversalAffirmativePropertyCollection: null,
            ParticularAffirmativePropertyCollection: null,
            UniversalNegativePropertyCollection: null,
            ParticularNegativePropertyCollection: null,
            EquivalentTermCollection: null,
            FailsToBeUniversalAffirmativePropertyCollection: null,
            FailsToBeParticularAffirmativePropertyCollection: null,
            FailsToBeUniversalNegativePropertyCollection: null,
            FailsToBeParticularNegativePropertyCollection: null,
            OriginatingPropostion: null,
            Name: null
        },
        alias: [
            "UniversalAffirmativePropertyCollection", "Term$ITerm$UniversalAffirmativePropertyCollection",
            "ParticularAffirmativePropertyCollection", "Term$ITerm$ParticularAffirmativePropertyCollection",
            "UniversalNegativePropertyCollection", "Term$ITerm$UniversalNegativePropertyCollection",
            "ParticularNegativePropertyCollection", "Term$ITerm$ParticularNegativePropertyCollection",
            "EquivalentTermCollection", "Term$ITerm$EquivalentTermCollection",
            "FailsToBeUniversalAffirmativePropertyCollection", "Term$ITerm$FailsToBeUniversalAffirmativePropertyCollection",
            "FailsToBeParticularAffirmativePropertyCollection", "Term$ITerm$FailsToBeParticularAffirmativePropertyCollection",
            "FailsToBeUniversalNegativePropertyCollection", "Term$ITerm$FailsToBeUniversalNegativePropertyCollection",
            "FailsToBeParticularNegativePropertyCollection", "Term$ITerm$FailsToBeParticularNegativePropertyCollection",
            "OriginatingPropostion", "Term$ITerm$OriginatingPropostion",
            "Name", "Term$ITerm$Name",
            "SetOriginatingPropostion", "Term$ITerm$SetOriginatingPropostion",
            "GetMatchingPropertyNameFromCollection", "Term$ITerm$GetMatchingPropertyNameFromCollection",
            "PropertyIsInThisCollection", "Term$ITerm$PropertyIsInThisCollection"
        ],
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.Name = name;
                this.UniversalAffirmativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.ParticularAffirmativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.UniversalNegativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.ParticularNegativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.FailsToBeUniversalAffirmativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.FailsToBeParticularAffirmativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.FailsToBeUniversalNegativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.FailsToBeParticularNegativePropertyCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
                this.EquivalentTermCollection = new (System.Collections.ObjectModel.Collection$1(Term.ITerm)).ctor();
            }
        },
        methods: {
            SetOriginatingPropostion: function (propositionRawSentence, parentArgumentName, parentWorldviewName) {
                this.OriginatingPropostion = "'" + (propositionRawSentence || "") + "' in the '" + (parentArgumentName || "") + "' argument in the '" + (parentWorldviewName || "") + "' Worldview";
            },
            GetMatchingPropertyNameFromCollection: function (property, collection) {
                return System.Linq.Enumerable.from(collection).first(function (x) {
                        return Bridge.referenceEquals(x.Term$ITerm$Name, property.Term$ITerm$Name);
                    }).Term$ITerm$Name;
            },
            PropertyIsInThisCollection: function (property, propertyCollection) {
                return System.Linq.Enumerable.from(propertyCollection).count(function (x) {
                        return Bridge.referenceEquals(x.Term$ITerm$Name, property.Term$ITerm$Name);
                    }) > 0;
            }
        }
    });

    Bridge.define("Tutorial.Dictionaries.TutorialDictionaryFactory", {
        inherits: [Tutorial.Dictionaries.ITutorialDictionaryFactory],
        statics: {
            fields: {
                CategoricalLogicTutorialName: null,
                TranslationTutorialName: null,
                ImmediateDeductionsTutorialName: null,
                RelationsBetweenPropositionsTutorialName: null,
                SyllogismsTutorialName: null
            },
            ctors: {
                init: function () {
                    this.CategoricalLogicTutorialName = "Categorical Logic Syntax Tutorial";
                    this.TranslationTutorialName = "Translating into Categorical Propositions Tutorial";
                    this.ImmediateDeductionsTutorialName = "Immediate Deductions Tutorial";
                    this.RelationsBetweenPropositionsTutorialName = "Relations Between Propositions Tutorial";
                    this.SyllogismsTutorialName = "Syllogisms Tutorial";
                }
            }
        },
        fields: {
            _tutorialName: null,
            _tutorialSteps: null,
            _tutorialStepQuestionNumberGenerator: null,
            _tutorialStepQuestionNumbers: null,
            _tutorialStepNameCollection: null,
            _tutorialNameToBlankNewTutorialDictionary: null,
            _tutorialNameToTutorialStepNameCollectionDictionary: null
        },
        alias: [
            "CreateTutorialNameToXmlFileNameDictionary", "Tutorial$Dictionaries$ITutorialDictionaryFactory$CreateTutorialNameToXmlFileNameDictionary",
            "CreateTutorialNameToTutorialStepNameCollectionDictionary", "Tutorial$Dictionaries$ITutorialDictionaryFactory$CreateTutorialNameToTutorialStepNameCollectionDictionary"
        ],
        methods: {
            CreateTutorialNameToXmlFileNameDictionary: function () {
                return function (_o1) {
                        _o1.add(Tutorial.Dictionaries.TutorialDictionaryFactory.CategoricalLogicTutorialName, "CategoricalLogicSyntaxTutorial.xml");
                        _o1.add(Tutorial.Dictionaries.TutorialDictionaryFactory.TranslationTutorialName, "TranslatingIntoCategoricalPropositionsTutorial.xml");
                        _o1.add(Tutorial.Dictionaries.TutorialDictionaryFactory.ImmediateDeductionsTutorialName, "ImmediateDeductionsTutorial.xml");
                        _o1.add(Tutorial.Dictionaries.TutorialDictionaryFactory.RelationsBetweenPropositionsTutorialName, "RelationsBetweenPropositionsTutorial.xml");
                        _o1.add(Tutorial.Dictionaries.TutorialDictionaryFactory.SyllogismsTutorialName, "SyllogismsTutorial.xml");
                        return _o1;
                    }(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor());
            },
            CreateTutorialNameToTutorialStepNameCollectionDictionary: function () {
                this.GetTutorialNameToBlankNewTutorialDictionary();
                this.DeriveTutorialNameToTutorialStepNameCollectionDictionary();

                return this._tutorialNameToTutorialStepNameCollectionDictionary;
            },
            GetTutorialNameToBlankNewTutorialDictionary: function () {
                this._tutorialNameToBlankNewTutorialDictionary = this.CreateTutorialNameToBlankNewTutorialDictionary();
            },
            CreateTutorialNameToBlankNewTutorialDictionary: function () {
                var dictionary = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.ObjectModel.Collection$1(Tutorial.TutorialStep.ITutorialStep))).ctor();
                dictionary.add(Tutorial.Dictionaries.TutorialDictionaryFactory.CategoricalLogicTutorialName, new Tutorial.Instances.CategoricalLogicSyntaxTutorialFactory().Create().Tutorial$ITutorial$Steps);
                dictionary.add(Tutorial.Dictionaries.TutorialDictionaryFactory.TranslationTutorialName, new Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory().Create().Tutorial$ITutorial$Steps);
                dictionary.add(Tutorial.Dictionaries.TutorialDictionaryFactory.ImmediateDeductionsTutorialName, new Tutorial.Instances.ImmediateDeductionsTutorialFactory().Create().Tutorial$ITutorial$Steps);
                dictionary.add(Tutorial.Dictionaries.TutorialDictionaryFactory.RelationsBetweenPropositionsTutorialName, new Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory().Create().Tutorial$ITutorial$Steps);
                dictionary.add(Tutorial.Dictionaries.TutorialDictionaryFactory.SyllogismsTutorialName, new Tutorial.Instances.SyllogismsTutorialFactory().Create().Tutorial$ITutorial$Steps);
                return dictionary;
            },
            DeriveTutorialNameToTutorialStepNameCollectionDictionary: function () {
                var $t;
                this._tutorialNameToTutorialStepNameCollectionDictionary = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.ObjectModel.Collection$1(System.String))).ctor();
                $t = Bridge.getEnumerator(this._tutorialNameToBlankNewTutorialDictionary);
                try {
                    while ($t.moveNext()) {
                        var entry = $t.Current;
                        this._tutorialName = entry.key;
                        this._tutorialSteps = entry.value;

                        this.DeriveTutorialStepQuestionNumbers();
                        this.DeriveTutorialStepNameCollection();
                        this._tutorialNameToTutorialStepNameCollectionDictionary.add(this._tutorialName, this._tutorialStepNameCollection);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            DeriveTutorialStepQuestionNumbers: function () {
                this._tutorialStepQuestionNumberGenerator = new Tutorial.TutorialStep.QuestionStep.StepNumberGenerator.QuestionNumberGenerator();
                this._tutorialStepQuestionNumbers = this._tutorialStepQuestionNumberGenerator.Tutorial$TutorialStep$QuestionStep$StepNumberGenerator$IQuestionNumberGenerator$Execute(this._tutorialSteps);
            },
            DeriveTutorialStepNameCollection: function () {
                this._tutorialStepNameCollection = new (System.Collections.ObjectModel.Collection$1(System.String)).ctor();
                for (var i = 0; i < this._tutorialSteps.Count; i = (i + 1) | 0) {
                    this._tutorialStepNameCollection.add((this._tutorialStepQuestionNumbers.getItem(i) || "") + ".) " + (this._tutorialSteps.getItem(i).Tutorial$TutorialStep$ITutorialStep$TextContent || ""));
                }
            }
        }
    });

    Bridge.define("Tutorial.Factory.TutorialFactory", {
        inherits: [Tutorial.Factory.ITutorialFactory],
        alias: ["Create", "Tutorial$Factory$ITutorialFactory$Create"],
        methods: {
            Create: function (name, steps, stats) {
                return new Tutorial.Tutorial(name, steps, stats);
            }
        }
    });

    Bridge.define("Tutorial.Instances.CategoricalLogicSyntaxTutorialFactory", {
        inherits: [Tutorial.Instances.TutorialInstanceFactory],
        fields: {
            _fourPartsOfACategoricalPropositionContentStepFactory: null,
            _quantifierQuestionFactory: null,
            _subjectQuestionFactory: null,
            _copulaQuestionFactory: null,
            _predicateQuestionFactory: null,
            _fourCategoricalPropositionsContentStepFactory: null,
            _categoryQuestionFactory: null
        },
        methods: {
            AddSpecificFactories: function () {
                this._fourPartsOfACategoricalPropositionContentStepFactory = new Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourPartsOfACategoricalProposition.FourPartsOfACategoricalPropositionContentStepFactory();
                this._quantifierQuestionFactory = new Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Quantifier.QuantifierQuestionFactory();
                this._subjectQuestionFactory = new Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Subject.SubjectQuestionFactory();
                this._copulaQuestionFactory = new Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Copula.CopulaQuestionFactory();
                this._predicateQuestionFactory = new Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Predicate.PredicateQuestionFactory();
                this._fourCategoricalPropositionsContentStepFactory = new Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourCategoricalPropositions.FourCategoricalPropositionsContentStepFactory();
                this._categoryQuestionFactory = new Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Category.CategoryQuestionFactory();
            },
            AddSteps: function () {
                this.AddFourPartsOfACategoricalPropositionSteps();
                this.AddFourCategoricalPropositionsSteps();
            },
            AddFourPartsOfACategoricalPropositionSteps: function () {
                this.TutorialSteps.add(this._fourPartsOfACategoricalPropositionContentStepFactory.Tutorial$TutorialStep$ContentStep$IOffTheShelfContentStepFactory$Create());
                this.TutorialSteps.add(this._quantifierQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All men are mortal"));
                this.TutorialSteps.add(this._quantifierQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("No dogs are human"));
                this.TutorialSteps.add(this._quantifierQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("Some animals are nocturnal"));
                this.TutorialSteps.add(this._subjectQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All universe is that which began to exist"));
                this.TutorialSteps.add(this._subjectQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All that which began to exist is that which had a cause"));
                this.TutorialSteps.add(this._subjectQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("No thing is that which can come from nothing"));
                this.TutorialSteps.add(this._copulaQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All contingent things are those which have an explanation of their existence"));
                this.TutorialSteps.add(this._copulaQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All universe is a contingent thing"));
                this.TutorialSteps.add(this._copulaQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("Some things are not contingent"));
                this.TutorialSteps.add(this._copulaQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All universe is not a necessary being"));
                this.TutorialSteps.add(this._predicateQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All that which teaches something contradictory to the Bible is heretical"));
                this.TutorialSteps.add(this._predicateQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("No fine-tuning is due to chance"));
                this.TutorialSteps.add(this._predicateQuestionFactory.Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create("All Bible is that which teaches salvation by grace through faith-trust in Jesus"));
            },
            AddFourCategoricalPropositionsSteps: function () {
                this.TutorialSteps.add(this._fourCategoricalPropositionsContentStepFactory.Tutorial$TutorialStep$ContentStep$IOffTheShelfContentStepFactory$Create());
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.A));
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.E));
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.I));
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.O));
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.I));
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.A));
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.E));
                this.TutorialSteps.add(this._categoryQuestionFactory.Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create(Proposition.Parts.PropositionCategory.O));
            },
            GetTutorialName: function () {
                return "Categorical Logic Syntax Tutorial";
            }
        }
    });

    Bridge.define("Tutorial.Instances.ImmediateDeductionsTutorialFactory", {
        inherits: [Tutorial.Instances.TutorialInstanceFactory],
        fields: {
            _propositionMatchQuestionFactory: null,
            _propositionFactory: null
        },
        methods: {
            AddSpecificFactories: function () {
                this._propositionMatchQuestionFactory = new Tutorial.TutorialStep.QuestionStep.PropositionMatchStep.PropositionMatchQuestionFactory();
                this._propositionFactory = new Proposition.Factory.PropositionFactory();
            },
            GetTutorialName: function () {
                return "Immediate Deductions Tutorial";
            },
            AddSteps: function () {
                this.AddConversionSteps();
                this.AddObversionSteps();
                this.AddContrapositionSteps();
            },
            AddConversionSteps: function () {
                this.AddConvertOverviewContentStep();
                this.AddConversionExamplesAToIContentStep();
                this.AddAtoIConversionQuestion();
                this.AddConversionExamplesEToEContentStep();
                this.AddEtoEConversionQuestion();
                this.AddConversionExamplesEToOContentStep();
                this.AddEtoOConversionQuestion();
                this.AddConversionExamplesIToIContentStep();
                this.AddItoIConversionQuestion();
                this.AddConversionExamplesNoOContentStep();
                this.AddNoIConversionQuestion();
            },
            AddConvertOverviewContentStep: function () {
                var title = "Conversion Overview";
                var textContent = "When we 'convert' a proposition, we interchange the subject and the predicate.\n\nThe following is the table of the only valid conversions:\nA -> I\nE -> E\nE -> O\nI -> I\n\nNote that O does not have a valid conversion.";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddConversionExamplesAToIContentStep: function () {
                var title = "A -> I Conversion";
                var textContent = "'All cats are mammals' -> 'Some mammals are cats'\n\n'All logic professors are awesome people' -> 'Some awesome people are logic professors'\n\n'All books authored by C.S. Lewis are well written books' -> 'Some well written books are books authored by C.S. Lewis'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddAtoIConversionQuestion: function () {
                var questionTitle = "Conversion";
                var questionTextContent = "Perform the conversion of 'All cars are Hondas.' If no valid conversion exists, write 'No conversion is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("Some Hondas are cars");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddConversionExamplesEToEContentStep: function () {
                var title = "E -> E Conversion";
                var textContent = "'No Christians are Atheists' -> 'No Atheists are Christians'\n\n'No Martians are humans' -> 'No humans are Martians'\n\n'No men are islands' -> 'No islands are men'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddEtoEConversionQuestion: function () {
                var questionTitle = "Conversion";
                var questionTextContent = "Perform the E -> E conversion of 'No naturalists are theists.' If no valid conversion exists, write 'No conversion is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("No theists are naturalists");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddConversionExamplesEToOContentStep: function () {
                var title = "E -> O Conversion";
                var textContent = "'No Christians are Atheists' -> 'Some Atheists are not Christians'\n\n'No Martians are humans' -> 'Some humans are not Martians'\n\n'No men are islands' -> 'Some islands are not men'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddEtoOConversionQuestion: function () {
                var questionTitle = "Conversion";
                var questionTextContent = "Perform the E -> O conversion of 'No cats are whales.' If no valid conversion exists, write 'No conversion is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("Some whales are not cats");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddConversionExamplesIToIContentStep: function () {
                var title = "I -> I Conversion";
                var textContent = "'Some students are Chinese people' -> 'Some Chinese people are students'\n\n'Some boys from England are kings of Narnia' -> 'Some kings of Narnia are boys from England'\n\n'Some marriages are mistakes' -> 'Some mistakes are marriages'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddItoIConversionQuestion: function () {
                var questionTitle = "Conversion";
                var questionTextContent = "Perform the conversion of 'Some houses are two-storied buildings.' If no valid conversion exists, write 'No conversion is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("Some two-storied buildings are houses");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddConversionExamplesNoOContentStep: function () {
                var title = "No O Conversion";
                var textContent = "An O proposition cannot validly be converted. It sounds right to say that 'Some S is not P, therefore Some P is not S,' in a dreamy sort of way, as if it were a kind of justice or equal treatment. However, when we argue this way we violate the rule of distribution, for S was undistributed in the premise ('Some S') but distributed in the conclusion.";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddNoIConversionQuestion: function () {
                var questionTitle = "Conversion";
                var questionTextContent = "Perform the conversion of 'Some birds are not parrots.' If no valid conversion exists, write 'No conversion is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("No conversion is that which exists");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddObversionSteps: function () {
                this.AddObversionOverviewContentStep();
                this.AddObversionExamplesAToEContentStep();
                this.AddAtoEObversionQuestion();
                this.AddObversionExamplesEToAContentStep();
                this.AddEtoAObversionQuestion();
                this.AddObversionExamplesIToOContentStep();
                this.AddItoOObversionQuestion();
                this.AddObversionExamplesOToIContentStep();
                this.AddOtoIObversionQuestion();
            },
            AddObversionOverviewContentStep: function () {
                var title = "Obversion Overview";
                var textContent = "When we 'obvert' a proposition, we... \nFirst, change the quality of the proposition (affirmative to negative or vice versa).\nSecond, change the quality of the predicate (P to non-P or non-P to P).\n\nThe following is the table of the only valid obversions:\nA -> E\nE -> A\nI -> O\nO -> I";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddObversionExamplesAToEContentStep: function () {
                var title = "A -> E Obversion";
                var textContent = "'All cats are mammals' -> 'No cats are non-mammals'\n\n'All logic professors are awesome people' -> 'No logic professors are non-awesome people'\n\n'All books authored by C.S. Lewis are well written books' -> 'No books authored by C.S. Lewis are non-well written books'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddAtoEObversionQuestion: function () {
                var questionTitle = "Obversion";
                var questionTextContent = "Perform the obversion of 'All cars are Hondas'";
                var expectedProposition = this._propositionFactory.Create("No cars are non-Hondas");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddObversionExamplesEToAContentStep: function () {
                var title = "E -> A Obversion";
                var textContent = "'No Christians are Atheists' -> 'All Christians are non-atheists'\n\n'No Martians are humans' -> 'All Martians are non-humans'\n\n'No men are islands' -> 'All men are non-islands'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddEtoAObversionQuestion: function () {
                var questionTitle = "Obversion";
                var questionTextContent = "Perform the obversion of 'No cats are whales'";
                var expectedProposition = this._propositionFactory.Create("All cats are non-whales");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddObversionExamplesIToOContentStep: function () {
                var title = "I -> O Obversion";
                var textContent = "'Some students are Chinese people' -> 'Some students are not non-Chinese people'\n\n'Some boys from England are kings of Narnia' -> 'Some boys from England are not non-kings of Narnia'\n\n'Some marriages are mistakes' -> 'Some marriages are not non-mistakes'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddItoOObversionQuestion: function () {
                var questionTitle = "Obversion";
                var questionTextContent = "Perform the obversion of 'Some houses are two-storied buildings'";
                var expectedProposition = this._propositionFactory.Create("Some houses are not non-two-storied buildings");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddObversionExamplesOToIContentStep: function () {
                var title = "O -> I Obversion";
                var textContent = "'Some computers are not macs' -> 'Some computers are non-macs'\n\n'Some dwarfs are not good souls' -> 'Some dwarfs are non-good souls'\n\n'Some used-car dealers are not crooks' -> 'Some used-car dealers are non-crooks'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddOtoIObversionQuestion: function () {
                var questionTitle = "Obversion";
                var questionTextContent = "Perform the obversion of 'Some birds are not parrots'";
                var expectedProposition = this._propositionFactory.Create("Some birds are non-parrots");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddContrapositionSteps: function () {
                this.AddContrapositionOverviewContentStep();
                this.AddContrapositionExampleAContentStep();
                this.AddAContrapositionQuestion();
                this.AddContrapositionExampleEContentStep();
                this.AddEContrapositionQuestion();
                this.AddContrapositionExampleIContentStep();
                this.AddIContrapositionQuestion();
                this.AddContrapositionExampleOContentStep();
                this.AddOContrapositionQuestion();
            },
            AddContrapositionOverviewContentStep: function () {
                var title = "Contraposition Overview";
                var textContent = "When we 'contrapose' a proposition, we first obvert, then convert, and then obvert again.\n\nAfter the three steps are applied, this is the result:\n(A) 'All S is P' becomes 'All non-P is non-S'\n(E) 'No S is P' becomes 'Some non-P is not non-S'\n(O) 'Some S is not P' becomes 'Some non-P is not non-S'\n\nNote that (I) does not have a valid contraposition.";
                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddContrapositionExampleAContentStep: function () {
                var title = "A Contraposition";
                var textContent = "First obvert, then convert, and then obvert again.\n\n'All cats are mammals' obverts to...\n'No cats are non-mammals' which converts to...\n'No non-mammals are cats' which obverts to...\n'All non-mammals are non-cats'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddAContrapositionQuestion: function () {
                var questionTitle = "Contraposition";
                var questionTextContent = "Give the contraposition of 'All cars are Hondas.' If no valid contraposition exists, write 'No contraposition is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("All non-Hondas are non-cars");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddContrapositionExampleEContentStep: function () {
                var title = "E Contraposition";
                var textContent = "First obvert, then convert, and then obvert again.\n\n'No Christians are Atheists' obverts to...\n'All Christians are non-Atheists' which converts to...\n'Some non-Atheists are Christians' which obverts to...\n'Some non-Atheists are not non-Christians'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddEContrapositionQuestion: function () {
                var questionTitle = "Contraposition";
                var questionTextContent = "Give the contraposition of 'No cats are whales.' If no valid contraposition exists, write 'No contraposition is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("Some non-whales are not non-cats");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddContrapositionExampleIContentStep: function () {
                var title = "No I Contraposition";
                var textContent = "First obvert, then convert, and then obvert again.\n\n'Some marriages are mistakes' obverts to...\n'Some marriages are not non-mistakes' which is an O which cannot convert...\nTherefore, I\u2019s cannot be contraposed.\n";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddIContrapositionQuestion: function () {
                var questionTitle = "Contraposition";
                var questionTextContent = "Give the contraposition of 'Some houses are two-storied buildings.' If no valid contraposition exists, write 'No contraposition is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("No contraposition is that which exists");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddContrapositionExampleOContentStep: function () {
                var title = "O Contraposition";
                var textContent = "First obvert, then convert, and then obvert again.\n\n'Some computers are not macs' obverts to...\n'Some computers are non-macs' which converts to...\n'Some non-macs are computers' which obverts to...\n'Some non-macs are not non-computers'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddOContrapositionQuestion: function () {
                var questionTitle = "Contraposition";
                var questionTextContent = "Give the contraposition of 'Some birds are not parrots.' If no valid contraposition exists, write 'No contraposition is that which exists.'";
                var expectedProposition = this._propositionFactory.Create("Some non-parrots are not non-birds");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            }
        }
    });

    Bridge.define("Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory", {
        inherits: [Tutorial.Instances.TutorialInstanceFactory],
        statics: {
            fields: {
                QuestionTitle: null
            },
            ctors: {
                init: function () {
                    this.QuestionTitle = "Opposition";
                }
            }
        },
        fields: {
            _propositionMatchQuestionFactory: null,
            _propositionFactory: null
        },
        methods: {
            AddSpecificFactories: function () {
                this._propositionMatchQuestionFactory = new Tutorial.TutorialStep.QuestionStep.PropositionMatchStep.PropositionMatchQuestionFactory();
                this._propositionFactory = new Proposition.Factory.PropositionFactory();
            },
            GetTutorialName: function () {
                return "Relations Between Propositions Tutorial";
            },
            AddSteps: function () {
                this.AddOppositionContentStep();

                this.AddContraContentSteps();
                this.AddContraQuestions();

                this.AddAlternationContentStep();
                this.AddAlternationQuestions();
            },
            AddContraContentSteps: function () {
                this.AddContradictionContentStep();
                this.AddContrarietyContentStep();
                this.AddSubcontrarietyContentStep();
            },
            AddOppositionContentStep: function () {
                var title = "Opposition";
                var textContent = "Opposition means the relation between any two propositions that have the same subject and predicate but differ in quality, quantity or both.\n\nThere are four different kinds of opposition: Contradiction, Contrariety, Subcontrariety, and Alternation";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddContradictionContentStep: function () {
                var title = "Contradiction";
                var textContent = "Two propositions contradict each other only when the truth of either one necessarily entails the falsity of the other, and the falsity of either one necessarily means the truth of the other.\n\nA\u2019s and O\u2019s are contradictory, and E\u2019s and I\u2019s are contradictory.\n\nFor example, 'All dogs are loyal' contradicts 'Some dogs are not loyal'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddContrarietyContentStep: function () {
                var title = "Contrariety";
                var textContent = "Two propositions are contrary when they cannot both be true, but they can both be false.\n\nUniversal statements A\u2019s and E\u2019s are contrary.\n\nFor example, 'All dogs are loyal' is contrary to 'No dogs are loyal.' They cannot both be true, but they can both be false (e.g. if 'Some dogs are loyal' is true).";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddSubcontrarietyContentStep: function () {
                var title = "Subcontrariety";
                var textContent = "Two propositions are subcontrary when they cannot both be false, but they can both be true.\n\nParticular statements I\u2019s and O\u2019s are subcontrary.\n\nFor example, 'Some dogs are loyal' is subcontrary to 'Some dogs are not loyal.'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddContraQuestions: function () {
                this.AddAtoOContradictionQuestion();
                this.AddAtoEContrarietyQuestion();
                this.AddEtoIContradictionQuestion();
                this.AddItoOSubcontrarietyQuestion();
                this.AddOtoAContradictionQuestion();
                this.AddEtoAContrarietyQuestion();
                this.AddItoEContradictionQuestion();
                this.AddOtoISubcontrarietyQuestion();
            },
            AddAtoOContradictionQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the contradiction of 'All witches are dangerous'?";
                var expectedProposition = this._propositionFactory.Create("Some witches are not dangerous");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddAtoEContrarietyQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the contrariety of 'All philosophers are insane'?";
                var expectedProposition = this._propositionFactory.Create("No philosophers are insane");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddEtoIContradictionQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the contradiction of 'No men are born free'?";
                var expectedProposition = this._propositionFactory.Create("Some men are born free");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddItoOSubcontrarietyQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the subcontrariety of 'Some leprechauns are tricky'?";
                var expectedProposition = this._propositionFactory.Create("Some leprechauns are not tricky");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddOtoAContradictionQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the contradiction of 'Some money is not evil'?";
                var expectedProposition = this._propositionFactory.Create("All money is evil");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddEtoAContrarietyQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the contrariety of 'No truths are true'?";
                var expectedProposition = this._propositionFactory.Create("All truths are true");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddItoEContradictionQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the contradiction of 'Some fair faces are foul bargains'?";
                var expectedProposition = this._propositionFactory.Create("No fair faces are foul bargains");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddOtoISubcontrarietyQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the subcontrariety of 'Some students are not good debaters'?";
                var expectedProposition = this._propositionFactory.Create("Some students are good debaters");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddAlternationContentStep: function () {
                var title = "Alternation";
                var textContent = "Alternation is the relationship between A and I propositions and E and O propositions (basically universals and their particular counterpart).\n\nI is the subalternate of A and O is the subalternate of E. For example, 'Some truth is beauty' is the subalternate of 'All truth is beauty.' If the universal proposition is true, then the particular that comes under it must be true.\n\nA is the superalternate of I and E is the superalternate of O. For example, 'No things are new' is the superalternate of 'Some things are not new.' If the particular is not true, then the universal cannot be true.";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddAlternationQuestions: function () {
                this.AddAtoISubalternateQuestion();
                this.AddOtoESuperalternateQuestion();
                this.AddEtoOSubalternateQuestion();
                this.AddItoASuperalternateQuestion();
            },
            AddAtoISubalternateQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the subalternate of 'All beauty is joy forever'?";
                var expectedProposition = this._propositionFactory.Create("Some beauty is joy forever");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddOtoESuperalternateQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the superalternate of 'Some snarks are not boojums'?";
                var expectedProposition = this._propositionFactory.Create("No snarks are boojums");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddEtoOSubalternateQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the subalternate of 'No mistakes are foolish'?";
                var expectedProposition = this._propositionFactory.Create("Some mistakes are not foolish");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddItoASuperalternateQuestion: function () {
                var questionTitle = Tutorial.Instances.RelationsBetweenPropositionsTutorialFactory.QuestionTitle;
                var questionTextContent = "What is the superalternate of 'Some red sky at night is delight'?";
                var expectedProposition = this._propositionFactory.Create("All red sky at night is delight");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor(expectedProposition, questionTitle, questionTextContent));
            }
        }
    });

    Bridge.define("Tutorial.Instances.SyllogismsTutorialFactory", {
        inherits: [Tutorial.Instances.TutorialInstanceFactory],
        statics: {
            fields: {
                AAAQuestionTitle: null,
                EAEQuestionTitle: null,
                AOOQuestionTitle: null
            },
            ctors: {
                init: function () {
                    this.AAAQuestionTitle = "AAA";
                    this.EAEQuestionTitle = "EAE";
                    this.AOOQuestionTitle = "AOO";
                }
            }
        },
        fields: {
            _validSyllogismQuestionFactory: null
        },
        methods: {
            AddSpecificFactories: function () {
                var moodSpecificAnalysisEngineFactoryFactory = new Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Factories.SyllogismAnswerCheckerActionFactory();
                this._validSyllogismQuestionFactory = new Tutorial.TutorialStep.QuestionStep.SyllogismSteps.ValidSyllogismQuestionFactory(moodSpecificAnalysisEngineFactoryFactory);
            },
            AddSteps: function () {
                this.AddAAAQuestion();
                this.AddEAEQuestion();
                this.AddAOOQuestion();
            },
            AddAAAQuestion: function () {
                var questionTitle = Tutorial.Instances.SyllogismsTutorialFactory.AAAQuestionTitle;
                var questionTextContent = "Enter a valid AAA syllogism that satisfies Aristotle's rules";
                var aaaQuestion = this._validSyllogismQuestionFactory.Tutorial$TutorialStep$QuestionStep$SyllogismSteps$IValidSyllogismQuestionFactory$CreateFor(questionTitle, questionTextContent, Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood.AAA);

                this.TutorialSteps.add(aaaQuestion);
            },
            AddEAEQuestion: function () {
                var questionTitle = Tutorial.Instances.SyllogismsTutorialFactory.EAEQuestionTitle;
                var questionTextContent = "Enter a valid EAE syllogism that satisfies Aristotle's rules";
                var eaeQuestion = this._validSyllogismQuestionFactory.Tutorial$TutorialStep$QuestionStep$SyllogismSteps$IValidSyllogismQuestionFactory$CreateFor(questionTitle, questionTextContent, Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood.EAE);

                this.TutorialSteps.add(eaeQuestion);
            },
            AddAOOQuestion: function () {
                var questionTitle = Tutorial.Instances.SyllogismsTutorialFactory.AOOQuestionTitle;
                var questionTextContent = "Enter a valid AOO syllogism that satisfies Aristotle's rules";
                var aooQuestion = this._validSyllogismQuestionFactory.Tutorial$TutorialStep$QuestionStep$SyllogismSteps$IValidSyllogismQuestionFactory$CreateFor(questionTitle, questionTextContent, Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood.AOO);

                this.TutorialSteps.add(aooQuestion);
            },
            GetTutorialName: function () {
                return "Syllogisms Tutorial";
            }
        }
    });

    Bridge.define("Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory", {
        inherits: [Tutorial.Instances.TutorialInstanceFactory],
        statics: {
            methods: {
                GetStylisticVariationsTitle: function () {
                    return "Stylistic Variations";
                }
            }
        },
        fields: {
            _propositionMatchQuestionFactory: null,
            _propositionFactory: null
        },
        methods: {
            AddSpecificFactories: function () {
                this._propositionMatchQuestionFactory = new Tutorial.TutorialStep.QuestionStep.PropositionMatchStep.PropositionMatchQuestionFactory();
                this._propositionFactory = new Proposition.Factory.PropositionFactory();
            },
            GetTutorialName: function () {
                return "Translating into Categorical Propositions Tutorial";
            },
            AddSteps: function () {
                this.AddRewordNonStandardPredicatesSteps();
                this.AddAddRewordNonStandardVerbsSteps();
                this.AddAddQuantifiersSteps();
                this.AddSingularStatementsSteps();
                this.AddStylisticVariationsOfASteps();
                this.AddStylisticVariationsOfISteps();
                this.AddStylisticVariationsOfOSteps();
                this.AddStylisticVariationsOfESteps();
            },
            AddRewordNonStandardPredicatesSteps: function () {
                this.AddRewordNonStandardPredicatesContentStep();
                this.AddRewordPredicateQuestion();
            },
            AddRewordNonStandardPredicatesContentStep: function () {
                var title = "Reword Predicates";
                var textContent = "'All professors are educated' -> 'All professors are educated people'\n\n'Some students are smart' -> 'Some students are smart people'\n\n'All bachelors are unmarried' -> 'All bachelors are unmarried people'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddRewordPredicateQuestion: function () {
                var questionTitle = "Reword Predicates";
                var questionTextContent = "Translate 'All lawyers are wealthy' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All lawyers are wealthy people");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddAddRewordNonStandardVerbsSteps: function () {
                this.AddRewordNonStandardVerbsContentStep();
                this.AddRewordVerbsQuestion();
            },
            AddRewordNonStandardVerbsContentStep: function () {
                var title = "Reword Verbs";
                var textContent = "'All students walk to school' -> 'All students are persons who walk to school'\n\n'All fools persevere in error' -> 'All fools are persons who persevere in error'\n\n'All cowards die before their death' -> 'All cowards are persons who die before their death'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddRewordVerbsQuestion: function () {
                var questionTitle = "Reword Verbs";
                var questionTextContent = "Translate 'All employees bike to work' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All employees are persons who bike to work");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddAddQuantifiersSteps: function () {
                this.AddAddQuantifiersContentStep();
                this.AddAddQuantifiersQuestion();
            },
            AddAddQuantifiersContentStep: function () {
                var title = "Add Quantifiers";
                var textContent = "'Koalas are marsupials' -> 'All koalas are marsupials'\n\n'Lizards are reptiles' -> 'All lizards are reptiles'\n\n'Triangles are geometrical figures' -> 'All triangles are geometrical figures'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddAddQuantifiersQuestion: function () {
                var questionTitle = "Add Quantifiers";
                var questionTextContent = "Translate 'Dogs are canines' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All dogs are canines");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddSingularStatementsSteps: function () {
                this.AddSingularStatementsContentStep();
                this.AddSingularStatmentsQuestion();
            },
            AddSingularStatementsContentStep: function () {
                var title = "Singular Statements";
                var textContent = "'Caesar crossed the Rubicon' -> 'All persons identical with Caesar are persons who crossed the Rubicon'\n\n'Socrates practiced philosophy' -> 'All persons identical with Socrates are persons who practiced philosophy'\n\n'Alexander conquered Asia' -> 'All persons identical with Alexander are persons who conquered Asia'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddSingularStatmentsQuestion: function () {
                var questionTitle = "Singular Statements";
                var questionTextContent = "Translate 'Paul Revere alerted the colonial militia' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All persons identical with Paul Revere are persons who alerted the colonial militia");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddStylisticVariationsOfASteps: function () {
                this.AddStylisticVariationsOfAContentStep();
                this.AddFirstStylisticVariationsOfAQuestion();
                this.AddSecondStylisticVariationsOfAQuestion();
                this.AddThirdStylisticVariationsOfAQuestion();
                this.AddFourthStylisticVariationsOfAQuestion();
                this.AddFifthStylisticVariationsOfAQuestion();
            },
            AddStylisticVariationsOfAContentStep: function () {
                var title = "Stylistic Variations of A";
                var textContent = "'Only doctors are psychiatrists' -> 'All psychiatrists are doctors'\n\n'Only fools rush in' -> 'All people who rush in are fools'\n\n'Something is a blue jay only if it\u2019s a bird' -> 'All blue jays are birds'\n\n'Only if something is a Ford is it a Mustang' -> 'All Mustangs are Fords'\n\n'Employees\u2019 restroom only' -> 'All people who can use the restroom are employees'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddFirstStylisticVariationsOfAQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Only scientists are physicists' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All physicists are scientists");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddSecondStylisticVariationsOfAQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Only fools despise wisdom' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All people who despise wisdom are fools");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddThirdStylisticVariationsOfAQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Something is a Koala only if it\u2019s a marsupial' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All Koalas are marsupials");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddFourthStylisticVariationsOfAQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Only if something is a Honda is it a Civic' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All Civics are Hondas");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddFifthStylisticVariationsOfAQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Managers\u2019 cafe only' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("All people who can use the cafe are managers");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddStylisticVariationsOfIContentStep: function () {
                var title = "Stylistic Variations of I";
                var textContent = "'Many billionaires are internet tycoons' -> 'Some billionaires are internet tycoons'\n\n'A few mathematicians are poets' -> 'Some mathematicians are poets'\n\n'There are monkeys that are carnivores' -> 'Some monkeys are carnivores'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddStylisticVariationsOfISteps: function () {
                this.AddStylisticVariationsOfIContentStep();
                this.AddFirstStylisticVariationsOfIQuestion();
            },
            AddFirstStylisticVariationsOfIQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Many books are inspired' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("Some books are inspired");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddStylisticVariationsOfOContentStep: function () {
                var title = "Stylistic Variations of O";
                var textContent = "'Not all desserts are fattening' -> 'Some desserts are not fattening'\n\n'Sailors are not always swimmers' -> 'Some Sailors are not swimmers'\n\n'Some theologians are nonbelievers' -> 'Some theologians are not believers'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddStylisticVariationsOfOSteps: function () {
                this.AddStylisticVariationsOfOContentStep();
                this.AddFirstStylisticVariationsOfOQuestion();
            },
            AddFirstStylisticVariationsOfOQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Not all arguments are valid' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("Some arguments are not valid");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddStylisticVariationsOfEContentStep: function () {
                var title = "Stylistic Variations of E";
                var textContent = "'Oaks are not conifers' -> 'No oaks are conifers'\n\n'None of the students are registered Independents' -> 'No students are registered Independents'\n\n'No one who is a Democrat is a Republican' -> 'No Democrats are Republicans'";

                this.TutorialSteps.add(this.ContentStepFactory.Create(title, textContent));
            },
            AddStylisticVariationsOfESteps: function () {
                this.AddStylisticVariationsOfEContentStep();
                this.AddFirstStylisticVariationsOfEQuestion();
                this.AddSecondStylisticVariationsOfEQuestion();
            },
            AddFirstStylisticVariationsOfEQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'Men are not centaurs' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("No men are centaurs");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            },
            AddSecondStylisticVariationsOfEQuestion: function () {
                var questionTitle = Tutorial.Instances.TranslatingIntoCategoricalPropositionsTutorialFactory.GetStylisticVariationsTitle();
                var questionTextContent = "Translate 'None of the orcs are hobbits' into a categorical proposition";
                var expectedProposition = this._propositionFactory.Create("No orcs are hobbits");
                this.TutorialSteps.add(this._propositionMatchQuestionFactory.CreateFor(expectedProposition, questionTitle, questionTextContent));
            }
        }
    });

    Bridge.define("Tutorial.Stats.TutorialStats", {
        inherits: [Tutorial.Stats.ITutorialStats],
        fields: {
            _tutorialSteps: null
        },
        props: {
            TotalQuestions: {
                get: function () {
                    return this.GetQuestionTotal();
                }
            },
            QuestionsAnsweredCorrectly: {
                get: function () {
                    return this.GetQuestionsAnsweredCorrectlyCount();
                }
            },
            QuestionsAnsweredIncorrectly: {
                get: function () {
                    return this.GetQuestionsAnsweredIncorrectlyCount();
                }
            },
            AnswerQuestionAttempts: {
                get: function () {
                    return this.GetAnswerQuestionAttemptsTotal();
                }
            }
        },
        alias: [
            "TotalQuestions", "Tutorial$Stats$ITutorialStats$TotalQuestions",
            "QuestionsAnsweredCorrectly", "Tutorial$Stats$ITutorialStats$QuestionsAnsweredCorrectly",
            "QuestionsAnsweredIncorrectly", "Tutorial$Stats$ITutorialStats$QuestionsAnsweredIncorrectly",
            "AnswerQuestionAttempts", "Tutorial$Stats$ITutorialStats$AnswerQuestionAttempts"
        ],
        ctors: {
            ctor: function (tutorialSteps) {
                this.$initialize();
                this._tutorialSteps = tutorialSteps;
            }
        },
        methods: {
            GetQuestionTotal: function () {
                return System.Linq.Enumerable.from(this.QuestionSteps()).count();
            },
            QuestionSteps: function () {
                return System.Linq.Enumerable.from(this._tutorialSteps).where(Bridge.fn.bind(this, function (step) {
                        return this.IsAQuestion(step);
                    }));
            },
            IsAQuestion: function (step) {
                return step.Tutorial$TutorialStep$ITutorialStep$Abilities.contains(Tutorial.TutorialStep.Ability.Answerable);
            },
            GetQuestionsAnsweredCorrectlyCount: function () {
                return System.Linq.Enumerable.from(System.Linq.Enumerable.from(this.QuestionSteps()).where(Bridge.fn.bind(this, function (step) {
                            return this.IsAnsweredCorrectly(step);
                        }))).count();
            },
            IsAnsweredCorrectly: function (step) {
                return this.GetLogicalAnalysisStatus(step) === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass;
            },
            GetQuestionsAnsweredIncorrectlyCount: function () {
                return System.Linq.Enumerable.from(System.Linq.Enumerable.from(this.QuestionSteps()).where(Bridge.fn.bind(this, function (step) {
                            return this.IsAnsweredIncorrectly(step);
                        }))).count();
            },
            IsAnsweredIncorrectly: function (step) {
                return this.GetLogicalAnalysisStatus(step) === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
            },
            GetAnswerQuestionAttemptsTotal: function () {
                return System.Linq.Enumerable.from(this.QuestionSteps()).sum(Bridge.fn.bind(this, function (step) {
                        return this.QuestionAttempts(step);
                    }));
            },
            QuestionAttempts: function (x) {
                return System.Nullable.getValue(Bridge.cast(Bridge.unbox(x.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts), System.Int32), System.Int32));
            },
            GetLogicalAnalysisStatus: function (step) {
                return System.Nullable.getValue(Bridge.cast(Bridge.unbox(step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.AnalysisStatus), LogicalAnalysisEngine.Status.LogicalAnalysisStatus), System.Int32));
            }
        }
    });

    Bridge.define("Tutorial.Stats.TutorialStatsNullObject", {
        inherits: [Tutorial.Stats.ITutorialStats],
        props: {
            AnswerQuestionAttempts: {
                get: function () {
                    return 0;
                }
            },
            QuestionsAnsweredCorrectly: {
                get: function () {
                    return 0;
                }
            },
            QuestionsAnsweredIncorrectly: {
                get: function () {
                    return 0;
                }
            },
            TotalQuestions: {
                get: function () {
                    return 0;
                }
            }
        },
        alias: [
            "AnswerQuestionAttempts", "Tutorial$Stats$ITutorialStats$AnswerQuestionAttempts",
            "QuestionsAnsweredCorrectly", "Tutorial$Stats$ITutorialStats$QuestionsAnsweredCorrectly",
            "QuestionsAnsweredIncorrectly", "Tutorial$Stats$ITutorialStats$QuestionsAnsweredIncorrectly",
            "TotalQuestions", "Tutorial$Stats$ITutorialStats$TotalQuestions"
        ]
    });

    Bridge.define("Tutorial.Tutorial", {
        inherits: [Tutorial.ITutorial],
        fields: {
            Name: null,
            Steps: null,
            Stats: null
        },
        props: {
            IsCompleted: {
                get: function () {
                    return this.AreAllCompletableStepsAreCompleted();
                }
            }
        },
        alias: [
            "Name", "Tutorial$ITutorial$Name",
            "Steps", "Tutorial$ITutorial$Steps",
            "IsCompleted", "Tutorial$ITutorial$IsCompleted",
            "Stats", "Tutorial$ITutorial$Stats",
            "CompleteThisStep", "Tutorial$ITutorial$CompleteThisStep"
        ],
        ctors: {
            ctor: function (name, steps, stats) {
                this.$initialize();
                this.Name = name;
                this.Steps = steps;
                this.Stats = stats;
            }
        },
        methods: {
            AreAllCompletableStepsAreCompleted: function () {
                return this.CountOfCompletedSteps() === this.CountOfCompletableSteps();
            },
            CountOfCompletableSteps: function () {
                return System.Linq.Enumerable.from(this.CompletableSteps()).count();
            },
            CompletableSteps: function () {
                return System.Linq.Enumerable.from(this.Steps).where(Bridge.fn.bind(this, function (step) {
                        return this.IsCompletable(step);
                    }));
            },
            CountOfCompletedSteps: function () {
                return System.Linq.Enumerable.from(System.Linq.Enumerable.from(this.CompletableSteps()).where(Bridge.fn.bind(this, function (step) {
                            return this.IsComplete(step);
                        }))).count();
            },
            IsCompletable: function (steps) {
                return steps.Tutorial$TutorialStep$ITutorialStep$Abilities.contains(Tutorial.TutorialStep.Ability.Completable);
            },
            IsComplete: function (steps) {
                return System.Nullable.getValue(Bridge.cast(Bridge.unbox(steps.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.IsCompleted), System.Boolean), System.Boolean)) === true;
            },
            CompleteThisStep: function (stepIndex) {
                this.Steps.getItem(stepIndex).Tutorial$TutorialStep$ITutorialStep$Complete();
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourCategoricalPropositions.IFourCategoricalPropositionsContentStepFactory", {
        inherits: [Tutorial.TutorialStep.ContentStep.IOffTheShelfContentStepFactory],
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourPartsOfACategoricalProposition.IFourPartsOfACategoricalPropositionContentStepFactory", {
        inherits: [Tutorial.TutorialStep.ContentStep.IOffTheShelfContentStepFactory],
        $kind: "interface"
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Category.CategoryQuestionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Category.ICategoryQuestionFactory],
        fields: {
            _expectedCategory: 0,
            _propositionCategoryText: null,
            _categoryLogicalAnalysisEngineFactory: null
        },
        alias: ["Create", "Tutorial$TutorialStep$CategoricalLogicSyntaxSteps$Questions$Category$ICategoryQuestionFactory$Create"],
        methods: {
            Create: function (expectedCategory) {
                this.InitializeMembers(expectedCategory);
                this.CreateStep();

                return this.Step;
            },
            InitializeMembers: function (expectedCategory) {
                this._expectedCategory = expectedCategory;
                this.CreatePropositionCategoryText();
            },
            CreatePropositionCategoryText: function () {
                this._propositionCategoryText = Proposition.Utilities.CategoryStringTranslator.GetString(this._expectedCategory);
            },
            GetTitle: function () {
                return this._propositionCategoryText;
            },
            GetPrompt: function () {
                return "What is an example proposition that is in the '" + (this._propositionCategoryText || "") + "' category?";
            },
            CreateAnswerCheckerAction: function () {
                this.CreateAnalysisEngineFactory();
                this.AnswerCheckerAction = new Tutorial.TutorialStep.CommonAnswerCheckers.PropositionAnswerChecker(this.Step, this._categoryLogicalAnalysisEngineFactory);
            },
            CreateAnalysisEngineFactory: function () {
                var propositionFactory = new Proposition.Factory.PropositionFactory();
                this._categoryLogicalAnalysisEngineFactory = new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Category.CategoryLogicalAnalysisEngineFactory(propositionFactory, this._expectedCategory);
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.ChecksAPropositionAnswer;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Copula.CopulaQuestionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.QuestionSteps.Proposition.CategoricalLogicSyntax.Parts.IPropositionPartQuestionFactory],
        fields: {
            _propositionInPromptsRawSentence: null,
            _copulaLogicalAnalysisEngineFactory: null
        },
        alias: ["Create", "Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create"],
        methods: {
            Create: function (propositionInPromptsRawSentence) {
                this.InitializeMembers(propositionInPromptsRawSentence);
                this.CreateStep();

                return this.Step;
            },
            InitializeMembers: function (propositionInPromptsRawSentence) {
                this._propositionInPromptsRawSentence = propositionInPromptsRawSentence;
            },
            GetTitle: function () {
                return "Copula";
            },
            GetPrompt: function () {
                return "What is the copula in the proposition '" + (this._propositionInPromptsRawSentence || "") + "'?";
            },
            CreateAnswerCheckerAction: function () {
                this.CreateAnalysisEngineFactory();

                this.AnswerCheckerAction = new Tutorial.TutorialStep.CommonAnswerCheckers.PropositionAnswerChecker(this.Step, this._copulaLogicalAnalysisEngineFactory);
            },
            CreateAnalysisEngineFactory: function () {
                var propositionFactory = new Proposition.Factory.PropositionFactory();
                var propositionInPrompt = propositionFactory.Create(this._propositionInPromptsRawSentence);
                this._copulaLogicalAnalysisEngineFactory = new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Copula.CopulaLogicalAnalysisEngineFactory(propositionInPrompt);
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.ChecksAWordAnswer;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Predicate.PredicateQuestionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.QuestionSteps.Proposition.CategoricalLogicSyntax.Parts.IPropositionPartQuestionFactory],
        fields: {
            _propositionInPromptsRawSentence: null,
            _predicateLogicalAnalysisEngineFactory: null
        },
        alias: ["Create", "Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create"],
        methods: {
            Create: function (propositionInPromptsRawSentence) {
                this.InitializeMembers(propositionInPromptsRawSentence);
                this.CreateStep();

                return this.Step;
            },
            InitializeMembers: function (propositionInPromptsRawSentence) {
                this._propositionInPromptsRawSentence = propositionInPromptsRawSentence;
            },
            GetTitle: function () {
                return "Predicate";
            },
            GetPrompt: function () {
                return "What is the predicate in the proposition '" + (this._propositionInPromptsRawSentence || "") + "'?";
            },
            CreateAnswerCheckerAction: function () {
                this.CreateAnalysisEngineFactory();

                this.AnswerCheckerAction = new Tutorial.TutorialStep.CommonAnswerCheckers.PropositionAnswerChecker(this.Step, this._predicateLogicalAnalysisEngineFactory);
            },
            CreateAnalysisEngineFactory: function () {
                var propositionFactory = new Proposition.Factory.PropositionFactory();
                var propositionInPrompt = propositionFactory.Create(this._propositionInPromptsRawSentence);
                this._predicateLogicalAnalysisEngineFactory = new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Predicate.PredicateLogicalAnalysisEngineFactory(propositionInPrompt);
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.ChecksAWordAnswer;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Quantifier.QuantifierQuestionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.QuestionSteps.Proposition.CategoricalLogicSyntax.Parts.IPropositionPartQuestionFactory],
        fields: {
            _propositionInPromptsRawSentence: null,
            _quantifierLogicalAnalysisEngineFactory: null
        },
        alias: ["Create", "Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create"],
        methods: {
            Create: function (propositionInPromptsRawSentence) {
                this.InitializeMembers(propositionInPromptsRawSentence);
                this.CreateStep();

                return this.Step;
            },
            InitializeMembers: function (propositionInPromptsRawSentence) {
                this._propositionInPromptsRawSentence = propositionInPromptsRawSentence;
            },
            GetTitle: function () {
                return "Quantifier";
            },
            GetPrompt: function () {
                return "What is the quantifier in the proposition '" + (this._propositionInPromptsRawSentence || "") + "'?";
            },
            CreateAnswerCheckerAction: function () {
                this.CreateAnalysisEngineFactory();

                this.AnswerCheckerAction = new Tutorial.TutorialStep.CommonAnswerCheckers.PropositionAnswerChecker(this.Step, this._quantifierLogicalAnalysisEngineFactory);
            },
            CreateAnalysisEngineFactory: function () {
                var propositionFactory = new Proposition.Factory.PropositionFactory();
                var propositionInPrompt = propositionFactory.Create(this._propositionInPromptsRawSentence);
                this._quantifierLogicalAnalysisEngineFactory = new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Quantifier.QuantifierLogicalAnalysisEngineFactory(propositionInPrompt);
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.ChecksAWordAnswer;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Questions.Subject.SubjectQuestionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.QuestionSteps.Proposition.CategoricalLogicSyntax.Parts.IPropositionPartQuestionFactory],
        fields: {
            _propositionInPromptsRawSentence: null,
            _subjectLogicalAnalysisEngineFactory: null
        },
        alias: ["Create", "Tutorial$TutorialStep$QuestionSteps$Proposition$CategoricalLogicSyntax$Parts$IPropositionPartQuestionFactory$Create"],
        methods: {
            Create: function (propositionInPromptsRawSentence) {
                this.InitializeMembers(propositionInPromptsRawSentence);
                this.CreateStep();

                return this.Step;
            },
            InitializeMembers: function (propositionInPromptsRawSentence) {
                this._propositionInPromptsRawSentence = propositionInPromptsRawSentence;
            },
            GetTitle: function () {
                return "Subject";
            },
            GetPrompt: function () {
                return "What is the subject in the proposition '" + (this._propositionInPromptsRawSentence || "") + "'?";
            },
            CreateAnswerCheckerAction: function () {
                this.CreateAnalysisEngineFactory();

                this.AnswerCheckerAction = new Tutorial.TutorialStep.CommonAnswerCheckers.PropositionAnswerChecker(this.Step, this._subjectLogicalAnalysisEngineFactory);
            },
            CreateAnalysisEngineFactory: function () {
                var propositionFactory = new Proposition.Factory.PropositionFactory();
                var propositionInPrompt = propositionFactory.Create(this._propositionInPromptsRawSentence);
                this._subjectLogicalAnalysisEngineFactory = new LogicalAnalysisEngine.PropositionAnalysis.Syntax.Subject.SubjectLogicalAnalysisEngineFactory(propositionInPrompt);
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.ChecksAWordAnswer;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.QuestionSteps.QuestionAnswerChecker", {
        inherits: [Tutorial.TutorialStep.StepAction.ITutorialStepAction],
        fields: {
            TutorialStep: null,
            LogicalAnalysisEngine: null
        },
        alias: ["Execute", "Tutorial$TutorialStep$StepAction$ITutorialStepAction$Execute"],
        ctors: {
            ctor: function (question) {
                this.$initialize();
                this.TutorialStep = question;
            }
        },
        methods: {
            Execute: function (studentsAnswer) {
                this.CreateLogicalAnalysisEngine(studentsAnswer);
                this.AnalyzeStudentsAnswer();
                this.ReportFeedback();
            },
            AnalyzeStudentsAnswer: function () {
                this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$PerformAnalysis();
            },
            ReportFeedback: function () {
                var analysisData = new Tutorial.TutorialStep.StepAction.AnalysisData(this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStatus, this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisFeedbackCollection);
                this.TutorialStep.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.getItem(Tutorial.TutorialStep.ActionName.UpdateAnalysisResults).Tutorial$TutorialStep$StepAction$ITutorialStepAction$Execute(analysisData);
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.ContentStep.ContentStepFactory", {
        inherits: [Tutorial.TutorialStep.ContentStep.IContentStepFactory],
        fields: {
            _contentStep: null
        },
        alias: ["Create", "Tutorial$TutorialStep$ContentStep$IContentStepFactory$Create"],
        methods: {
            Create: function (title, textContent) {
                this.CreateBasicTutorialStep(title, textContent);
                this.AddEssence();
                this.AddNullObjects();

                return this._contentStep;
            },
            CreateBasicTutorialStep: function (title, textContent) {
                this._contentStep = new Tutorial.TutorialStep.TutorialStep(title, textContent);
            },
            AddEssence: function () {
                this._contentStep.Tutorial$TutorialStep$ITutorialStep$Abilities.add(Tutorial.TutorialStep.Ability.Completable);
                this._contentStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.IsCompleted, Bridge.box(false, System.Boolean, System.Boolean.toString));
            },
            AddNullObjects: function () {
                this._contentStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnalysisFeedbackCollection, new (System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.AnalysisFeedback.IAnalysisFeedback)).ctor());
                this._contentStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnalysisStatus, Bridge.box(LogicalAnalysisEngine.Status.LogicalAnalysisStatus.NotApplicable, LogicalAnalysisEngine.Status.LogicalAnalysisStatus, System.Enum.toStringFn(LogicalAnalysisEngine.Status.LogicalAnalysisStatus)));
                this._contentStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnswerQuestionAttempts, Bridge.box(0, System.Int32));
                this._contentStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.TutorialStats, new Tutorial.Stats.TutorialStatsNullObject());

                this._contentStep.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.add(Tutorial.TutorialStep.ActionName.CheckThisAnswer, new Tutorial.TutorialStep.StepAction.TutorialStepActionNullObject());
                this._contentStep.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.add(Tutorial.TutorialStep.ActionName.UpdateAnalysisResults, new Tutorial.TutorialStep.StepAction.TutorialStepActionNullObject());
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.PropositionMatchStep.PropositionMatchQuestionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.QuestionStep.PropositionMatchStep.IPropositionMatchQuestionFactory],
        fields: {
            _expectedProposition: null,
            _questionTitle: null,
            _questionTextContent: null,
            _propositionMatchLogicalAnalysisEngineFactory: null
        },
        alias: ["CreateFor", "Tutorial$TutorialStep$QuestionStep$PropositionMatchStep$IPropositionMatchQuestionFactory$CreateFor"],
        methods: {
            CreateFor: function (expectedProposition, questionTitle, questionTextContent) {
                this.InitializeMembers(expectedProposition, questionTitle, questionTextContent);
                this.CreateStep();

                return this.Step;
            },
            InitializeMembers: function (expectedProposition, questionTitle, questionTextContent) {
                this._expectedProposition = expectedProposition;
                this._questionTitle = questionTitle;
                this._questionTextContent = questionTextContent;
            },
            GetTitle: function () {
                return this._questionTitle;
            },
            GetPrompt: function () {
                return this._questionTextContent;
            },
            CreateAnswerCheckerAction: function () {
                this.CreateAnalysisEngineFactory();
                this.AnswerCheckerAction = new Tutorial.TutorialStep.CommonAnswerCheckers.PropositionAnswerChecker(this.Step, this._propositionMatchLogicalAnalysisEngineFactory);
            },
            CreateAnalysisEngineFactory: function () {
                var propositionFactory = new Proposition.Factory.PropositionFactory();
                this._propositionMatchLogicalAnalysisEngineFactory = new LogicalAnalysisEngine.PropositionAnalysis.PropositionMatch.PropositionMatchLogicalAnalysisEngineFactory(propositionFactory, this._expectedProposition);
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.ChecksAPropositionAnswer;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.StepNumberGenerator.QuestionNumberGenerator", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepNumberGenerator.IQuestionNumberGenerator],
        alias: ["Execute", "Tutorial$TutorialStep$QuestionStep$StepNumberGenerator$IQuestionNumberGenerator$Execute"],
        methods: {
            Execute: function (tutorialSteps) {
                var $t;
                var collectionOfQuestionNumbers = new (System.Collections.ObjectModel.Collection$1(System.String)).ctor();

                var currentQuestionNumber = 1;
                $t = Bridge.getEnumerator(tutorialSteps);
                try {
                    while ($t.moveNext()) {
                        var step = $t.Current;
                        if (step.Tutorial$TutorialStep$ITutorialStep$Abilities.contains(Tutorial.TutorialStep.Ability.Answerable)) {
                            collectionOfQuestionNumbers.add(Bridge.toString(currentQuestionNumber));
                            currentQuestionNumber = (currentQuestionNumber + 1) | 0;
                        } else {
                            collectionOfQuestionNumbers.add("");
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return collectionOfQuestionNumbers;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Factories.SyllogismAnswerCheckerActionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Factories.ISyllogismAnswerCheckerActionFactory],
        fields: {
            _moodSpecificAnalysisEngineFactory: null
        },
        alias: ["CreateFor", "Tutorial$TutorialStep$QuestionStep$SyllogismSteps$Factories$ISyllogismAnswerCheckerActionFactory$CreateFor"],
        methods: {
            CreateFor: function (validSyllogismQuestion, mood) {
                this.CreateAnalysisEngineFactoryFor(mood);

                return new Tutorial.TutorialStep.QuestionStep.SyllogismSteps.CheckAnswerForValidSyllogismQuestion.ValidSyllogismAnswerChecker(validSyllogismQuestion, this._moodSpecificAnalysisEngineFactory);
            },
            CreateAnalysisEngineFactoryFor: function (mood) {
                switch (mood) {
                    case Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood.AAA: 
                        this._moodSpecificAnalysisEngineFactory = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.AAA.ValidAaaSyllogismLogicalAnalysisEngineFactory();
                        break;
                    case Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood.AOO: 
                        this._moodSpecificAnalysisEngineFactory = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.AOO.ValidAooSyllogismLogicalAnalysisEngineFactory();
                        break;
                    case Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood.EAE: 
                        this._moodSpecificAnalysisEngineFactory = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.EAE.ValidEaeSyllogismLogicalAnalysisEngineFactory();
                        break;
                    default: 
                        throw new System.Exception("mood passed in that is not handled yet: " + System.Enum.toString(Tutorial.TutorialStep.QuestionStep.SyllogismSteps.Mood, mood));
                }
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.SyllogismSteps.ValidSyllogismQuestionFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.QuestionStep.SyllogismSteps.IValidSyllogismQuestionFactory],
        fields: {
            _syllogismAnswerCheckerActionFactory: null,
            _mood: 0,
            _questionTitle: null,
            _questionTextContent: null
        },
        alias: ["CreateFor", "Tutorial$TutorialStep$QuestionStep$SyllogismSteps$IValidSyllogismQuestionFactory$CreateFor"],
        ctors: {
            ctor: function (syllogismAnswerCheckerActionFactory) {
                this.$initialize();
                Tutorial.TutorialStep.QuestionStep.StepFactory.ctor.call(this);
                this._syllogismAnswerCheckerActionFactory = syllogismAnswerCheckerActionFactory;
            }
        },
        methods: {
            CreateFor: function (questionTitle, questionTextContent, mood) {
                this.InitializeMembers(questionTitle, questionTextContent, mood);
                this.CreateStep();

                return this.Step;
            },
            InitializeMembers: function (questionTitle, questionTextContent, mood) {
                this._mood = mood;
                this._questionTitle = questionTitle;
                this._questionTextContent = questionTextContent;
            },
            GetTitle: function () {
                return this._questionTitle;
            },
            GetPrompt: function () {
                return this._questionTextContent;
            },
            CreateAnswerCheckerAction: function () {
                this.AnswerCheckerAction = this._syllogismAnswerCheckerActionFactory.Tutorial$TutorialStep$QuestionStep$SyllogismSteps$Factories$ISyllogismAnswerCheckerActionFactory$CreateFor(this.Step, this._mood);
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.ChecksASyllogismAnswer;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.ResultsStep.ResultsStepFactory", {
        inherits: [Tutorial.TutorialStep.QuestionStep.StepFactory,Tutorial.TutorialStep.ResultsStep.IResultsStepFactory],
        fields: {
            _stats: null
        },
        alias: ["Create", "Tutorial$TutorialStep$ResultsStep$IResultsStepFactory$Create"],
        methods: {
            Create: function (stats) {
                this.InitializeFields(stats);

                this.CreateBasicTutorialStep$1();
                this.AddAbilities$1();
                this.AddInitialData$1();
                this.CreateAnswerCheckerAction___();
                this.AddAnswerChecker$1();

                return this.Step;
            },
            InitializeFields: function (stats) {
                this._stats = stats;
            },
            CreateBasicTutorialStep$1: function () {
                var title = "Tutorial Results";
                var text = "Here are the statistics for your work in this tutorial:";
                this.Step = new Tutorial.TutorialStep.TutorialStep(title, text);
            },
            AddAbilities$1: function () {
                this.AddDifferentiatingAbility___();
            },
            AddDifferentiatingAbility___: function () {
                this.Step.Tutorial$TutorialStep$ITutorialStep$Abilities.add(Tutorial.TutorialStep.Ability.DisplaysTutorialStats);
            },
            AddInitialData$1: function () {
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.TutorialStats, this._stats);
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnalysisFeedbackCollection, new (System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.AnalysisFeedback.IAnalysisFeedback)).ctor());
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnalysisStatus, Bridge.box(LogicalAnalysisEngine.Status.LogicalAnalysisStatus.NotApplicable, LogicalAnalysisEngine.Status.LogicalAnalysisStatus, System.Enum.toStringFn(LogicalAnalysisEngine.Status.LogicalAnalysisStatus)));
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.AnswerQuestionAttempts, Bridge.box(0, System.Int32));
                this.Step.Tutorial$TutorialStep$ITutorialStep$DataDecorator.add(Tutorial.TutorialStep.Data.IsCompleted, Bridge.box(false, System.Boolean, System.Boolean.toString));
                this.Step.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.add(Tutorial.TutorialStep.ActionName.UpdateAnalysisResults, new Tutorial.TutorialStep.StepAction.TutorialStepActionNullObject());
            },
            CreateAnswerCheckerAction___: function () {
                this.AnswerCheckerAction = new Tutorial.TutorialStep.StepAction.TutorialStepActionNullObject();
            },
            AddAnswerChecker$1: function () {
                this.Step.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.add(Tutorial.TutorialStep.ActionName.CheckThisAnswer, this.AnswerCheckerAction);
            },
            GetTitle: function () {
                return "Tutorial Results";
            },
            GetPrompt: function () {
                return "Here are the statistics for your work in this tutorial:";
            },
            GetDifferentiatingAbility: function () {
                return Tutorial.TutorialStep.Ability.DisplaysTutorialStats;
            },
            CreateAnswerCheckerAction: function () {
                this.AnswerCheckerAction = new Tutorial.TutorialStep.StepAction.TutorialStepActionNullObject();
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.StepAction.TutorialStepActionNullObject", {
        inherits: [Tutorial.TutorialStep.StepAction.ITutorialStepAction],
        alias: ["Execute", "Tutorial$TutorialStep$StepAction$ITutorialStepAction$Execute"],
        methods: {
            Execute: function (data) { }
        }
    });

    Bridge.define("Tutorial.TutorialStep.StepAction.UpdateAnalysisResults", {
        inherits: [Tutorial.TutorialStep.StepAction.ITutorialStepAction],
        fields: {
            _tutorialStep: null
        },
        alias: ["Execute", "Tutorial$TutorialStep$StepAction$ITutorialStepAction$Execute"],
        ctors: {
            ctor: function (tutorialStep) {
                this.$initialize();
                this._tutorialStep = tutorialStep;
            }
        },
        methods: {
            Execute: function (analysisDataRawObject) {
                var analysisData = Bridge.cast(analysisDataRawObject, Tutorial.TutorialStep.StepAction.AnalysisData);
                this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnalysisStatus, Bridge.box(analysisData.LogicalAnalysisStatus, LogicalAnalysisEngine.Status.LogicalAnalysisStatus, System.Enum.toStringFn(LogicalAnalysisEngine.Status.LogicalAnalysisStatus)));
                this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnalysisFeedbackCollection, analysisData.AnalysisFeedbackCollection);
                this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.IsCompleted, Bridge.box(true, System.Boolean, System.Boolean.toString));
                this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts, Bridge.box((System.Nullable.getValue(Bridge.cast(Bridge.unbox(this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts), System.Int32), System.Int32)) + 1) | 0, System.Int32));
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.TutorialStep", {
        inherits: [Tutorial.TutorialStep.ITutorialStep],
        fields: {
            Title: null,
            TextContent: null,
            Abilities: null,
            DataDecorator: null,
            ActionsDecorator: null
        },
        alias: [
            "Title", "Tutorial$TutorialStep$ITutorialStep$Title",
            "TextContent", "Tutorial$TutorialStep$ITutorialStep$TextContent",
            "Abilities", "Tutorial$TutorialStep$ITutorialStep$Abilities",
            "DataDecorator", "Tutorial$TutorialStep$ITutorialStep$DataDecorator",
            "ActionsDecorator", "Tutorial$TutorialStep$ITutorialStep$ActionsDecorator",
            "Complete", "Tutorial$TutorialStep$ITutorialStep$Complete"
        ],
        ctors: {
            ctor: function (title, textContent) {
                this.$initialize();
                this.Title = title;
                this.TextContent = textContent;

                this.Abilities = new (System.Collections.ObjectModel.Collection$1(Tutorial.TutorialStep.Ability)).ctor();
                this.DataDecorator = new (System.Collections.Generic.Dictionary$2(Tutorial.TutorialStep.Data,System.Object)).ctor();
                this.ActionsDecorator = new (System.Collections.Generic.Dictionary$2(Tutorial.TutorialStep.ActionName,Tutorial.TutorialStep.StepAction.ITutorialStepAction)).ctor();
            }
        },
        methods: {
            Complete: function () {
                this.DataDecorator.setItem(Tutorial.TutorialStep.Data.IsCompleted, Bridge.box(true, System.Boolean, System.Boolean.toString));
            }
        }
    });

    Bridge.define("TutorialPersistence.DataObject.TutorialDataObjectHtml5", {
        inherits: [TutorialPersistence.DataObject.ITutorialDataObject],
        fields: {
            SelectedStep: 0,
            OverallAnswerQuestionAttempts: 0,
            OverallQuestionsAnsweredCorrectly: 0,
            OverallQuestionsAnsweredIncorrectly: 0,
            TotalQuestions: 0,
            SubmittedAnswers: null,
            CompletedStatuses: null,
            AnalysisStatuses: null,
            AnswerQuestionAttempts: null
        },
        alias: [
            "SelectedStep", "TutorialPersistence$DataObject$ITutorialDataObject$SelectedStep",
            "OverallAnswerQuestionAttempts", "TutorialPersistence$DataObject$ITutorialDataObject$OverallAnswerQuestionAttempts",
            "OverallQuestionsAnsweredCorrectly", "TutorialPersistence$DataObject$ITutorialDataObject$OverallQuestionsAnsweredCorrectly",
            "OverallQuestionsAnsweredIncorrectly", "TutorialPersistence$DataObject$ITutorialDataObject$OverallQuestionsAnsweredIncorrectly",
            "TotalQuestions", "TutorialPersistence$DataObject$ITutorialDataObject$TotalQuestions"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.SelectedStep = 0;
                this.SubmittedAnswers = "";
                this.CompletedStatuses = "";
                this.AnalysisStatuses = "";
                this.AnswerQuestionAttempts = "";
            }
        }
    });

    Bridge.define("TutorialPersistence.DataObject.TutorialDataObjectWpf", {
        inherits: [TutorialPersistence.DataObject.ITutorialDataObject],
        fields: {
            SelectedStep: 0,
            OverallAnswerQuestionAttempts: 0,
            OverallQuestionsAnsweredCorrectly: 0,
            OverallQuestionsAnsweredIncorrectly: 0,
            TotalQuestions: 0,
            SubmittedAnswers: null,
            CompletedStatuses: null,
            AnalysisStatuses: null,
            AnswerQuestionAttempts: null
        },
        alias: [
            "SelectedStep", "TutorialPersistence$DataObject$ITutorialDataObject$SelectedStep",
            "OverallAnswerQuestionAttempts", "TutorialPersistence$DataObject$ITutorialDataObject$OverallAnswerQuestionAttempts",
            "OverallQuestionsAnsweredCorrectly", "TutorialPersistence$DataObject$ITutorialDataObject$OverallQuestionsAnsweredCorrectly",
            "OverallQuestionsAnsweredIncorrectly", "TutorialPersistence$DataObject$ITutorialDataObject$OverallQuestionsAnsweredIncorrectly",
            "TotalQuestions", "TutorialPersistence$DataObject$ITutorialDataObject$TotalQuestions"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.InitData();
            }
        },
        methods: {
            InitData: function () {
                this.SelectedStep = 0;
                this.OverallAnswerQuestionAttempts = 0;
                this.OverallQuestionsAnsweredCorrectly = 0;
                this.OverallQuestionsAnsweredIncorrectly = 0;
                this.TotalQuestions = 0;
                this.SubmittedAnswers = new (System.Collections.ObjectModel.Collection$1(System.Collections.ObjectModel.Collection$1(System.String))).ctor();
                this.CompletedStatuses = new (System.Collections.ObjectModel.Collection$1(System.Boolean)).ctor();
                this.AnalysisStatuses = new (System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.Status.LogicalAnalysisStatus)).ctor();
                this.AnswerQuestionAttempts = new (System.Collections.ObjectModel.Collection$1(System.Int32)).ctor();
            }
        }
    });

    Bridge.define("TutorialPersistence.Deserializer.NullObjects.TutorialDeserializerNullObjectHtml5", {
        inherits: [TutorialPersistence.Deserializer.ITutorialDeserializer],
        alias: ["Deserialize", "TutorialPersistence$Deserializer$ITutorialDeserializer$Deserialize"],
        methods: {
            Deserialize: function () {
                return new TutorialPersistence.DataObject.TutorialDataObjectHtml5();
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.DeserializeTutorial", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction],
        fields: {
            _tutorialDeserializer: null
        },
        alias: ["Execute", "TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute"],
        ctors: {
            ctor: function (tutorialDeserializer) {
                this.$initialize();
                this._tutorialDeserializer = tutorialDeserializer;
            }
        },
        methods: {
            Execute: function (factoryData) {
                factoryData.TutorialDataObject = this._tutorialDeserializer.TutorialPersistence$Deserializer$ITutorialDeserializer$Deserialize();
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedDataIntoSteps", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction],
        fields: {
            StepVMs: null,
            StepVM: null,
            RawTutorialStep: null
        },
        alias: ["Execute", "TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                this.GetTutorialDataObject(factoryData);
                this.SetSelectedStep(factoryData, this.GetTutorialDataObjectsSelectedStep());
                this.GetStepVMs(factoryData);
                this.LoadDataObjectsStepDataIntoLists();
                this.LoadEachStepFromTutorialDataObject();
            },
            SetSelectedStep: function (factoryData, stepToSelect) {
                var stepListVM = factoryData.TutorialViewModel.TutorialVm$ITutorialViewModel$StepList;
                stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$DeselectCurrentStep();
                stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$SelectThisStep(stepToSelect);
            },
            GetStepVMs: function (factoryData) {
                this.StepVMs = factoryData.TutorialViewModel.TutorialVm$ITutorialViewModel$GetTutorialStepViewModels();
            },
            LoadEachStepFromTutorialDataObject: function () {
                for (var i = 0; i < this.StepVMs.Count; i = (i + 1) | 0) {
                    this.GetStepVMAndRawStep(i);
                    this.LoadSubmittedAnswer(i);
                    this.LoadAnalysisStatus(i);
                    this.LoadCompletedStatus(i);
                    this.LoadAnswerQuestionAttempts(i);
                }
            },
            GetStepVMAndRawStep: function (i) {
                this.StepVM = this.StepVMs.getItem(i);
                this.RawTutorialStep = this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawTutorialStep();
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.ReinitDeserializedTutorial", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction],
        statics: {
            methods: {
                ReInitThisStep: function (step) {
                    step.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$CheckThisAnswer();
                    TutorialVm.Factory.SetupVmDataAction.ReinitDeserializedTutorial.Subtract1FromAnswerQuestionAttemptsSinceReCheckingAnswerHereShouldNotCountAgainstTheUser(step);
                    step.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateAllStepPartsToPostAnswerState();
                },
                Subtract1FromAnswerQuestionAttemptsSinceReCheckingAnswerHereShouldNotCountAgainstTheUser: function (step) {
                    var rawTutorialStep = step.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawTutorialStep();
                    rawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts, Bridge.box((System.Nullable.getValue(Bridge.cast(Bridge.unbox(rawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts), System.Int32), System.Int32)) - 1) | 0, System.Int32));
                }
            }
        },
        fields: {
            _tutorialViewModel: null,
            _setInitialFocusForCurrentStepVisitor: null,
            _updateAllPropertiesOfTutorialAndSelectedStepVisitor: null
        },
        alias: ["Execute", "TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute"],
        ctors: {
            ctor: function (setInitialFocusForCurrentStepVisitor, updateAllPropertiesOfTutorialAndSelectedStepVisitor) {
                this.$initialize();
                this._setInitialFocusForCurrentStepVisitor = setInitialFocusForCurrentStepVisitor;
                this._updateAllPropertiesOfTutorialAndSelectedStepVisitor = updateAllPropertiesOfTutorialAndSelectedStepVisitor;
            }
        },
        methods: {
            Execute: function (factoryData) {
                this._tutorialViewModel = factoryData.TutorialViewModel;
                this.ReinitEachStepIfNeeded();
                this.ReinitTutorialAndSelectedStep();
            },
            ReinitEachStepIfNeeded: function () {
                var $t;
                $t = Bridge.getEnumerator(this._tutorialViewModel.TutorialVm$ITutorialViewModel$GetTutorialStepViewModels());
                try {
                    while ($t.moveNext()) {
                        var step = $t.Current;
                        if (this.LogicalAnlaysisIsPassOrFail(step)) {
                            TutorialVm.Factory.SetupVmDataAction.ReinitDeserializedTutorial.ReInitThisStep(step);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            LogicalAnlaysisIsPassOrFail: function (step) {
                return step.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStepAnalysisStatus() === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass || step.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStepAnalysisStatus() === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail;
            },
            ReinitTutorialAndSelectedStep: function () {
                this._tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._updateAllPropertiesOfTutorialAndSelectedStepVisitor);
                this._tutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._setInitialFocusForCurrentStepVisitor);
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.SetupMostSubVMsData", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction],
        alias: ["Execute", "TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                factoryData.TutorialViewModelData.Tutorial = factoryData.Tutorial;
                factoryData.TutorialViewModelData.SelectNextStep = new TutorialVm.SelectNextStep.SelectNextStepViewModel(factoryData.SetInitialFocusForCurrentStepVisitor, factoryData.UpdateAllPropertiesOfTutorialAndSelectedStepVisitor, factoryData.PersistTutorialVisitor);
                factoryData.TutorialViewModelData.SelectPreviousStep = new TutorialVm.SelectPreviousStep.SelectPreviousStepViewModel(factoryData.UpdateAllPropertiesOfTutorialAndSelectedStepVisitor, factoryData.PersistTutorialVisitor);
                factoryData.TutorialViewModelData.ProgressBar = new TutorialVm.ProgressBar.ProgressBarViewModel();
                factoryData.TutorialViewModelData.PropositionInspector = new TutorialVm.PropositionInspector.PropositionInspectorVisibilityViewModel();
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.SetupStepList.SetupStepListData", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction],
        fields: {
            _tutorialStepQuestionNumberGenerator: null,
            _factoryData: null
        },
        alias: ["Execute", "TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute"],
        ctors: {
            ctor: function (tutorialStepQuestionNumberGenerator) {
                this.$initialize();
                this._tutorialStepQuestionNumberGenerator = tutorialStepQuestionNumberGenerator;
            }
        },
        methods: {
            Execute: function (factoryData) {
                this._factoryData = factoryData;
                this.CreateEachVMStep();
                this._factoryData.TutorialViewModelData.StepList = new TutorialVm.StepList.TutorialStepListViewModel(this._factoryData.VMsteps, this._factoryData.Tutorial);
            },
            CreateEachVMStep: function () {
                var tutorialStepViewModelFactory = new TutorialVm.TutorialStep.Factory.TutorialStepViewModelFactory(this._factoryData.AppearanceManagerWrapper, this._factoryData.Messenger, this._factoryData.PersistTutorialVisitor);
                var tutorialSteps = this._factoryData.Tutorial.Tutorial$ITutorial$Steps;
                var tutorialStepQuestionNumbers = this._tutorialStepQuestionNumberGenerator.Tutorial$TutorialStep$QuestionStep$StepNumberGenerator$IQuestionNumberGenerator$Execute(tutorialSteps);

                this._factoryData.VMsteps = new (System.Collections.ObjectModel.ObservableCollection$1(TutorialVm.TutorialStep.ITutorialStepViewModel)).ctor();
                for (var i = 0; i < tutorialSteps.Count; i = (i + 1) | 0) {
                    this._factoryData.VMsteps.add(tutorialStepViewModelFactory.Create(tutorialSteps.getItem(i), tutorialStepQuestionNumbers.getItem(i)));
                }
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.SetupVisitors", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction],
        alias: ["Execute", "TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                factoryData.SetInitialFocusForCurrentStepVisitor = new TutorialVm.Visitors.SetInitialFocusForSelectedStep.SetInitialFocusForCurrentStepVisitor();
                factoryData.UpdateAllPropertiesOfTutorialAndSelectedStepVisitor = new TutorialVm.Visitors.UpdateAllPropertiesOfTutorialAndSelectedStep.UpdateAllPropertiesOfTutorialAndSelectedStepVisitor();
                factoryData.InitializeTutorialVMVisitor = new TutorialVm.Visitors.Initialize.InitializeTutorialVMVisitor(factoryData.SetInitialFocusForCurrentStepVisitor);
                factoryData.TutorialViewModelData.HandleNewStepVMSelectedVisitor = new TutorialVm.StepList.Visitors.HandleNewStepSelected.HandleNewStepVMSelectedVisitor(factoryData.SetInitialFocusForCurrentStepVisitor, factoryData.UpdateAllPropertiesOfTutorialAndSelectedStepVisitor, factoryData.PersistTutorialVisitor);
            }
        }
    });

    Bridge.define("TutorialVm.Factory.TutorialViewModelFactory", {
        inherits: [TutorialVm.Factory.ITutorialViewModelFactory],
        fields: {
            _setupTutorialVmDataActionChecorater: null,
            _loadInDeserializedTutorialActionChecorater: null,
            _factoryData: null,
            _appearanceManagerWrapper: null,
            _messenger: null,
            _persistTutorialVisitor: null,
            _fileReader: null,
            _tutorialDeserializer: null,
            _loadDeserializedDataIntoSteps: null
        },
        alias: [
            "Create", "TutorialVm$Factory$ITutorialViewModelFactory$Create",
            "CreateSubstitute", "TutorialVm$Factory$ITutorialViewModelFactory$CreateSubstitute",
            "GetTutorialDataObject", "TutorialVm$Factory$ITutorialViewModelFactory$GetTutorialDataObject"
        ],
        ctors: {
            ctor: function (appearanceManagerWrapper, messenger, tutorialViewModelPersistenceData) {
                this.$initialize();
                this._factoryData = new TutorialVm.Factory.TutorialViewModelFactoryData();
                this._appearanceManagerWrapper = appearanceManagerWrapper;
                this._messenger = messenger;
                this._persistTutorialVisitor = tutorialViewModelPersistenceData.PersistTutorialVisitor;
                this._tutorialDeserializer = tutorialViewModelPersistenceData.TutorialDeserializer;
                this._loadDeserializedDataIntoSteps = tutorialViewModelPersistenceData.LoadDeserializedDataIntoSteps;
                this._fileReader = tutorialViewModelPersistenceData.FileReader;
                this.LoadSetupTutorialVmDataActionChecorater();
            }
        },
        methods: {
            LoadSetupTutorialVmDataActionChecorater: function () {
                this._setupTutorialVmDataActionChecorater = new (System.Collections.ObjectModel.Collection$1(TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction)).ctor();
                this._setupTutorialVmDataActionChecorater.add(new TutorialVm.Factory.SetupVmDataAction.SetupVisitors());
                this._setupTutorialVmDataActionChecorater.add(new TutorialVm.Factory.SetupVmDataAction.SetupMostSubVMsData());
                this._setupTutorialVmDataActionChecorater.add(new TutorialVm.Factory.SetupVmDataAction.SetupStepList.SetupStepListData(new Tutorial.TutorialStep.QuestionStep.StepNumberGenerator.QuestionNumberGenerator()));
            },
            Create: function (tutorial, loadDataFromFile) {
                if (loadDataFromFile === void 0) { loadDataFromFile = false; }
                this.SetupFactoryData(tutorial);
                this.SetupTutorialViewModelData();
                this._factoryData.TutorialViewModel = new TutorialVm.TutorialViewModel(this._factoryData.TutorialViewModelData);
                this._factoryData.TutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._factoryData.InitializeTutorialVMVisitor);
                if (loadDataFromFile) {
                    this.LoadInDeserializedTutorial();
                }
                return this._factoryData.TutorialViewModel;
            },
            CreateSubstitute: function (tutorial) {
                this.SetupFactoryData(tutorial);
                this.SetupTutorialViewModelData();
                this._factoryData.TutorialViewModel = new SocraLogicHtml5.Substitute.Substituter().GetTutorialViewModelPartialSubstitute(this._factoryData.TutorialViewModelData);
                this._factoryData.TutorialViewModel.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._factoryData.InitializeTutorialVMVisitor);
                return this._factoryData.TutorialViewModel;
            },
            GetTutorialDataObject: function () {
                return this._factoryData.TutorialDataObject;
            },
            SetupFactoryData: function (tutorial) {
                this._factoryData.TutorialViewModelData = new TutorialVm.Data.TutorialViewModelData();
                this._factoryData.Tutorial = tutorial;
                this._factoryData.AppearanceManagerWrapper = this._appearanceManagerWrapper;
                this._factoryData.Messenger = this._messenger;
                this._factoryData.PersistTutorialVisitor = this._persistTutorialVisitor;
            },
            SetupTutorialViewModelData: function () {
                var $t;
                $t = Bridge.getEnumerator(this._setupTutorialVmDataActionChecorater);
                try {
                    while ($t.moveNext()) {
                        var vmDataAction = $t.Current;
                        vmDataAction.TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute(this._factoryData);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            LoadInDeserializedTutorial: function () {
                var $t;
                this.SetupLoadInDeserializedTutorialActionChecorater();
                $t = Bridge.getEnumerator(this._loadInDeserializedTutorialActionChecorater);
                try {
                    while ($t.moveNext()) {
                        var vmDataAction = $t.Current;
                        vmDataAction.TutorialVm$Factory$SetupVmDataAction$ISetupTutorialVmDataAction$Execute(this._factoryData);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            SetupLoadInDeserializedTutorialActionChecorater: function () {
                this._loadInDeserializedTutorialActionChecorater = new (System.Collections.ObjectModel.Collection$1(TutorialVm.Factory.SetupVmDataAction.ISetupTutorialVmDataAction)).ctor();
                if (this.TutorialFileExists()) {
                    this._loadInDeserializedTutorialActionChecorater.add(new TutorialVm.Factory.SetupVmDataAction.DeserializeTutorial(this._tutorialDeserializer));
                    this._loadInDeserializedTutorialActionChecorater.add(this._loadDeserializedDataIntoSteps);
                    var reinitDeserializedTutorial = new TutorialVm.Factory.SetupVmDataAction.ReinitDeserializedTutorial(this._factoryData.SetInitialFocusForCurrentStepVisitor, this._factoryData.UpdateAllPropertiesOfTutorialAndSelectedStepVisitor);
                    this._loadInDeserializedTutorialActionChecorater.add(reinitDeserializedTutorial);
                }
            },
            TutorialFileExists: function () {
                var tutorialDictionaryFactory = new Tutorial.Dictionaries.TutorialDictionaryFactory();
                var tutorialNameToXmlFileNameDictionary = tutorialDictionaryFactory.CreateTutorialNameToXmlFileNameDictionary();

                return this._fileReader.FilePersistence$File$FileReader$IFileReader$Exists(tutorialNameToXmlFileNameDictionary.getItem(this._factoryData.Tutorial.Tutorial$ITutorial$Name));
            }
        }
    });

    Bridge.define("TutorialVm.ITutorialViewModel", {
        inherits: [TutorialVm.Visitors.ITutorialViewModelVisitable],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.ProgressBar.ProgressBarViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.ProgressBar.IProgressBarViewModel],
        fields: {
            StepList: null
        },
        props: {
            TotalSteps: {
                get: function () {
                    return this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$CountOfSteps();
                }
            },
            CurrentStepNumber: {
                get: function () {
                    return ((this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$CurrentlySelectedStepIndex() + 1) | 0);
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$ProgressBar$IProgressBarViewModel$UpdateAllProperties",
            "StepList", "TutorialVm$ProgressBar$IProgressBarViewModel$StepList",
            "TotalSteps", "TutorialVm$ProgressBar$IProgressBarViewModel$TotalSteps",
            "CurrentStepNumber", "TutorialVm$ProgressBar$IProgressBarViewModel$CurrentStepNumber"
        ],
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("TotalSteps");
                this.OnPropertyChanged("CurrentStepNumber");
            }
        }
    });

    Bridge.define("TutorialVm.PropositionInspector.PropositionInspectorVisibilityViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.PropositionInspector.IPropositionInspectorVisibilityViewModel],
        fields: {
            _visible: false,
            _hideButtonVisible: false,
            _commandsCanExecute: false,
            _showButtonVisible: false
        },
        props: {
            Visible: {
                get: function () {
                    return this._visible;
                },
                set: function (value) {
                    this._visible = value;
                    this.OnPropertyChanged("Visible");
                }
            },
            HideButtonVisible: {
                get: function () {
                    return this._hideButtonVisible;
                },
                set: function (value) {
                    this._hideButtonVisible = value;
                    this.OnPropertyChanged("HideButtonVisible");
                }
            },
            ShowButtonVisible: {
                get: function () {
                    return this._showButtonVisible;
                },
                set: function (value) {
                    this._showButtonVisible = value;
                    this.OnPropertyChanged("ShowButtonVisible");
                }
            },
            Hide: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.HidePropositionDataCommandHandler), this._commandsCanExecute);
                }
            },
            Show: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.ShowPropositionDataCommandHandler), this._commandsCanExecute);
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$PropositionInspector$IPropositionInspectorVisibilityViewModel$UpdateAllProperties",
            "Visible", "TutorialVm$PropositionInspector$IPropositionInspectorVisibilityViewModel$Visible",
            "HideButtonVisible", "TutorialVm$PropositionInspector$IPropositionInspectorVisibilityViewModel$HideButtonVisible",
            "ShowButtonVisible", "TutorialVm$PropositionInspector$IPropositionInspectorVisibilityViewModel$ShowButtonVisible",
            "Hide", "TutorialVm$PropositionInspector$IPropositionInspectorVisibilityViewModel$Hide",
            "Show", "TutorialVm$PropositionInspector$IPropositionInspectorVisibilityViewModel$Show"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._commandsCanExecute = true;
                this._visible = true;
                this._hideButtonVisible = true;
                this._showButtonVisible = false;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Visible");
                this.OnPropertyChanged("HideButtonVisible");
                this.OnPropertyChanged("ShowButtonVisible");
            },
            HidePropositionDataCommandHandler: function () {
                this.Visible = false;
                this.HideButtonVisible = false;
                this.ShowButtonVisible = true;
            },
            ShowPropositionDataCommandHandler: function () {
                this.Visible = true;
                this.HideButtonVisible = true;
                this.ShowButtonVisible = false;
            }
        }
    });

    Bridge.define("TutorialVm.SelectNextStep.SelectNextStepViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.SelectNextStep.ISelectNextStepViewModel],
        fields: {
            _commandsCanExecute: false,
            _focused: false,
            _setInitialFocusForCurrentStepVisitor: null,
            _updateAllPropertiesOfTutorialAndSelectedStepVisitor: null,
            _persistTutorialVisitor: null,
            TutorialVM: null,
            StepList: null
        },
        props: {
            Enabled: {
                get: function () {
                    if (this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsTheLastStep()) {
                        return false;
                    }
                    if (this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsAnswerable()) {
                        return this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsCompleted();
                    } else {
                        return true;
                    }
                }
            },
            Focused: {
                get: function () {
                    return this._focused;
                },
                set: function (value) {
                    this._focused = value;
                    this.OnPropertyChanged("Focused");
                }
            },
            IconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetButtonIconBrush(this.Enabled);
                }
            },
            Command: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.NextStepCommandHandler), this._commandsCanExecute);
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$UpdateAllProperties",
            "Enabled", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$Enabled",
            "Focused", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$Focused",
            "TutorialVM", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$TutorialVM",
            "StepList", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$StepList",
            "IconBrush", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$IconBrush",
            "Command", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$Command",
            "ToggleFocusToTrue", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$ToggleFocusToTrue",
            "ToggleFocusToFalse", "TutorialVm$SelectNextStep$ISelectNextStepViewModel$ToggleFocusToFalse"
        ],
        ctors: {
            ctor: function (setInitialFocusForCurrentStepVisitor, updateAllPropertiesOfTutorialAndSelectedStepVisitor, persistTutorialVisitor) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._setInitialFocusForCurrentStepVisitor = setInitialFocusForCurrentStepVisitor;
                this._updateAllPropertiesOfTutorialAndSelectedStepVisitor = updateAllPropertiesOfTutorialAndSelectedStepVisitor;
                this._persistTutorialVisitor = persistTutorialVisitor;
                this._commandsCanExecute = true;
                this._focused = false;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Enabled");
                this.OnPropertyChanged("Focused");
                this.OnPropertyChanged("IconBrush");
            },
            NextStepCommandHandler: function () {
                if (this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsTheLastStep()) {
                    return;
                }
                this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$CompleteCurrentStepIfItsAContentStep();
                this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$DeselectCurrentStep();
                this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectTheNextStep();
                this.TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._updateAllPropertiesOfTutorialAndSelectedStepVisitor);
                this.TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._setInitialFocusForCurrentStepVisitor);
                this.TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._persistTutorialVisitor);
            },
            ToggleFocusToTrue: function () {
                this.Focused = false;
                this.Focused = true;
            },
            ToggleFocusToFalse: function () {
                this.Focused = true;
                this.Focused = false;
            }
        }
    });

    Bridge.define("TutorialVm.SelectPreviousStep.SelectPreviousStepViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.SelectPreviousStep.ISelectPreviousStepViewModel],
        fields: {
            _commandsCanExecute: false,
            _updateAllPropertiesOfTutorialAndSelectedStepVisitor: null,
            _persistTutorialVisitor: null,
            TutorialVM: null,
            StepList: null
        },
        props: {
            Enabled: {
                get: function () {
                    return this.SelectedStepIsAnyStepExceptTheFirstStep();
                }
            },
            IconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetButtonIconBrush(this.Enabled);
                }
            },
            Command: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.SelectPreviousStepCommandHandler), this._commandsCanExecute);
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$UpdateAllProperties",
            "TutorialVM", "TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$TutorialVM",
            "StepList", "TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$StepList",
            "Enabled", "TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$Enabled",
            "IconBrush", "TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$IconBrush",
            "Command", "TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$Command"
        ],
        ctors: {
            ctor: function (updateAllPropertiesOfTutorialAndSelectedStepVisitor, persistTutorialVisitor) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._updateAllPropertiesOfTutorialAndSelectedStepVisitor = updateAllPropertiesOfTutorialAndSelectedStepVisitor;
                this._persistTutorialVisitor = persistTutorialVisitor;
                this._commandsCanExecute = true;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Enabled");
                this.OnPropertyChanged("IconBrush");
            },
            SelectedStepIsAnyStepExceptTheFirstStep: function () {
                return !this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsTheFirstStep();
            },
            UpdateTutorialAndSelectedStep: function () {
                this.TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._updateAllPropertiesOfTutorialAndSelectedStepVisitor);
            },
            PersistTutorial: function () {
                this.TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._persistTutorialVisitor);
            },
            SelectPreviousStepCommandHandler: function () {
                if (this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsTheFirstStep()) {
                    return;
                }
                this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$DeselectCurrentStep();
                this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectThePreviousStep();
                this.UpdateTutorialAndSelectedStep();
                this.PersistTutorial();
            }
        }
    });

    Bridge.define("TutorialVm.StepList.ITutorialStepListViewModel", {
        inherits: [TutorialVm.StepList.Visitors.INewStepSelectionVisitable],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.StepList.Visitors.HandleNewStepSelected.IHandleNewStepVMSelectedVisitor", {
        inherits: [TutorialVm.StepList.Visitors.INewStepSelectionVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Abilities.AbilitiesViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.Abilities.IAbilitiesViewModel],
        fields: {
            _isCompletable: false,
            _isAnswerable: false,
            _checksAPropositionAnswer: false
        },
        props: {
            IsCompletable: {
                get: function () {
                    return this._isCompletable;
                }
            },
            IsAnswerable: {
                get: function () {
                    return this._isAnswerable;
                }
            },
            ChecksAPropositionAnswer: {
                get: function () {
                    return this._checksAPropositionAnswer;
                }
            }
        },
        alias: [
            "IsCompletable", "TutorialVm$TutorialStep$Abilities$IAbilitiesViewModel$IsCompletable",
            "IsAnswerable", "TutorialVm$TutorialStep$Abilities$IAbilitiesViewModel$IsAnswerable",
            "ChecksAPropositionAnswer", "TutorialVm$TutorialStep$Abilities$IAbilitiesViewModel$ChecksAPropositionAnswer",
            "UpdateAllProperties", "TutorialVm$TutorialStep$Abilities$IAbilitiesViewModel$UpdateAllProperties"
        ],
        ctors: {
            ctor: function (abilitiesVMData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._isCompletable = abilitiesVMData.IsCompletable;
                this._isAnswerable = abilitiesVMData.IsAnswerable;
                this._checksAPropositionAnswer = abilitiesVMData.ChecksAPropositionAnswer;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("IsCompletable");
                this.OnPropertyChanged("IsAnswerable");
                this.OnPropertyChanged("ChecksAPropositionAnswer");
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.CheckAnswer.CheckAnswerViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.CheckAnswer.ICheckAnswerViewModel],
        fields: {
            _tutorialStep: null,
            _visible: false,
            _enabled: false,
            _updateToPostAnswerStateVisitor: null,
            _updateAllPropertiesOfMeAndMyParentVisitor: null,
            _updateFocusToPostAnswerStateVisitor: null,
            _persistTutorialVisitor: null,
            CommandsCanExecute: false,
            TutorialStepVM: null,
            StudentAnswer: null,
            StudentAnswer2: null,
            StudentAnswer3: null
        },
        props: {
            IconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetButtonIconBrush(this.Enabled);
                }
            },
            Check: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.CheckAnswerCommandHandler), this.CommandsCanExecute);
                }
            },
            Visible: {
                get: function () {
                    return this._visible;
                },
                set: function (value) {
                    this._visible = value;
                    this.OnPropertyChanged("Visible");
                }
            },
            Enabled: {
                get: function () {
                    return this._enabled;
                },
                set: function (value) {
                    this._enabled = value;
                    this.OnPropertyChanged("Enabled");
                    this.OnPropertyChanged("IconBrush");
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateAllProperties",
            "CommandsCanExecute", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$CommandsCanExecute",
            "TutorialStepVM", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$TutorialStepVM",
            "StudentAnswer", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$StudentAnswer",
            "StudentAnswer2", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$StudentAnswer2",
            "StudentAnswer3", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$StudentAnswer3",
            "IconBrush", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$IconBrush",
            "Check", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$Check",
            "CheckThisAnswer", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$CheckThisAnswer",
            "UpdateAllStepPartsToPostAnswerState", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateAllStepPartsToPostAnswerState",
            "Visible", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$Visible",
            "Enabled", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$Enabled",
            "UpdateToPostAnswerState", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateToPostAnswerState",
            "UpdateToAnswerSubmissionState", "TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateToAnswerSubmissionState"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this.CommandsCanExecute = vmData.CommandsCanExecute;
                this._tutorialStep = vmData.TutorialStep;
                this._visible = vmData.Visible;
                this._enabled = vmData.Enabled;
                this._updateToPostAnswerStateVisitor = vmData.UpdateToPostAnswerStateVisitor;
                this._updateAllPropertiesOfMeAndMyParentVisitor = vmData.UpdateAllPropertiesOfMeAndMyParentVisitor;
                this._updateFocusToPostAnswerStateVisitor = vmData.UpdateFocusToPostAnswerStateVisitor;
                this._persistTutorialVisitor = vmData.PersistTutorialVisitor;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Visible");
                this.OnPropertyChanged("Enabled");
                this.OnPropertyChanged("IconBrush");
            },
            CheckAnswerCommandHandler: function () {
                this.CheckThisAnswer();
                this.UpdateAllStepPartsToPostAnswerState();
                this.PersistTutorial();
            },
            CheckThisAnswer: function () {
                if (this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$Abilities.contains(Tutorial.TutorialStep.Ability.ChecksASyllogismAnswer)) {
                    var propositionFactory = new Proposition.Factory.PropositionFactory();
                    var argumentFactory = new Argument.Factory.ArgumentFactory(propositionFactory);
                    var studentsPropositions = new (System.Collections.ObjectModel.Collection$1(Proposition.IProposition)).ctor();
                    studentsPropositions.add(propositionFactory.Create(this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw));
                    studentsPropositions.add(propositionFactory.Create(this.StudentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw));
                    studentsPropositions.add(propositionFactory.Create(this.StudentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw));
                    var studentsArgumentAnswer = argumentFactory.Create$1("Student's Argument Answer", studentsPropositions);
                    this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.getItem(Tutorial.TutorialStep.ActionName.CheckThisAnswer).Tutorial$TutorialStep$StepAction$ITutorialStepAction$Execute(studentsArgumentAnswer);
                } else {
                    this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$ActionsDecorator.getItem(Tutorial.TutorialStep.ActionName.CheckThisAnswer).Tutorial$TutorialStep$StepAction$ITutorialStepAction$Execute(this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw);
                }

            },
            UpdateAllStepPartsToPostAnswerState: function () {
                this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._updateToPostAnswerStateVisitor);
                this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._updateAllPropertiesOfMeAndMyParentVisitor);
                this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._updateFocusToPostAnswerStateVisitor);
            },
            PersistTutorial: function () {
                this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$ParentTutorial.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._persistTutorialVisitor);
            },
            UpdateToPostAnswerState: function () {
                this.Visible = false;
                this.Enabled = false;
            },
            UpdateToAnswerSubmissionState: function () {
                this.Visible = true;
                this.Enabled = true;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel", {
        inherits: [TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.ICreatePropositionViewModelStrategy],
        fields: {
            _propositionFactory: null,
            _propositionViewModelFactory: null
        },
        alias: ["Execute", "TutorialVm$TutorialStep$CreatePropositionViewModelStrategy$ICreatePropositionViewModelStrategy$Execute"],
        ctors: {
            ctor: function (propositionViewModelFactory, propositionFactory) {
                this.$initialize();
                this._propositionViewModelFactory = propositionViewModelFactory;
                this._propositionFactory = propositionFactory;
            }
        },
        methods: {
            Execute: function (rawPropositionSentence) {
                var proposition = this._propositionFactory.Proposition$Factory$IPropositionFactory$Create(rawPropositionSentence, true, true);
                return this._propositionViewModelFactory.PropositionVm$Factory$IPropositionViewModelFactory$Create(proposition);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModelNullObject", {
        inherits: [TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.ICreatePropositionViewModelStrategy],
        fields: {
            _propositionViewModelFactory: null
        },
        alias: ["Execute", "TutorialVm$TutorialStep$CreatePropositionViewModelStrategy$ICreatePropositionViewModelStrategy$Execute"],
        ctors: {
            ctor: function (propositionViewModelFactory) {
                this.$initialize();
                this._propositionViewModelFactory = propositionViewModelFactory;
            }
        },
        methods: {
            Execute: function (rawPropositionSentence) {
                var propositionViewModel = this._propositionViewModelFactory.PropositionVm$Factory$IPropositionViewModelFactory$CreateBlank();
                propositionViewModel.Items$IItem$ChangeAccessModeTo(Items.AccessMode.ItemAccessMode.Edit);
                return propositionViewModel;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.CreateSubViewModels", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                factoryData.StepVMData.MainFeedback = new TutorialVm.TutorialStep.MainFeedback.MainFeedbackViewModel(factoryData.MainFeedbackVMData);
                factoryData.StepVMData.RetryAnswer = new TutorialVm.TutorialStep.RetryAnswer.RetryAnswerViewModel(factoryData.RetryAnswerVMData);
                factoryData.StepVMData.StudentAnswer = new TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModel(factoryData.StudentAnswerVMData);
                factoryData.StepVMData.StudentAnswer2 = new TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModel(factoryData.StudentAnswerVMData2);
                factoryData.StepVMData.StudentAnswer3 = new TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModel(factoryData.StudentAnswerVMData3);
                factoryData.StepVMData.AnswerCheck = new TutorialVm.TutorialStep.CheckAnswer.CheckAnswerViewModel(factoryData.CheckAnswerVMData);
                factoryData.StepVMData.Abilities = new TutorialVm.TutorialStep.Abilities.AbilitiesViewModel(factoryData.AbilitiesVMData);
                factoryData.StepVMData.Stats = new TutorialVm.TutorialStep.Stats.TutorialStepStatsViewModel(factoryData.StatsVMData);
                factoryData.StepVMData.FeedbackDetail = new TutorialVm.TutorialStep.FeedbackDetail.FeedbackDetailViewModel(factoryData.FeedbackDetailVMData);
                factoryData.StepVMData.PropositionInspector = new TutorialVm.TutorialStep.PropositionInspector.PropositionInspectorViewModel(factoryData.PropositionInspectorVMData);
                factoryData.StepVMData.ListItem = new TutorialVm.TutorialStep.ListItem.ListItemViewModel(factoryData.ListItemVMData);
                factoryData.StepVMData.MainContent = new TutorialVm.TutorialStep.MainContent.MainContentViewModel(factoryData.MainContentVMData);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.CreateVmDataObjects", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                factoryData.StepVMData = new TutorialVm.TutorialStep.Data.StepVMData();
                factoryData.AbilitiesVMData = new TutorialVm.TutorialStep.Abilities.AbilitiesVMData();
                factoryData.StatsVMData = new TutorialVm.TutorialStep.Stats.StatsVMData();
                factoryData.StudentAnswerVMData = new TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModelData();
                factoryData.StudentAnswerVMData2 = new TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModelData();
                factoryData.StudentAnswerVMData3 = new TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModelData();
                factoryData.CheckAnswerVMData = new TutorialVm.TutorialStep.CheckAnswer.CheckAnswerViewModelData();
                factoryData.RetryAnswerVMData = new TutorialVm.TutorialStep.RetryAnswer.RetryAnswerViewModelData();
                factoryData.MainFeedbackVMData = new TutorialVm.TutorialStep.MainFeedback.MainFeedbackViewModelData();
                factoryData.FeedbackDetailVMData = new TutorialVm.TutorialStep.FeedbackDetail.FeedbackDetailViewModelData();
                factoryData.PropositionInspectorVMData = new TutorialVm.TutorialStep.PropositionInspector.PropositionInspectorViewModelData();
                factoryData.ListItemVMData = new TutorialVm.TutorialStep.ListItem.ListItemViewModelData();
                factoryData.MainContentVMData = new TutorialVm.TutorialStep.MainContent.MainContentViewModelData();
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupBaseData", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                factoryData.StepVMData.TutorialStep = factoryData.TutorialStep;
                factoryData.StepVMData.PlaceholderParentTutorial = new SocraLogicHtml5.Substitute.Substituter().GetTutorialViewModelSubstitute();

                factoryData.StepAbilities = factoryData.TutorialStep.Tutorial$TutorialStep$ITutorialStep$Abilities;

                factoryData.FeedbackDetailVMData.TutorialStep = factoryData.TutorialStep;
                factoryData.FeedbackDetailVMData.GraphicFeedbackGridFactory = new TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.GraphicFeedbackGridFactory(factoryData.AppearanceManagerWrapper);

                factoryData.CheckAnswerVMData.TutorialStep = factoryData.TutorialStep;
                factoryData.CheckAnswerVMData.PersistTutorialVisitor = factoryData.PersistTutorialVisitor;

                factoryData.MainFeedbackVMData.TutorialStep = factoryData.TutorialStep;
                factoryData.MainFeedbackVMData.AppearanceManagerWrapper = factoryData.AppearanceManagerWrapper;
                factoryData.MainContentVMData.TutorialStep = factoryData.TutorialStep;

                factoryData.ListItemVMData.TutorialStep = factoryData.TutorialStep;
                factoryData.ListItemVMData.AppearanceManagerWrapper = factoryData.AppearanceManagerWrapper;

                factoryData.StatsVMData.RawTutorialStats = Bridge.cast(factoryData.TutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.TutorialStats), Tutorial.Stats.ITutorialStats);
                factoryData.StatsVMData.AppearanceManagerWrapper = factoryData.AppearanceManagerWrapper;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForAnswerableStepAbility", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        fields: {
            _factoryData: null
        },
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                this._factoryData = factoryData;

                if (this._factoryData.StepAbilities.contains(Tutorial.TutorialStep.Ability.Answerable)) {
                    this.SetupDataForAnswerableStep();
                } else {
                    this.SetupDataForUnanswerableStep();
                }
            },
            SetupDataForAnswerableStep: function () {
                this._factoryData.AbilitiesVMData.IsAnswerable = true;

                this._factoryData.ListItemVMData.IsStepAnswerable = true;
                this._factoryData.ListItemVMData.NotAnsweredIconVisible = true;
                this._factoryData.ListItemVMData.InformationIconVisible = false;
                this._factoryData.ListItemVMData.Number = (this._factoryData.QuestionNumber || "") + ".)";

                this._factoryData.MainContentVMData.Number = this._factoryData.ListItemVMData.Number;
                this._factoryData.MainContentVMData.IsStepAnswerable = true;

                this.SetupAnswerableStudentAnswers();

                this._factoryData.RetryAnswerVMData.CommandsCanExecute = true;

                this._factoryData.CheckAnswerVMData.CommandsCanExecute = true;
                this._factoryData.CheckAnswerVMData.Visible = true;
                this._factoryData.CheckAnswerVMData.Enabled = true;

                this._factoryData.MainFeedbackVMData.NotAnsweredIconVisible = true;
            },
            SetupAnswerableStudentAnswers: function () {
                this._factoryData.StudentAnswerVMData.IsStepAnswerable = true;
                this._factoryData.StudentAnswerVMData.RawVisible = true;
                if (this._factoryData.StepAbilities.contains(Tutorial.TutorialStep.Ability.ChecksASyllogismAnswer)) {
                    this._factoryData.StudentAnswerVMData2.IsStepAnswerable = true;
                    this._factoryData.StudentAnswerVMData3.IsStepAnswerable = true;
                    this._factoryData.StudentAnswerVMData2.RawVisible = true;
                    this._factoryData.StudentAnswerVMData3.RawVisible = true;
                } else {
                    this._factoryData.StudentAnswerVMData2.IsStepAnswerable = true;
                    this._factoryData.StudentAnswerVMData3.IsStepAnswerable = true;
                    this._factoryData.StudentAnswerVMData2.RawVisible = false;
                    this._factoryData.StudentAnswerVMData3.RawVisible = false;
                }
            },
            SetupDataForUnanswerableStep: function () {
                this._factoryData.AbilitiesVMData.IsAnswerable = false;

                this._factoryData.ListItemVMData.IsStepAnswerable = false;
                this._factoryData.ListItemVMData.NotAnsweredIconVisible = false;
                this._factoryData.ListItemVMData.InformationIconVisible = true;
                this._factoryData.ListItemVMData.Number = "";

                this._factoryData.MainContentVMData.Number = "";
                this._factoryData.MainContentVMData.IsStepAnswerable = false;

                this._factoryData.StudentAnswerVMData.IsStepAnswerable = false;
                this._factoryData.StudentAnswerVMData2.IsStepAnswerable = false;
                this._factoryData.StudentAnswerVMData3.IsStepAnswerable = false;
                this._factoryData.StudentAnswerVMData.RawVisible = false;
                this._factoryData.StudentAnswerVMData2.RawVisible = false;
                this._factoryData.StudentAnswerVMData3.RawVisible = false;

                this._factoryData.RetryAnswerVMData.CommandsCanExecute = false;

                this._factoryData.CheckAnswerVMData.CommandsCanExecute = false;
                this._factoryData.CheckAnswerVMData.Visible = true;
                this._factoryData.CheckAnswerVMData.Enabled = false;

                this._factoryData.MainFeedbackVMData.NotAnsweredIconVisible = false;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForCompletableStepAbility", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                if (factoryData.StepAbilities.contains(Tutorial.TutorialStep.Ability.Completable)) {
                    factoryData.AbilitiesVMData.IsCompletable = true;
                } else {
                    factoryData.AbilitiesVMData.IsCompletable = false;
                }
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForPropositionAnswerStepAbility", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        fields: {
            _propositionFactory: null,
            _propositionViewModelFactory: null,
            _createPropositionViewModelNullObject: null,
            _factoryData: null
        },
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                this.SetupCommonData(factoryData);

                if (this._factoryData.StepAbilities.contains(Tutorial.TutorialStep.Ability.ChecksAPropositionAnswer)) {
                    this.SetupDataForStepWithPropositionAnswer();
                } else {
                    if (this._factoryData.StepAbilities.contains(Tutorial.TutorialStep.Ability.ChecksASyllogismAnswer)) {
                        this.SetupDataForStepWithSyllogismAnswer();
                    } else {
                        this.SetupDataForStepWithoutPropositionAnswer();
                    }
                }
            },
            SetupCommonData: function (factoryData) {
                this._factoryData = factoryData;
                this._propositionFactory = new Proposition.Factory.PropositionFactory();
                this._propositionViewModelFactory = new PropositionVm.Factory.PropositionViewModelFactory(this._propositionFactory, this._factoryData.AppearanceManagerWrapper, this._factoryData.Messenger);
                this._createPropositionViewModelNullObject = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModelNullObject(this._propositionViewModelFactory);

                this._factoryData.PropositionInspectorVMData.CreatePropositionViewModelNullObject = this._createPropositionViewModelNullObject;

                this.SetupPropositionPropertiesViewModel();
                this.SetupEulerCirclesViewModel();
            },
            SetupPropositionPropertiesViewModel: function () {
                var propositionPropertiesViewModelFactory = new PropositionPropertiesVm.Factory.PropositionPropertiesViewModelFactory();
                var starterPropositionViewModel = this._propositionViewModelFactory.PropositionVm$Factory$IPropositionViewModelFactory$CreateBlank();
                starterPropositionViewModel.Items$IItem$ChangeAccessModeTo(Items.AccessMode.ItemAccessMode.Edit);
                var starterPropositionPropertiesViewModel = propositionPropertiesViewModelFactory.Create(starterPropositionViewModel, this._propositionViewModelFactory, this._factoryData.Messenger);
                starterPropositionPropertiesViewModel.PropositionPropertiesVm$IPropositionPropertiesViewModel$EditablePropertiesVisible = false;
                this._factoryData.PropositionInspectorVMData.PropositionProperties = starterPropositionPropertiesViewModel;
            },
            SetupEulerCirclesViewModel: function () {
                var eulerCirclesViewModelFactory = new EulerCirclesVm.Factory.EulerCirclesViewModelFactory(this._factoryData.AppearanceManagerWrapper, this._factoryData.Messenger);
                this._factoryData.PropositionInspectorVMData.EulerCircles = eulerCirclesViewModelFactory.Create();
            },
            SetupDataForStepWithPropositionAnswer: function () {
                this._factoryData.AbilitiesVMData.ChecksAPropositionAnswer = true;

                this._factoryData.StudentAnswerVMData.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerForProposition();
                this._factoryData.StudentAnswerVMData2.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerForProposition();
                this._factoryData.StudentAnswerVMData3.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerForProposition();

                this._factoryData.StepVMData.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);
                this._factoryData.StudentAnswerVMData.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);
                this._factoryData.StudentAnswerVMData2.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);
                this._factoryData.StudentAnswerVMData3.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);

                this._factoryData.MainContentVMData.ShowExtraMarginOnTheRight = false;
            },
            SetupDataForStepWithSyllogismAnswer: function () {
                this._factoryData.AbilitiesVMData.ChecksAPropositionAnswer = false;
                this._factoryData.AbilitiesVMData.ChecksASyllogismAnswer = true;

                this._factoryData.StudentAnswerVMData.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerForProposition();
                this._factoryData.StudentAnswerVMData2.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerForProposition();
                this._factoryData.StudentAnswerVMData3.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerForProposition();

                this._factoryData.StepVMData.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);

                this._factoryData.StudentAnswerVMData.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);
                this._factoryData.StudentAnswerVMData2.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);
                this._factoryData.StudentAnswerVMData3.CreatePropositionViewModelStrategy = new TutorialVm.TutorialStep.CreatePropositionViewModelStrategy.CreatePropositionViewModel(this._propositionViewModelFactory, this._propositionFactory);

                this._factoryData.MainContentVMData.ShowExtraMarginOnTheRight = true;
            },
            SetupDataForStepWithoutPropositionAnswer: function () {
                this._factoryData.AbilitiesVMData.ChecksAPropositionAnswer = false;

                this._factoryData.StudentAnswerVMData.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerNullObject();
                this._factoryData.StudentAnswerVMData2.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerNullObject();
                this._factoryData.StudentAnswerVMData3.GetStylizedStrategy = new TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerNullObject();

                this._factoryData.StepVMData.CreatePropositionViewModelStrategy = this._createPropositionViewModelNullObject;
                this._factoryData.StudentAnswerVMData.CreatePropositionViewModelStrategy = this._createPropositionViewModelNullObject;
                this._factoryData.StudentAnswerVMData2.CreatePropositionViewModelStrategy = this._createPropositionViewModelNullObject;
                this._factoryData.StudentAnswerVMData3.CreatePropositionViewModelStrategy = this._createPropositionViewModelNullObject;

                this._factoryData.MainContentVMData.ShowExtraMarginOnTheRight = true;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForStatsStepAbility", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        fields: {
            _factoryData: null
        },
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                this._factoryData = factoryData;

                if (this._factoryData.StepAbilities.contains(Tutorial.TutorialStep.Ability.DisplaysTutorialStats)) {
                    this.SetupDataForStepWithStats();
                } else {
                    this.SetupDataForStepWithoutStats();
                }
            },
            SetupDataForStepWithStats: function () {
                this._factoryData.StatsVMData.TutorialStatsVisible = true;

                this._factoryData.ListItemVMData.InformationIconVisible = false;
                this._factoryData.ListItemVMData.ResultsIconVisible = true;
            },
            SetupDataForStepWithoutStats: function () {
                this._factoryData.StatsVMData.TutorialStatsVisible = false;

                this._factoryData.ListItemVMData.ResultsIconVisible = false;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupVisitorData", {
        inherits: [TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction],
        alias: ["Execute", "TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute"],
        methods: {
            Execute: function (factoryData) {
                var updateAllPropertiesOfMeAndMyParentVisitor = new TutorialVm.TutorialStep.Visitors.UpdateAllPropertiesOfMeAndMyParent.UpdateAllPropertiesOfMeAndMyParentVisitor();

                factoryData.CheckAnswerVMData.UpdateToPostAnswerStateVisitor = new TutorialVm.TutorialStep.Visitors.UpdateToPostAnswerState.UpdateToPostAnswerStateVisitor();
                factoryData.CheckAnswerVMData.UpdateAllPropertiesOfMeAndMyParentVisitor = updateAllPropertiesOfMeAndMyParentVisitor;
                factoryData.CheckAnswerVMData.UpdateFocusToPostAnswerStateVisitor = new TutorialVm.TutorialStep.Visitors.UpdateFocusToPostAnswerState.UpdateFocusToPostAnswerStateVisitor();

                factoryData.RetryAnswerVMData.UpdateToAnswerSubmissionStateVisitor = new TutorialVm.TutorialStep.Visitors.UpdateToAnswerSubmissionState.UpdateToAnswerSubmissionStateVisitor();
                factoryData.RetryAnswerVMData.UpdateAllPropertiesOfMeAndMyParentVisitor = updateAllPropertiesOfMeAndMyParentVisitor;
                factoryData.RetryAnswerVMData.UpdateFocusToAnswerSubmissionStateVisitor = new TutorialVm.TutorialStep.Visitors.UpdateFocusToAnswerSubmissionState.UpdateFocusToAnswerSubmissionStateVisitor();

                factoryData.InitializeVisitor = new TutorialVm.TutorialStep.Visitors.PassStepVMToNeededSubParts.InitializeVisitor();
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Factory.TutorialStepViewModelFactory", {
        inherits: [TutorialVm.TutorialStep.Factory.ITutorialStepViewModelFactory],
        fields: {
            _stepVm: null,
            _appearanceManagerWrapper: null,
            _messenger: null,
            _factoryData: null,
            _setupStepVmDataActionChecorater: null,
            _persistTutorialVisitor: null
        },
        alias: [
            "Create", "TutorialVm$TutorialStep$Factory$ITutorialStepViewModelFactory$Create",
            "CreateSubstitute", "TutorialVm$TutorialStep$Factory$ITutorialStepViewModelFactory$CreateSubstitute"
        ],
        ctors: {
            ctor: function (appearanceManagerWrapper, messenger, persistTutorialVisitor) {
                this.$initialize();
                this._appearanceManagerWrapper = appearanceManagerWrapper;
                this._messenger = messenger;
                this._persistTutorialVisitor = persistTutorialVisitor;
                this.LoadSetupStepVmDataActionChecorater();
            }
        },
        methods: {
            LoadSetupStepVmDataActionChecorater: function () {
                this._setupStepVmDataActionChecorater = new (System.Collections.ObjectModel.Collection$1(TutorialVm.TutorialStep.Factory.SetupVmDataAction.ISetupStepVmDataAction)).ctor();
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.CreateVmDataObjects());
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupBaseData());
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForCompletableStepAbility());
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForAnswerableStepAbility());
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForPropositionAnswerStepAbility());
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupDataForStatsStepAbility());
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.SetupVisitorData());
                this._setupStepVmDataActionChecorater.add(new TutorialVm.TutorialStep.Factory.SetupVmDataAction.CreateSubViewModels());
            },
            Create: function (tutorialStep, questionNumber) {
                this.SetupFactoryData(tutorialStep, questionNumber);
                this.SetupStepVmData();
                this._stepVm = new TutorialVm.TutorialStep.TutorialStepViewModel(this._factoryData.StepVMData.$clone(), this._messenger);
                this._stepVm.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._factoryData.InitializeVisitor);
                return this._stepVm;
            },
            CreateSubstitute: function (tutorialStep, questionNumber) {
                this.SetupFactoryData(tutorialStep, questionNumber);
                this.SetupStepVmData();
                this._stepVm = new SocraLogicHtml5.Substitute.Substituter().GetTutorialStepViewModelPartialSubstitute(this._factoryData.StepVMData.$clone(), this._messenger);
                this._stepVm.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._factoryData.InitializeVisitor);
                return this._stepVm;
            },
            SetupFactoryData: function (tutorialStep, questionNumber) {
                this._factoryData = new TutorialVm.TutorialStep.Factory.TutorialStepViewModelFactoryData();
                this._factoryData.TutorialStep = tutorialStep;
                this._factoryData.QuestionNumber = questionNumber;
                this._factoryData.AppearanceManagerWrapper = this._appearanceManagerWrapper;
                this._factoryData.Messenger = this._messenger;
                this._factoryData.PersistTutorialVisitor = this._persistTutorialVisitor;
            },
            SetupStepVmData: function () {
                var $t;
                $t = Bridge.getEnumerator(this._setupStepVmDataActionChecorater);
                try {
                    while ($t.moveNext()) {
                        var setupStepVmDataAction = $t.Current;
                        setupStepVmDataAction.TutorialVm$TutorialStep$Factory$SetupVmDataAction$ISetupStepVmDataAction$Execute(this._factoryData);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.FeedbackDetail.FeedbackDetailViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.FeedbackDetail.IFeedbackDetailViewModel],
        fields: {
            _graphicFeedbackGridFactory: null,
            _tutorialStep: null,
            _visible: false
        },
        props: {
            FeedbackGrid: {
                get: function () {
                    return this._graphicFeedbackGridFactory.TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$IGraphicFeedbackGridFactory$Create(this._rawFeedbackGrid);
                }
            },
            _rawFeedbackGrid: {
                get: function () {
                    return Bridge.cast(this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.AnalysisFeedbackCollection), System.Collections.ObjectModel.Collection$1(LogicalAnalysisEngine.AnalysisFeedback.IAnalysisFeedback));
                }
            },
            Visible: {
                get: function () {
                    return this._visible;
                },
                set: function (value) {
                    this._visible = value;
                    this.OnPropertyChanged("Visible");
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$UpdateAllProperties",
            "FeedbackGrid", "TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$FeedbackGrid",
            "Visible", "TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$Visible",
            "UpdateToAnswerSubmissionState", "TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$UpdateToAnswerSubmissionState",
            "UpdateToPostAnswerState", "TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$UpdateToPostAnswerState"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._graphicFeedbackGridFactory = vmData.GraphicFeedbackGridFactory;
                this._tutorialStep = vmData.TutorialStep;
                this._visible = false;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("FeedbackGrid");
                this.OnPropertyChanged("Visible");
            },
            UpdateToAnswerSubmissionState: function () {
                this.Visible = false;
            },
            UpdateToPostAnswerState: function () {
                this.Visible = true;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupCommonDataChain", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.IChainToGetCompleteGraphicFeedbackItemData],
        fields: {
            _nextChain: null,
            _appearanceManagerWrapper: null
        },
        alias: ["Process", "TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process"],
        ctors: {
            ctor: function (nextChain, appearanceManagerWrapper) {
                this.$initialize();
                this._nextChain = nextChain;
                this._appearanceManagerWrapper = appearanceManagerWrapper;
            }
        },
        methods: {
            Process: function (feedbackItem, graphicAnalysisFeedbackItemData) {
                graphicAnalysisFeedbackItemData.AppearanceManagerWrapper = this._appearanceManagerWrapper;
                graphicAnalysisFeedbackItemData.DescriptionText = feedbackItem.LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$Description;
                graphicAnalysisFeedbackItemData.FeedbackTypeText = System.Enum.toString(LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType, feedbackItem.LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$AnalysisFeedbackType);

                return this._nextChain.TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process(feedbackItem, graphicAnalysisFeedbackItemData);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForErrorChain", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.IChainToGetCompleteGraphicFeedbackItemData],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (feedbackItem, graphicAnalysisFeedbackItemData) {
                if (feedbackItem.LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$AnalysisFeedbackType === LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Error) {
                    graphicAnalysisFeedbackItemData.ErrorIconVisible = true;
                    graphicAnalysisFeedbackItemData.FeedbackTypeTextVisible = false;
                } else {
                    graphicAnalysisFeedbackItemData.ErrorIconVisible = false;
                }

                return this._nextChain.TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process(feedbackItem, graphicAnalysisFeedbackItemData);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForInfoChain", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.IChainToGetCompleteGraphicFeedbackItemData],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (feedbackItem, graphicAnalysisFeedbackItemData) {
                if (feedbackItem.LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$AnalysisFeedbackType === LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Information) {
                    graphicAnalysisFeedbackItemData.FeedbackTypeTextVisible = true;
                }

                return this._nextChain.TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process(feedbackItem, graphicAnalysisFeedbackItemData);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForSuccessChain", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.IChainToGetCompleteGraphicFeedbackItemData],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (feedbackItem, graphicAnalysisFeedbackItemData) {
                if (feedbackItem.LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$AnalysisFeedbackType === LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Success) {
                    graphicAnalysisFeedbackItemData.SuccessIconVisible = true;
                    graphicAnalysisFeedbackItemData.FeedbackTypeTextVisible = false;
                } else {
                    graphicAnalysisFeedbackItemData.SuccessIconVisible = false;
                }

                return this._nextChain.TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process(feedbackItem, graphicAnalysisFeedbackItemData);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForWarningChain", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.IChainToGetCompleteGraphicFeedbackItemData],
        fields: {
            _nextChain: null
        },
        alias: ["Process", "TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process"],
        ctors: {
            ctor: function (nextChain) {
                this.$initialize();
                this._nextChain = nextChain;
            }
        },
        methods: {
            Process: function (feedbackItem, graphicAnalysisFeedbackItemData) {
                if (feedbackItem.LogicalAnalysisEngine$AnalysisFeedback$IAnalysisFeedback$AnalysisFeedbackType === LogicalAnalysisEngine.AnalysisFeedback.AnalysisFeedbackType.Warning) {
                    graphicAnalysisFeedbackItemData.FeedbackTypeTextVisible = true;
                }

                return this._nextChain.TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process(feedbackItem, graphicAnalysisFeedbackItemData);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.TerminatingChain", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.IChainToGetCompleteGraphicFeedbackItemData],
        alias: ["Process", "TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process"],
        methods: {
            Process: function (feedbackItem, graphicAnalysisFeedbackItemData) {
                return graphicAnalysisFeedbackItemData;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.GraphicFeedbackGridFactory", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.IGraphicFeedbackGridFactory],
        fields: {
            _appearanceManagerWrapper: null,
            _chainToGetCompleteGraphicFeedbackItemData: null
        },
        alias: ["Create", "TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$IGraphicFeedbackGridFactory$Create"],
        ctors: {
            ctor: function (appearanceManagerWrapper) {
                this.$initialize();
                this._appearanceManagerWrapper = appearanceManagerWrapper;
                this._chainToGetCompleteGraphicFeedbackItemData = this.SetupChainToGetCompleteGraphicFeedbackItemData();
            }
        },
        methods: {
            SetupChainToGetCompleteGraphicFeedbackItemData: function () {
                var terminatingChain = new TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.TerminatingChain();
                var setupDataForWarningChain = new TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForWarningChain(terminatingChain);
                var setupDataForInfoChain = new TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForInfoChain(setupDataForWarningChain);
                var setupDataForErrorChain = new TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForErrorChain(setupDataForInfoChain);
                var setupDataForSuccessChain = new TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupDataForSuccessChain(setupDataForErrorChain);
                return new TutorialVm.TutorialStep.GraphicFeedbackGrid.Factory.Chains.SetupCommonDataChain(setupDataForSuccessChain, this._appearanceManagerWrapper);
            },
            Create: function (feedback) {
                var $t;
                var graphicFeedbackGrid = new (System.Collections.ObjectModel.ObservableCollection$1(TutorialVm.TutorialStep.GraphicFeedbackGrid.IGraphicAnalysisFeedbackItem)).ctor();
                $t = Bridge.getEnumerator(feedback);
                try {
                    while ($t.moveNext()) {
                        var feedbackItem = $t.Current;
                        var graphicAnalysisFeedbackItemData = this.DetermineGraphicFeedbackItemData(feedbackItem);
                        var graphicAnalysisFeedbackItem = new TutorialVm.TutorialStep.GraphicFeedbackGrid.GraphicAnalysisFeedbackItem(graphicAnalysisFeedbackItemData);
                        graphicFeedbackGrid.add(graphicAnalysisFeedbackItem);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return graphicFeedbackGrid;
            },
            DetermineGraphicFeedbackItemData: function (feedbackItem) {
                var blankGraphicAnalysisFeedbackItemData = new TutorialVm.TutorialStep.GraphicFeedbackGrid.GraphicAnalysisFeedbackItemData();
                var completeGraphicAnalysisFeedbackItemData = this._chainToGetCompleteGraphicFeedbackItemData.TutorialVm$TutorialStep$GraphicFeedbackGrid$Factory$Chains$IChainToGetCompleteGraphicFeedbackItemData$Process(feedbackItem, blankGraphicAnalysisFeedbackItemData);
                return completeGraphicAnalysisFeedbackItemData;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.GraphicFeedbackGrid.GraphicAnalysisFeedbackItem", {
        inherits: [TutorialVm.TutorialStep.GraphicFeedbackGrid.IGraphicAnalysisFeedbackItem],
        fields: {
            _feedbackTypeText: null,
            _descriptionText: null,
            _feedbackTypeTextVisible: false,
            _successIconVisible: false,
            _errorIconVisible: false,
            _appearanceManagerWrapper: null
        },
        props: {
            FeedbackTypeText: {
                get: function () {
                    return this._feedbackTypeText;
                }
            },
            DescriptionText: {
                get: function () {
                    return this._descriptionText;
                }
            },
            FeedbackTypeTextVisible: {
                get: function () {
                    return this._feedbackTypeTextVisible;
                }
            },
            SuccessIconVisible: {
                get: function () {
                    return this._successIconVisible;
                }
            },
            ErrorIconVisible: {
                get: function () {
                    return this._errorIconVisible;
                }
            },
            ErrorIconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.Brushes.Red;
                }
            },
            SuccessIconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetSuccessIconBrush(this._appearanceManagerWrapper);
                }
            }
        },
        alias: [
            "FeedbackTypeText", "TutorialVm$TutorialStep$GraphicFeedbackGrid$IGraphicAnalysisFeedbackItem$FeedbackTypeText",
            "DescriptionText", "TutorialVm$TutorialStep$GraphicFeedbackGrid$IGraphicAnalysisFeedbackItem$DescriptionText",
            "FeedbackTypeTextVisible", "TutorialVm$TutorialStep$GraphicFeedbackGrid$IGraphicAnalysisFeedbackItem$FeedbackTypeTextVisible",
            "SuccessIconVisible", "TutorialVm$TutorialStep$GraphicFeedbackGrid$IGraphicAnalysisFeedbackItem$SuccessIconVisible",
            "ErrorIconVisible", "TutorialVm$TutorialStep$GraphicFeedbackGrid$IGraphicAnalysisFeedbackItem$ErrorIconVisible",
            "ErrorIconBrush", "TutorialVm$TutorialStep$GraphicFeedbackGrid$IGraphicAnalysisFeedbackItem$ErrorIconBrush",
            "SuccessIconBrush", "TutorialVm$TutorialStep$GraphicFeedbackGrid$IGraphicAnalysisFeedbackItem$SuccessIconBrush"
        ],
        ctors: {
            ctor: function (graphicAnalysisFeedbackData) {
                this.$initialize();
                this._feedbackTypeText = graphicAnalysisFeedbackData.FeedbackTypeText;
                this._descriptionText = graphicAnalysisFeedbackData.DescriptionText;
                this._feedbackTypeTextVisible = graphicAnalysisFeedbackData.FeedbackTypeTextVisible;
                this._successIconVisible = graphicAnalysisFeedbackData.SuccessIconVisible;
                this._errorIconVisible = graphicAnalysisFeedbackData.ErrorIconVisible;
                this._appearanceManagerWrapper = graphicAnalysisFeedbackData.AppearanceManagerWrapper;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.ListItem.ListItemViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.ListItem.IListItemViewModel],
        fields: {
            _appearanceManagerWrapper: null,
            _tutorialStep: null,
            _informationIconVisible: false,
            _resultsIconVisible: false,
            _notAnsweredIconVisible: false,
            _errorIconVisible: false,
            _successIconVisible: false,
            _isStepAnswerable: false,
            _number: null,
            TutorialStepVM: null
        },
        props: {
            Name: {
                get: function () {
                    return this._isStepAnswerable ? (this._number || "") + " " + (this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$Title || "") : this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$Title;
                }
            },
            ErrorIconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetErrorIconBrush(this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$IsSelected, this._appearanceManagerWrapper);
                }
            },
            SuccessIconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetListItemSuccessIconBrush(this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$IsSelected, this._appearanceManagerWrapper);
                }
            },
            TextMatchingIconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetItemIconBrush(this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$IsSelected, this._appearanceManagerWrapper);
                }
            },
            BackgroundBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetItemBackgroundBrushForHtml5(this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$IsSelected);
                }
            },
            InformationIconVisible: {
                get: function () {
                    return this._informationIconVisible;
                }
            },
            ResultsIconVisible: {
                get: function () {
                    return this._resultsIconVisible;
                }
            },
            NotAnsweredIconVisible: {
                get: function () {
                    return this._notAnsweredIconVisible;
                },
                set: function (value) {
                    this._notAnsweredIconVisible = value;
                    this.OnPropertyChanged("NotAnsweredIconVisible");
                }
            },
            ErrorIconVisible: {
                get: function () {
                    return this._errorIconVisible;
                },
                set: function (value) {
                    this._errorIconVisible = value;
                    this.OnPropertyChanged("ErrorIconVisible");
                }
            },
            SuccessIconVisible: {
                get: function () {
                    return this._successIconVisible;
                },
                set: function (value) {
                    this._successIconVisible = value;
                    this.OnPropertyChanged("SuccessIconVisible");
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$UpdateAllProperties",
            "TutorialStepVM", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$TutorialStepVM",
            "Name", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$Name",
            "ErrorIconBrush", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$ErrorIconBrush",
            "SuccessIconBrush", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$SuccessIconBrush",
            "TextMatchingIconBrush", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$TextMatchingIconBrush",
            "BackgroundBrush", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$BackgroundBrush",
            "InformationIconVisible", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$InformationIconVisible",
            "ResultsIconVisible", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$ResultsIconVisible",
            "NotAnsweredIconVisible", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$NotAnsweredIconVisible",
            "ErrorIconVisible", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$ErrorIconVisible",
            "SuccessIconVisible", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$SuccessIconVisible",
            "UpdateStepListToPostAnswerState", "TutorialVm$TutorialStep$ListItem$IListItemViewModel$UpdateStepListToPostAnswerState"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._appearanceManagerWrapper = vmData.AppearanceManagerWrapper;
                this._tutorialStep = vmData.TutorialStep;
                this._informationIconVisible = vmData.InformationIconVisible;
                this._resultsIconVisible = vmData.ResultsIconVisible;
                this._notAnsweredIconVisible = vmData.NotAnsweredIconVisible;
                this._isStepAnswerable = vmData.IsStepAnswerable;
                this._number = vmData.Number;
                this._errorIconVisible = false;
                this._successIconVisible = false;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("ErrorIconVisible");
                this.OnPropertyChanged("SuccessIconVisible");
                this.OnPropertyChanged("NotAnsweredIconVisible");
                this.OnPropertyChanged("InformationIconVisible");
                this.OnPropertyChanged("ResultsIconVisible");
                this.OnPropertyChanged("SuccessIconBrush");
                this.OnPropertyChanged("ErrorIconBrush");
                this.OnPropertyChanged("TextMatchingIconBrush");
                this.OnPropertyChanged("ListItemName");
                this.OnPropertyChanged("BackgroundBrush");
            },
            UpdateStepListToPostAnswerState: function (logicalAnalysisStatus) {
                this.NotAnsweredIconVisible = false;

                if (logicalAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail) {
                    this.ErrorIconVisible = true;
                    this.SuccessIconVisible = false;
                }

                if (logicalAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass) {
                    this.ErrorIconVisible = false;
                    this.SuccessIconVisible = true;
                }
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.MainContent.MainContentViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.MainContent.IMainContentViewModel],
        fields: {
            _tutorialStep: null,
            _showExtraMarginOnTheRight: false,
            _isStepAnswerable: false,
            _number: null
        },
        props: {
            Title: {
                get: function () {
                    return this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$Title;
                }
            },
            TextContent: {
                get: function () {
                    return this._isStepAnswerable ? (this._number || "") + " " + (this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$TextContent || "") : this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$TextContent;
                }
            },
            ShowExtraMarginOnTheRight: {
                get: function () {
                    return this._showExtraMarginOnTheRight;
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$MainContent$IMainContentViewModel$UpdateAllProperties",
            "Title", "TutorialVm$TutorialStep$MainContent$IMainContentViewModel$Title",
            "TextContent", "TutorialVm$TutorialStep$MainContent$IMainContentViewModel$TextContent",
            "ShowExtraMarginOnTheRight", "TutorialVm$TutorialStep$MainContent$IMainContentViewModel$ShowExtraMarginOnTheRight"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._tutorialStep = vmData.TutorialStep;
                this._number = vmData.Number;
                this._showExtraMarginOnTheRight = vmData.ShowExtraMarginOnTheRight;
                this._isStepAnswerable = vmData.IsStepAnswerable;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Title");
                this.OnPropertyChanged("TextContent");
                this.OnPropertyChanged("ShowExtraMarginOnTheRight");
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.MainFeedback.MainFeedbackViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.MainFeedback.IMainFeedbackViewModel],
        fields: {
            _appearanceManagerWrapper: null,
            _notAnsweredIconVisible: false,
            _errorIconVisible: false,
            _successIconVisible: false,
            _tutorialStep: null
        },
        props: {
            NotAnsweredIconVisible: {
                get: function () {
                    return this._notAnsweredIconVisible;
                },
                set: function (value) {
                    this._notAnsweredIconVisible = value;
                    this.OnPropertyChanged("NotAnsweredIconVisible");
                }
            },
            ErrorIconVisible: {
                get: function () {
                    return this._errorIconVisible;
                },
                set: function (value) {
                    this._errorIconVisible = value;
                    this.OnPropertyChanged("ErrorIconVisible");
                }
            },
            SuccessIconVisible: {
                get: function () {
                    return this._successIconVisible;
                },
                set: function (value) {
                    this._successIconVisible = value;
                    this.OnPropertyChanged("SuccessIconVisible");
                }
            },
            RawStepAnalysisStatus: {
                get: function () {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.AnalysisStatus), LogicalAnalysisEngine.Status.LogicalAnalysisStatus), System.Int32));
                }
            },
            SuccessIconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetSuccessIconBrush(this._appearanceManagerWrapper);
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$UpdateAllProperties",
            "NotAnsweredIconVisible", "TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$NotAnsweredIconVisible",
            "ErrorIconVisible", "TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$ErrorIconVisible",
            "SuccessIconVisible", "TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$SuccessIconVisible",
            "RawStepAnalysisStatus", "TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus",
            "SuccessIconBrush", "TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$SuccessIconBrush",
            "UpdateToPostAnswerState", "TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$UpdateToPostAnswerState"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._notAnsweredIconVisible = vmData.NotAnsweredIconVisible;
                this._appearanceManagerWrapper = vmData.AppearanceManagerWrapper;
                this._tutorialStep = vmData.TutorialStep;

                this._errorIconVisible = false;
                this._successIconVisible = false;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("NotAnsweredIconVisible");
                this.OnPropertyChanged("ErrorIconVisible");
                this.OnPropertyChanged("SuccessIconVisible");
                this.OnPropertyChanged("SuccessIconBrush");
            },
            UpdateToPostAnswerState: function (logicalAnalysisStatus) {
                if (logicalAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail) {
                    this.NotAnsweredIconVisible = false;
                    this.SuccessIconVisible = false;
                    this.ErrorIconVisible = true;
                }
                if (logicalAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass) {
                    this.NotAnsweredIconVisible = false;
                    this.ErrorIconVisible = false;
                    this.SuccessIconVisible = true;
                }
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.PropositionInspector.PropositionInspectorViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.PropositionInspector.IPropositionInspectorViewModel],
        fields: {
            _propositionProperties: null,
            _eulerCircles: null,
            _createPropositionViewModelNullObject: null,
            TutorialStepVM: null
        },
        props: {
            PropositionProperties: {
                get: function () {
                    return this._propositionProperties;
                }
            },
            EulerCircles: {
                get: function () {
                    return this._eulerCircles;
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$UpdateAllProperties",
            "TutorialStepVM", "TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$TutorialStepVM",
            "PropositionProperties", "TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$PropositionProperties",
            "EulerCircles", "TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$EulerCircles",
            "UpdateToTbdState", "TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$UpdateToTbdState",
            "UpdateToPostAnswerState", "TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$UpdateToPostAnswerState"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._propositionProperties = vmData.PropositionProperties;
                this._eulerCircles = vmData.EulerCircles;
                this._createPropositionViewModelNullObject = vmData.CreatePropositionViewModelNullObject;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("PropositionProperties");
                this.OnPropertyChanged("EulerCircles");
            },
            UpdateToTbdState: function () {
                var tbdPropositionViewModel = this._createPropositionViewModelNullObject.Execute("");
                this.PropositionProperties.PropositionPropertiesVm$IPropositionPropertiesViewModel$SelectedPropositionViewModel = tbdPropositionViewModel;
                this.EulerCircles.EulerCirclesVm$IEulerCirclesViewModel$UpdateCircles(tbdPropositionViewModel.PropositionVm$IPropositionViewModel$Category, this.PropositionProperties.PropositionPropertiesVm$IPropositionPropertiesViewModel$SubjectText, this.PropositionProperties.PropositionPropertiesVm$IPropositionPropertiesViewModel$PredicateText);
            },
            UpdateToPostAnswerState: function () {
                this.PropositionProperties.PropositionPropertiesVm$IPropositionPropertiesViewModel$SelectedPropositionViewModel = this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$GetPropositionViewModel();
                this.EulerCircles.EulerCirclesVm$IEulerCirclesViewModel$UpdateCircles(this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$GetPropositionCategory(), this.PropositionProperties.PropositionPropertiesVm$IPropositionPropertiesViewModel$SubjectText, this.PropositionProperties.PropositionPropertiesVm$IPropositionPropertiesViewModel$PredicateText);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.RetryAnswer.RetryAnswerViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.RetryAnswer.IRetryAnswerViewModel],
        fields: {
            _commandsCanExecute: false,
            _visible: false,
            _enabled: false,
            _focused: false,
            _updateAllPropertiesOfMeAndMyParentVisitor: null,
            _updateToAnswerSubmissionStateVisitor: null,
            _updateFocusToAnswerSubmissionStateVisitor: null,
            TutorialStepVM: null
        },
        props: {
            IconBrush: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetButtonIconBrush(this.Enabled);
                }
            },
            Command: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.RetryQuestionCommandHandler), this.CommandsCanExecute);
                }
            },
            Visible: {
                get: function () {
                    return this._visible;
                },
                set: function (value) {
                    this._visible = value;
                    this.OnPropertyChanged("Visible");
                }
            },
            Enabled: {
                get: function () {
                    return this._enabled;
                },
                set: function (value) {
                    this._enabled = value;
                    this.OnPropertyChanged("Enabled");
                    this.OnPropertyChanged("IconBrush");
                }
            },
            Focused: {
                get: function () {
                    return this._focused;
                },
                set: function (value) {
                    this._focused = value;
                    this.OnPropertyChanged("Focused");
                }
            },
            CommandsCanExecute: {
                get: function () {
                    return this._commandsCanExecute;
                },
                set: function (value) {
                    this._commandsCanExecute = value;
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$UpdateAllProperties",
            "TutorialStepVM", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$TutorialStepVM",
            "IconBrush", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$IconBrush",
            "Command", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$Command",
            "UpdateToAnswerSubmissionState", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$UpdateToAnswerSubmissionState",
            "ToggleFocusToTrue", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$ToggleFocusToTrue",
            "ToggleFocusToFalse", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$ToggleFocusToFalse",
            "UpdateToPostAnswerState", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$UpdateToPostAnswerState",
            "Visible", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$Visible",
            "Enabled", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$Enabled",
            "Focused", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$Focused",
            "CommandsCanExecute", "TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$CommandsCanExecute"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this.CommandsCanExecute = vmData.CommandsCanExecute;
                this._updateAllPropertiesOfMeAndMyParentVisitor = vmData.UpdateAllPropertiesOfMeAndMyParentVisitor;
                this._updateToAnswerSubmissionStateVisitor = vmData.UpdateToAnswerSubmissionStateVisitor;
                this._updateFocusToAnswerSubmissionStateVisitor = vmData.UpdateFocusToAnswerSubmissionStateVisitor;
                this._visible = false;
                this._enabled = false;
                this._focused = false;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Visible");
                this.OnPropertyChanged("Enabled");
                this.OnPropertyChanged("Focused");
                this.OnPropertyChanged("IconBrush");
            },
            RetryQuestionCommandHandler: function () {
                this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._updateToAnswerSubmissionStateVisitor);
                this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._updateAllPropertiesOfMeAndMyParentVisitor);
                this.TutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$Accept(this._updateFocusToAnswerSubmissionStateVisitor);
            },
            UpdateToAnswerSubmissionState: function () {
                this.Visible = false;
                this.Enabled = false;
            },
            ToggleFocusToTrue: function () {
                this.Focused = false;
                this.Focused = true;
            },
            ToggleFocusToFalse: function () {
                this.Focused = true;
                this.Focused = false;
            },
            UpdateToPostAnswerState: function (logicalAnalysisStatus) {
                this.Visible = true;

                if (logicalAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail) {
                    this.Enabled = true;
                }
                if (logicalAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass) {
                    this.CommandsCanExecute = false;
                    this.Enabled = false;
                }
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Stats.TutorialStepStatsViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.Stats.ITutorialStepStatsViewModel],
        fields: {
            _tutorialStatsVisible: false,
            _rawTutorialStats: null,
            _appearanceManagerWrapper: null
        },
        props: {
            Visible: {
                get: function () {
                    return this._tutorialStatsVisible;
                }
            },
            TotalQuestions: {
                get: function () {
                    return Bridge.toString(this._rawTutorialStats.Tutorial$Stats$ITutorialStats$TotalQuestions);
                }
            },
            QuestionsAnsweredCorrectly: {
                get: function () {
                    return (this.GetGreenTagPerTheme() || "") + (Bridge.toString(this._rawTutorialStats.Tutorial$Stats$ITutorialStats$QuestionsAnsweredCorrectly) || "") + (this.GetEndColorTag() || "");
                }
            },
            QuestionsAnsweredIncorrectly: {
                get: function () {
                    return (this.GetRedTeg() || "") + (Bridge.toString(this._rawTutorialStats.Tutorial$Stats$ITutorialStats$QuestionsAnsweredIncorrectly) || "") + (this.GetEndColorTag() || "");
                }
            },
            AnswerQuestionAttempts: {
                get: function () {
                    return (this.GetBlueTagPerTheme() || "") + (Bridge.toString(this._rawTutorialStats.Tutorial$Stats$ITutorialStats$AnswerQuestionAttempts) || "") + (this.GetEndColorTag() || "");
                }
            },
            SaveButtonDescription: {
                get: function () {
                    return "To save your work for course credit, click this save button ->";
                }
            },
            AdditonalDescription: {
                get: function () {
                    return "Then ensure that the downloaded file is uploaded to Canvas.";
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$UpdateAllProperties",
            "Visible", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$Visible",
            "TotalQuestions", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$TotalQuestions",
            "QuestionsAnsweredCorrectly", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$QuestionsAnsweredCorrectly",
            "QuestionsAnsweredIncorrectly", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$QuestionsAnsweredIncorrectly",
            "AnswerQuestionAttempts", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$AnswerQuestionAttempts",
            "SaveButtonDescription", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$SaveButtonDescription",
            "AdditonalDescription", "TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$AdditonalDescription"
        ],
        ctors: {
            ctor: function (statsVMData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._tutorialStatsVisible = statsVMData.TutorialStatsVisible;
                this._rawTutorialStats = statsVMData.RawTutorialStats;
                this._appearanceManagerWrapper = statsVMData.AppearanceManagerWrapper;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("TutorialStatsVisible");
                this.OnPropertyChanged("TotalQuestions");
                this.OnPropertyChanged("QuestionsAnsweredCorrectly");
                this.OnPropertyChanged("QuestionsAnsweredIncorrectly");
                this.OnPropertyChanged("AnswerQuestionAttempts");
            },
            GetBlueTagPerTheme: function () {
                return SocraLogicHtml5.Common.ColorDepot.GetBlueTagPerTheme(this._appearanceManagerWrapper);
            },
            GetGreenTagPerTheme: function () {
                return SocraLogicHtml5.Common.ColorDepot.GetGreenTagPerTheme(this._appearanceManagerWrapper);
            },
            GetRedTeg: function () {
                return SocraLogicHtml5.Common.ColorDepot.GetRedTag();
            },
            GetEndColorTag: function () {
                return SocraLogicHtml5.Common.ColorDepot.GetEndColorTag();
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerForProposition", {
        inherits: [TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.IGetStylizedStudentAnswerStrategy],
        alias: ["Execute", "TutorialVm$TutorialStep$StudentAnswer$GetStylizedStudentAnswerStrategy$IGetStylizedStudentAnswerStrategy$Execute"],
        methods: {
            Execute: function (rawStudentAnswer, propositionViewModel) {
                return propositionViewModel.PropositionVm$IPropositionViewModel$StylizedSentence;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.GetStylizedStudentAnswerNullObject", {
        inherits: [TutorialVm.TutorialStep.StudentAnswer.GetStylizedStudentAnswerStrategy.IGetStylizedStudentAnswerStrategy],
        alias: ["Execute", "TutorialVm$TutorialStep$StudentAnswer$GetStylizedStudentAnswerStrategy$IGetStylizedStudentAnswerStrategy$Execute"],
        methods: {
            Execute: function (rawStudentAnswer, propositionViewModel) {
                return rawStudentAnswer;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.StudentAnswer.StudentAnswerViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.StudentAnswer.IStudentAnswerViewModel],
        fields: {
            _raw: null,
            _isStepAnswerable: false,
            _rawVisible: false,
            _rawFocused: false,
            _getStylizedStrategy: null,
            _stylizedVisible: false,
            _createPropositionViewModelStrategy: null,
            TutorialStepVM: null,
            CheckAnswer: null
        },
        props: {
            Check: {
                get: function () {
                    return this.CheckAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$Check;
                }
            },
            IsStepAnswerable: {
                get: function () {
                    return this._isStepAnswerable;
                }
            },
            Raw: {
                get: function () {
                    return this._raw;
                },
                set: function (value) {
                    if (this._isStepAnswerable) {
                        this._raw = value;
                    } else {
                        this._raw = "";
                    }
                    this.OnPropertyChanged("Raw");
                }
            },
            RawVisible: {
                get: function () {
                    return this._rawVisible;
                },
                set: function (value) {
                    this._rawVisible = value;
                    this.OnPropertyChanged("RawVisible");
                }
            },
            RawFocused: {
                get: function () {
                    return this._rawFocused;
                },
                set: function (value) {
                    this._rawFocused = value;
                    this.OnPropertyChanged("RawFocused");
                }
            },
            Stylized: {
                get: function () {
                    return this._getStylizedStrategy.TutorialVm$TutorialStep$StudentAnswer$GetStylizedStudentAnswerStrategy$IGetStylizedStudentAnswerStrategy$Execute(this.Raw, this._createPropositionViewModelStrategy.TutorialVm$TutorialStep$CreatePropositionViewModelStrategy$ICreatePropositionViewModelStrategy$Execute(this.Raw));
                }
            },
            StylizedVisible: {
                get: function () {
                    return this._stylizedVisible;
                },
                set: function (value) {
                    this._stylizedVisible = value;
                    this.OnPropertyChanged("StylizedVisible");
                }
            },
            AnyTextVisible: {
                get: function () {
                    return this._rawVisible || this._stylizedVisible;
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateAllProperties",
            "TutorialStepVM", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$TutorialStepVM",
            "CheckAnswer", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$CheckAnswer",
            "Check", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Check",
            "IsStepAnswerable", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$IsStepAnswerable",
            "Raw", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw",
            "RawVisible", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$RawVisible",
            "RawFocused", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$RawFocused",
            "Stylized", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Stylized",
            "StylizedVisible", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$StylizedVisible",
            "AnyTextVisible", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$AnyTextVisible",
            "ToggleRawFocusToTrue", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToTrue",
            "ToggleRawFocusToFalse", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToFalse",
            "UpdateToAnswerSubmissionState", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToAnswerSubmissionState",
            "UpdateToInvisibleState", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToInvisibleState",
            "UpdateToPostAnswerState", "TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToPostAnswerState"
        ],
        ctors: {
            ctor: function (vmData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._raw = "";
                this._rawFocused = false;
                this._stylizedVisible = false;
                this._isStepAnswerable = vmData.IsStepAnswerable;
                this._rawVisible = vmData.RawVisible;
                this._getStylizedStrategy = vmData.GetStylizedStrategy;
                this._createPropositionViewModelStrategy = vmData.CreatePropositionViewModelStrategy;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Raw");
                this.OnPropertyChanged("RawVisible");
                this.OnPropertyChanged("RawFocused");
                this.OnPropertyChanged("Stylized");
                this.OnPropertyChanged("StylizedVisible");
                this.OnPropertyChanged("AnyTextVisible");
            },
            ToggleRawFocusToTrue: function () {
                this.RawFocused = false;
                this.RawFocused = true;
            },
            ToggleRawFocusToFalse: function () {
                this.RawFocused = true;
                this.RawFocused = false;
            },
            UpdateToAnswerSubmissionState: function () {
                this.RawVisible = true;
                this.StylizedVisible = false;
            },
            UpdateToInvisibleState: function () {
                this.RawVisible = false;
                this.StylizedVisible = false;
            },
            UpdateToPostAnswerState: function () {
                this.RawVisible = false;
                this.StylizedVisible = true;
                this.Raw = Proposition.Utilities.StringCleaner.RemoveUndesirableCharacters(this.Raw);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.TutorialStepViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.TutorialStep.ITutorialStepViewModel,TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitable],
        fields: {
            _tutorialStep: null,
            _isSelected: false,
            _createPropositionViewModelStrategy: null,
            _mainContent: null,
            _abilities: null,
            _stats: null,
            _mainFeedback: null,
            _retryAnswer: null,
            _answerCheck: null,
            _studentAnswer: null,
            _studentAnswer2: null,
            _studentAnswer3: null,
            _feedbackDetail: null,
            _propositionInspector: null,
            _listAttributes: null,
            ParentTutorial: null
        },
        props: {
            IsSelected: {
                get: function () {
                    return this._isSelected;
                },
                set: function (value) {
                    this._isSelected = value;
                    this.OnPropertyChanged("IsSelected");
                }
            },
            IsCompleted: {
                get: function () {
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.IsCompleted), System.Boolean), System.Boolean));
                }
            },
            MainContent: {
                get: function () {
                    return this._mainContent;
                }
            },
            Abilities: {
                get: function () {
                    return this._abilities;
                }
            },
            StudentAnswer: {
                get: function () {
                    return this._studentAnswer;
                }
            },
            StudentAnswer2: {
                get: function () {
                    return this._studentAnswer2;
                }
            },
            StudentAnswer3: {
                get: function () {
                    return this._studentAnswer3;
                }
            },
            PropositionInspector: {
                get: function () {
                    return this._propositionInspector;
                }
            },
            CheckAnswer: {
                get: function () {
                    return this._answerCheck;
                }
            },
            RetryAnswer: {
                get: function () {
                    return this._retryAnswer;
                }
            },
            MainFeedback: {
                get: function () {
                    return this._mainFeedback;
                }
            },
            FeedbackDetail: {
                get: function () {
                    return this._feedbackDetail;
                }
            },
            ListItem: {
                get: function () {
                    return this._listAttributes;
                }
            },
            Stats: {
                get: function () {
                    return this._stats;
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$TutorialStep$ITutorialStepViewModel$UpdateAllProperties",
            "IsSelected", "TutorialVm$TutorialStep$ITutorialStepViewModel$IsSelected",
            "IsCompleted", "TutorialVm$TutorialStep$ITutorialStepViewModel$IsCompleted",
            "ParentTutorial", "TutorialVm$TutorialStep$ITutorialStepViewModel$ParentTutorial",
            "MainContent", "TutorialVm$TutorialStep$ITutorialStepViewModel$MainContent",
            "Abilities", "TutorialVm$TutorialStep$ITutorialStepViewModel$Abilities",
            "StudentAnswer", "TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer",
            "StudentAnswer2", "TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer2",
            "StudentAnswer3", "TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer3",
            "PropositionInspector", "TutorialVm$TutorialStep$ITutorialStepViewModel$PropositionInspector",
            "CheckAnswer", "TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer",
            "RetryAnswer", "TutorialVm$TutorialStep$ITutorialStepViewModel$RetryAnswer",
            "MainFeedback", "TutorialVm$TutorialStep$ITutorialStepViewModel$MainFeedback",
            "FeedbackDetail", "TutorialVm$TutorialStep$ITutorialStepViewModel$FeedbackDetail",
            "ListItem", "TutorialVm$TutorialStep$ITutorialStepViewModel$ListItem",
            "Stats", "TutorialVm$TutorialStep$ITutorialStepViewModel$Stats",
            "Accept", "TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitable$Accept",
            "Accept", "TutorialVm$TutorialStep$ITutorialStepViewModel$Accept",
            "SetIsSelectedTo", "TutorialVm$TutorialStep$ITutorialStepViewModel$SetIsSelectedTo",
            "ToggleRetryAnswerFocusToTrue", "TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRetryAnswerFocusToTrue",
            "ToggleRetryAnswerFocusToFalse", "TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRetryAnswerFocusToFalse",
            "ToggleRawStudentAnswersFocusToTrue", "TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRawStudentAnswersFocusToTrue",
            "ToggleRawStudentAnswersFocusToFalse", "TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRawStudentAnswersFocusToFalse",
            "IsAnswerable", "TutorialVm$TutorialStep$ITutorialStepViewModel$IsAnswerable",
            "RawAnswerTextBoxIsVisible", "TutorialVm$TutorialStep$ITutorialStepViewModel$RawAnswerTextBoxIsVisible",
            "IsAnsweredCorrectly", "TutorialVm$TutorialStep$ITutorialStepViewModel$IsAnsweredCorrectly",
            "AreStatsVisible", "TutorialVm$TutorialStep$ITutorialStepViewModel$AreStatsVisible",
            "GetPropositionViewModel", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetPropositionViewModel",
            "GetPropositionCategory", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetPropositionCategory",
            "GetRawStepAnalysisStatus", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStepAnalysisStatus",
            "GetRawTutorialStep", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawTutorialStep",
            "GetRawStudentAnswer", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStudentAnswer",
            "GetRawStudentAnswer2", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStudentAnswer2",
            "GetRawStudentAnswer3", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStudentAnswer3",
            "GetAnswerQuestionAttempts", "TutorialVm$TutorialStep$ITutorialStepViewModel$GetAnswerQuestionAttempts"
        ],
        ctors: {
            ctor: function (stepVMData, messenger) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this.SetDefaults();
                this.LoadInStepVMData(stepVMData.$clone());

                messenger.Messaging$IMessenger$Register(this, Bridge.box(Messaging.MessengerToken.ThemeChanged, Messaging.MessengerToken, System.Enum.toStringFn(Messaging.MessengerToken)), Bridge.fn.bind(this, function (messengerToken) {
                    this.UpdateAllProperties();
                }));
            }
        },
        methods: {
            SetDefaults: function () {
                this._isSelected = false;
            },
            LoadInStepVMData: function (stepVMData) {
                this.ParentTutorial = stepVMData.PlaceholderParentTutorial;
                this._tutorialStep = stepVMData.TutorialStep;
                this._createPropositionViewModelStrategy = stepVMData.CreatePropositionViewModelStrategy;
                this._propositionInspector = stepVMData.PropositionInspector;
                this._mainContent = stepVMData.MainContent;
                this._abilities = stepVMData.Abilities;
                this._stats = stepVMData.Stats;
                this._mainFeedback = stepVMData.MainFeedback;
                this._retryAnswer = stepVMData.RetryAnswer;
                this._answerCheck = stepVMData.AnswerCheck;
                this._studentAnswer = stepVMData.StudentAnswer;
                this._studentAnswer2 = stepVMData.StudentAnswer2;
                this._studentAnswer3 = stepVMData.StudentAnswer3;
                this._feedbackDetail = stepVMData.FeedbackDetail;
                this._listAttributes = stepVMData.ListItem;
            },
            UpdateAllProperties: function () {
                this.OnPropertyChanged("IsSelected");
                this.OnPropertyChanged("IsCompleted");
                this.OnPropertyChanged("MainContent");
                this.MainContent.TutorialVm$TutorialStep$MainContent$IMainContentViewModel$UpdateAllProperties();
                this.OnPropertyChanged("Abilities");
                this.Abilities.TutorialVm$TutorialStep$Abilities$IAbilitiesViewModel$UpdateAllProperties();
                this.OnPropertyChanged("Stats");
                this.Stats.TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$UpdateAllProperties();
                this.OnPropertyChanged("MainFeedback");
                this.MainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$UpdateAllProperties();
                this.OnPropertyChanged("StudentAnswer");
                this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateAllProperties();
                this.OnPropertyChanged("StudentAnswer2");
                this.StudentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateAllProperties();
                this.OnPropertyChanged("StudentAnswer3");
                this.StudentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateAllProperties();
                this.OnPropertyChanged("CheckAnswer");
                this.CheckAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateAllProperties();
                this.OnPropertyChanged("PropositionInspector");
                this.PropositionInspector.TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$UpdateAllProperties();
                this.OnPropertyChanged("FeedbackDetail");
                this.FeedbackDetail.TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$UpdateAllProperties();
                this.OnPropertyChanged("ListItem");
                this.ListItem.TutorialVm$TutorialStep$ListItem$IListItemViewModel$UpdateAllProperties();
                this.OnPropertyChanged("RetryAnswer");
                this.RetryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$UpdateAllProperties();
            },
            Accept: function (visitor) {
                visitor.TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitor$Visit(this);
            },
            SetIsSelectedTo: function (state) {
                this.IsSelected = state;
            },
            ToggleRetryAnswerFocusToTrue: function () {
                this.RetryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$ToggleFocusToTrue();
            },
            ToggleRetryAnswerFocusToFalse: function () {
                this.RetryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$ToggleFocusToFalse();
            },
            ToggleRawStudentAnswersFocusToTrue: function () {
                this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToTrue();
            },
            ToggleRawStudentAnswersFocusToFalse: function () {
                this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToFalse();
                this.StudentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToFalse();
                this.StudentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToFalse();
            },
            IsAnswerable: function () {
                return this.Abilities.TutorialVm$TutorialStep$Abilities$IAbilitiesViewModel$IsAnswerable;
            },
            RawAnswerTextBoxIsVisible: function () {
                return this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$RawVisible;
            },
            IsAnsweredCorrectly: function () {
                return this.MainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass;
            },
            AreStatsVisible: function () {
                return this.Stats.TutorialVm$TutorialStep$Stats$ITutorialStepStatsViewModel$Visible;
            },
            GetPropositionViewModel: function () {
                return this._createPropositionViewModelStrategy.TutorialVm$TutorialStep$CreatePropositionViewModelStrategy$ICreatePropositionViewModelStrategy$Execute(this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw);
            },
            GetPropositionCategory: function () {
                return this.GetPropositionViewModel().PropositionVm$IPropositionViewModel$Category;
            },
            GetRawStepAnalysisStatus: function () {
                return this.MainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus;
            },
            GetRawTutorialStep: function () {
                return this._tutorialStep;
            },
            GetRawStudentAnswer: function () {
                return this.StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw;
            },
            GetRawStudentAnswer2: function () {
                return this.StudentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw;
            },
            GetRawStudentAnswer3: function () {
                return this.StudentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw;
            },
            GetAnswerQuestionAttempts: function () {
                return System.Nullable.getValue(Bridge.cast(Bridge.unbox(this._tutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.getItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts), System.Int32), System.Int32));
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.PassStepVMToNeededSubParts.IInitializeVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateAllPropertiesOfMeAndMyParent.IUpdateAllPropertiesOfMeAndMyParentVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateFocusToAnswerSubmissionState.IUpdateFocusToAnswerSubmissionStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateFocusToPostAnswerState.IUpdateFocusToPostAnswerStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateToAnswerSubmissionState.IUpdateToAnswerSubmissionStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateToPostAnswerState.IUpdateToPostAnswerStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.ITutorialStepViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Visitors.Initialize.IInitializeTutorialVMVisitor", {
        inherits: [TutorialVm.Visitors.ITutorialViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Visitors.PersistTutorial.DataObjectFactory.TutorialDataObjectFactoryHtml5", {
        inherits: [TutorialVm.Visitors.PersistTutorial.DataObjectFactory.TutorialDataObjectFactory],
        fields: {
            _tutorialXmlDataHtml5: null
        },
        methods: {
            Create: function (tutorialViewModel) {
                this._tutorialXmlDataHtml5 = new TutorialPersistence.DataObject.TutorialDataObjectHtml5();
                this.PrepEachStepStorageSpotForReadability();
                this.StoreNeededItemsFromEachStep(tutorialViewModel);
                this._tutorialXmlDataHtml5 = Bridge.cast(this.AddSelectedStep(tutorialViewModel, this._tutorialXmlDataHtml5), TutorialPersistence.DataObject.TutorialDataObjectHtml5);
                this._tutorialXmlDataHtml5 = Bridge.cast(this.AddTutorialStats(tutorialViewModel, this._tutorialXmlDataHtml5), TutorialPersistence.DataObject.TutorialDataObjectHtml5);
                return this._tutorialXmlDataHtml5;
            },
            PrepEachStepStorageSpotForReadability: function () {
                this._tutorialXmlDataHtml5.AnswerQuestionAttempts = "\n";
                this._tutorialXmlDataHtml5.AnalysisStatuses = "\n";
                this._tutorialXmlDataHtml5.CompletedStatuses = "\n";
                this._tutorialXmlDataHtml5.SubmittedAnswers = "\n";
            },
            StoreNeededItemsFromEachStep: function (tutorialViewModel) {
                var $t;
                $t = Bridge.getEnumerator(tutorialViewModel.TutorialVm$ITutorialViewModel$GetTutorialStepViewModels());
                try {
                    while ($t.moveNext()) {
                        var tutorialStepViewModel = $t.Current;
                        this.StoreSubmittedAnswerForThisStep(tutorialStepViewModel);
                        this.StoreCompletedStatusForThisStep(tutorialStepViewModel);
                        this.StoreAnalysisStatusForThisStep(tutorialStepViewModel);
                        this.StoreAnswerQuestionAttemptsForThisStep(tutorialStepViewModel);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            StoreAnswerQuestionAttemptsForThisStep: function (tutorialStepViewModel) {
                this._tutorialXmlDataHtml5.AnswerQuestionAttempts = (this._tutorialXmlDataHtml5.AnswerQuestionAttempts || "") + (Bridge.toString(tutorialStepViewModel.TutorialVm$TutorialStep$ITutorialStepViewModel$GetAnswerQuestionAttempts()) || "") + (this.DataItemSeperator() || "");
            },
            StoreAnalysisStatusForThisStep: function (tutorialStepViewModel) {
                this._tutorialXmlDataHtml5.AnalysisStatuses = (this._tutorialXmlDataHtml5.AnalysisStatuses || "") + (System.Enum.toString(LogicalAnalysisEngine.Status.LogicalAnalysisStatus, tutorialStepViewModel.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStepAnalysisStatus()) || "") + (this.DataItemSeperator() || "");
            },
            StoreCompletedStatusForThisStep: function (tutorialStepViewModel) {
                this._tutorialXmlDataHtml5.CompletedStatuses = (this._tutorialXmlDataHtml5.CompletedStatuses || "") + (System.Boolean.toString(tutorialStepViewModel.TutorialVm$TutorialStep$ITutorialStepViewModel$IsCompleted) || "") + (this.DataItemSeperator() || "");
            },
            StoreSubmittedAnswerForThisStep: function (tutorialStepViewModel) {
                var $t, $t1, $t2, $t3, $t4;
                this._tutorialXmlDataHtml5.SubmittedAnswers = (this._tutorialXmlDataHtml5.SubmittedAnswers || "") + (tutorialStepViewModel.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStudentAnswer() || "");

                if (tutorialStepViewModel.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawTutorialStep().Tutorial$TutorialStep$ITutorialStep$Abilities.contains(Tutorial.TutorialStep.Ability.ChecksASyllogismAnswer)) {
                    ($t = this._tutorialXmlDataHtml5).SubmittedAnswers = ($t.SubmittedAnswers || "") + ",";
                    ($t1 = this._tutorialXmlDataHtml5).SubmittedAnswers = ($t1.SubmittedAnswers || "") + (tutorialStepViewModel.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStudentAnswer2() || "");
                    ($t2 = this._tutorialXmlDataHtml5).SubmittedAnswers = ($t2.SubmittedAnswers || "") + ",";
                    ($t3 = this._tutorialXmlDataHtml5).SubmittedAnswers = ($t3.SubmittedAnswers || "") + (tutorialStepViewModel.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawStudentAnswer3() || "");
                }

                ($t4 = this._tutorialXmlDataHtml5).SubmittedAnswers = ($t4.SubmittedAnswers || "") + (this.DataItemSeperator() || "");
            },
            DataItemSeperator: function () {
                return ";\n";
            }
        }
    });

    Bridge.define("TutorialVm.Visitors.PersistTutorial.IPersistTutorialVisitor", {
        inherits: [TutorialVm.Visitors.ITutorialViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Visitors.SetInitialFocusForSelectedStep.ISetInitialFocusForCurrentStepVisitor", {
        inherits: [TutorialVm.Visitors.ITutorialViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("TutorialVm.Visitors.UpdateAllPropertiesOfTutorialAndSelectedStep.IUpdateAllPropertiesOfTutorialAndSelectedStepVisitor", {
        inherits: [TutorialVm.Visitors.ITutorialViewModelVisitor],
        $kind: "interface"
    });

    Bridge.define("Argument.Argument", {
        inherits: [Argument.IArgument],
        fields: {
            Name: null,
            Propositions: null
        },
        alias: [
            "Name", "Argument$IArgument$Name",
            "Propositions", "Argument$IArgument$Propositions"
        ],
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.Name = name;
                this.Propositions = new (System.Collections.ObjectModel.Collection$1(Proposition.IProposition)).ctor();
            }
        }
    });

    Bridge.define("Items.TreeView.TreeViewItem", {
        inherits: [Items.Item,Items.TreeView.ITreeViewItem],
        fields: {
            _isSelected: false,
            _name: null,
            _messenger: null
        },
        props: {
            IconColor: {
                get: function () {
                    return SocraLogicHtml5.Common.ColorDepot.GetItemIconBrush(this.IsSelected, this.AppearanceManagerWrapper);
                }
            },
            Name: {
                get: function () {
                    return this._name;
                },
                set: function (value) {
                    this._name = value;
                    this.OnPropertyChanged("Name");
                }
            },
            IsSelected: {
                get: function () {
                    return this._isSelected;
                },
                set: function (value) {
                    this._isSelected = value;
                    this._messenger.Messaging$IMessenger$Send(Messaging.MessengerToken.IgnoreNewTreeViewItemSelectionChanges);
                    this.OnPropertyChanged("IsSelected");
                    this._messenger.Messaging$IMessenger$Send(Messaging.MessengerToken.DontIgnoreNewTreeViewItemSelectionChanges);
                }
            }
        },
        alias: [
            "IconColor", "Items$TreeView$ITreeViewItem$IconColor",
            "UpdateIconColor", "Items$TreeView$ITreeViewItem$UpdateIconColor",
            "Name", "Items$TreeView$ITreeViewItem$Name",
            "IsSelected", "Items$TreeView$ITreeViewItem$IsSelected"
        ],
        ctors: {
            ctor: function (name, appearanceManagerWrapper, messenger) {
                this.$initialize();
                Items.Item.ctor.call(this, appearanceManagerWrapper);
                this._messenger = messenger;
                this._name = name;
                this._isSelected = false;
                this._messenger.Messaging$IMessenger$Register(this, Bridge.box(Messaging.MessengerToken.ThemeChanged, Messaging.MessengerToken, System.Enum.toStringFn(Messaging.MessengerToken)), Bridge.fn.cacheBind(this, this.UpdateIconColor));
            }
        },
        methods: {
            UpdateIconColor: function (messengerToken) {
                if (messengerToken === void 0) { messengerToken = 0; }
                this.OnPropertyChanged("IconColor");
            },
            BacktoReadOnlyMode: function () {
                this.OnPropertyChanged("Name");
                this.ChangeAccessModeTo(Items.AccessMode.ItemAccessMode.ReadOnly);
                this.OnPropertyChanged("Name");
                this.IsTextBoxFocused = false;
            },
            SetToEditMode: function () {
                this.OnPropertyChanged("Name");
                this.ChangeAccessModeTo(Items.AccessMode.ItemAccessMode.Edit);
                this.OnPropertyChanged("Name");
                this.IsTextBoxFocused = true;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.AAA.ValidAaaSyllogismLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.ValidSyllogismLogicalAnalysisEngineFactory],
        fields: {
            _isAnAaaArgument: null
        },
        methods: {
            CreateChildAnalysisSteps: function () {
                this._isAnAaaArgument = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAnAaaArgumentStep(this.ArgumentAnswer, this.FeedbackAppender);
            },
            AddChildAnalysisStepsToLogicEngine: function () {
                this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStepChecoraterCollection.add(this._isAnAaaArgument);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.AOO.ValidAooSyllogismLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.ValidSyllogismLogicalAnalysisEngineFactory],
        fields: {
            _isAnAOOArgumentStep: null
        },
        methods: {
            CreateChildAnalysisSteps: function () {
                this._isAnAOOArgumentStep = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.Moods.IsAnAOOArgumentStep(this.ArgumentAnswer, this.FeedbackAppender);
            },
            AddChildAnalysisStepsToLogicEngine: function () {
                this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStepChecoraterCollection.add(this._isAnAOOArgumentStep);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.EAE.ValidEaeSyllogismLogicalAnalysisEngineFactory", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.ValidSyllogismLogicalAnalysisEngineFactory],
        fields: {
            _isAnEaeArgument: null
        },
        methods: {
            CreateChildAnalysisSteps: function () {
                this._isAnEaeArgument = new LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAnEaeArgumentStep(this.ArgumentAnswer, this.FeedbackAppender);
            },
            AddChildAnalysisStepsToLogicEngine: function () {
                this.LogicalAnalysisEngine.LogicalAnalysisEngine$ILogicalAnalysisEngine$AnalysisStepChecoraterCollection.add(this._isAnEaeArgument);
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAnAaaArgumentStep", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.IsAMoodStep],
        ctors: {
            ctor: function (argumentAnswer, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.IsAMoodStep.ctor.call(this, argumentAnswer, feedbackAppender);
            }
        },
        methods: {
            ArgumentIsInProperMood: function () {
                return this.ArgumentIsAnAaaSyllogism();
            },
            ArgumentIsAnAaaSyllogism: function () {
                return this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(0).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.A && this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(1).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.A && this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(2).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.A;
            },
            GetMoodName: function () {
                return "AAA";
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAnEaeArgumentStep", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.IsAMoodStep],
        ctors: {
            ctor: function (argumentAnswer, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.IsAMoodStep.ctor.call(this, argumentAnswer, feedbackAppender);
            }
        },
        methods: {
            ArgumentIsInProperMood: function () {
                return this.ArgumentIsAnEaeSyllogism();
            },
            ArgumentIsAnEaeSyllogism: function () {
                return this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(0).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.E && this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(1).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.A && this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(2).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.E;
            },
            GetMoodName: function () {
                return "EAE";
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.Moods.IsAnAOOArgumentStep", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.IsAMoodStep],
        ctors: {
            ctor: function (argumentAnswer, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.IsAParticularMoodStep.IsAMoodStep.ctor.call(this, argumentAnswer, feedbackAppender);
            }
        },
        methods: {
            ArgumentIsInProperMood: function () {
                return this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(0).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.A && this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(1).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.O && this.ArgumentAnswer.Argument$IArgument$Propositions.getItem(2).Proposition$IProposition$Category === Proposition.Parts.PropositionCategory.O;
            },
            GetMoodName: function () {
                return "AOO";
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DeriveMajorPremiseChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DerivePremiseTypeChain],
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DerivePremiseTypeChain.ctor.call(this, nextChain, feedbackAppender);
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitializeMembers(validSyllogismData);

                if (this.MajorPremiseExists()) {
                    this.AddSuccessFeedback("Syllogism has a major premise");
                } else {
                    this.AddFailureFeedback("Syllogism does not have a major premise");
                }

                this.NextChain.Process(validSyllogismData);
            },
            MajorPremiseExists: function () {
                if (this.TermIsInTheFirstPremise(this.MajorTerm)) {
                    this.MajorPremise = this.Premise1;
                    return true;
                }

                if (this.TermIsInTheSecondPremise(this.MajorTerm)) {
                    this.MajorPremise = this.Premise2;
                    return true;
                }

                return false;
            }
        }
    });

    Bridge.define("LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DeriveMinorPremiseChain", {
        inherits: [LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DerivePremiseTypeChain],
        ctors: {
            ctor: function (nextChain, feedbackAppender) {
                this.$initialize();
                LogicalAnalysisEngine.ArgumentAnalysis.Syllogisms.LogicalAnalysisSteps.ValidSyllogismStep.Chains.SyllogismBasics.DerivePremiseType.DerivePremiseTypeChain.ctor.call(this, nextChain, feedbackAppender);
            }
        },
        methods: {
            Process: function (validSyllogismData) {
                this.InitializeMembers(validSyllogismData);

                if (this.MinorPremiseExists()) {
                    this.AddSuccessFeedback("Syllogism has a minor premise");
                } else {
                    this.AddFailureFeedback("Syllogism does not have a minor premise");
                }

                this.NextChain.Process(validSyllogismData);
            },
            MinorPremiseExists: function () {
                if (this.TermIsInTheFirstPremise(this.MinorTerm)) {
                    this.MinorPremise = this.Premise1;
                    return true;
                }

                if (this.TermIsInTheSecondPremise(this.MinorTerm)) {
                    this.MinorPremise = this.Premise2;
                    return true;
                }

                return false;
            }
        }
    });

    Bridge.define("Proposition.Proposition", {
        inherits: [Proposition.IProposition],
        fields: {
            _isPremise: false,
            _isConclusion: false,
            RawSentence: null,
            Quantifier: 0,
            QuantifierText: null,
            SubjectText: null,
            Copula: 0,
            CopulaText: null,
            PredicateText: null,
            IsSyntaxValid: false,
            AssertThatItIs: false,
            Category: 0
        },
        props: {
            IsPremise: {
                get: function () {
                    return this._isPremise;
                },
                set: function (value) {
                    this._isPremise = value;
                    this._isConclusion = !value;
                }
            },
            IsConclusion: {
                get: function () {
                    return this._isConclusion;
                },
                set: function (value) {
                    this._isConclusion = value;
                    this._isPremise = !value;
                }
            }
        },
        alias: [
            "RawSentence", "Proposition$IProposition$RawSentence",
            "Quantifier", "Proposition$IProposition$Quantifier",
            "QuantifierText", "Proposition$IProposition$QuantifierText",
            "SubjectText", "Proposition$IProposition$SubjectText",
            "Copula", "Proposition$IProposition$Copula",
            "CopulaText", "Proposition$IProposition$CopulaText",
            "PredicateText", "Proposition$IProposition$PredicateText",
            "IsSyntaxValid", "Proposition$IProposition$IsSyntaxValid",
            "AssertThatItIs", "Proposition$IProposition$AssertThatItIs",
            "Category", "Proposition$IProposition$Category",
            "IsPremise", "Proposition$IProposition$IsPremise",
            "IsConclusion", "Proposition$IProposition$IsConclusion",
            "GetCleanedTermNameFromSubjectText", "Proposition$IProposition$GetCleanedTermNameFromSubjectText",
            "GetCleanedTermNameFromPredicateText", "Proposition$IProposition$GetCleanedTermNameFromPredicateText"
        ],
        methods: {
            GetCleanedTermNameFromSubjectText: function () {
                return this.GetCleanTermName(this.SubjectText);
            },
            GetCleanedTermNameFromPredicateText: function () {
                return this.GetCleanTermName(this.PredicateText);
            },
            GetCleanTermName: function (dirtyTermName) {
                return dirtyTermName != null ? dirtyTermName.trim().toLowerCase() : null;
            }
        }
    });

    Bridge.define("PropositionVm.PropositionViewModel", {
        inherits: [Items.Item,PropositionVm.IPropositionViewModel],
        fields: {
            _proposition: null,
            _propositionFactory: null,
            _messenger: null,
            _saveAndAddNewPropositionToTheNextLineCommand: null
        },
        props: {
            RawSentence: {
                get: function () {
                    return this._proposition.Proposition$IProposition$RawSentence;
                },
                set: function (value) {
                    this._proposition.Proposition$IProposition$RawSentence = value;
                    this.OnPropertyChanged("RawSentence");
                }
            },
            QuantifierText: {
                get: function () {
                    if (this._proposition.Proposition$IProposition$QuantifierText == null) {
                        return null;
                    } else {
                        return (SocraLogicHtml5.Common.ColorDepot.GetGreenTagPerTheme(this.AppearanceManagerWrapper) || "") + (this._proposition.Proposition$IProposition$QuantifierText || "") + " " + (SocraLogicHtml5.Common.ColorDepot.GetEndColorTag() || "");
                    }
                }
            },
            SubjectText: {
                get: function () {
                    return this._proposition.Proposition$IProposition$SubjectText;
                }
            },
            CopulaText: {
                get: function () {
                    if (this._proposition.Proposition$IProposition$CopulaText == null) {
                        return null;
                    } else {
                        return (SocraLogicHtml5.Common.ColorDepot.GetBlueTagPerTheme(this.AppearanceManagerWrapper) || "") + (this._proposition.Proposition$IProposition$CopulaText || "") + (SocraLogicHtml5.Common.ColorDepot.GetEndColorTag() || "");
                    }
                }
            },
            PredicateText: {
                get: function () {
                    return this._proposition.Proposition$IProposition$PredicateText;
                }
            },
            StylizedSentence: {
                get: function () {
                    if (this.IsSyntaxValid) {
                        return (this.QuantifierText || "") + (this.SubjectText || "") + (this.CopulaText || "") + (this.PredicateText || "");
                    } else {
                        return "[color=Red]" + (this.RawSentence || "") + "[/color]";
                    }
                }
            },
            IsSyntaxValid: {
                get: function () {
                    return this._proposition.Proposition$IProposition$IsSyntaxValid;
                }
            },
            Category: {
                get: function () {
                    return this._proposition.Proposition$IProposition$Category;
                }
            },
            IsPremise: {
                get: function () {
                    return this._proposition.Proposition$IProposition$IsPremise;
                },
                set: function (value) {
                    this._proposition.Proposition$IProposition$IsPremise = value;
                    this._messenger.Messaging$IMessenger$Send(Messaging.MessengerToken.SelectedPropositionChanged);
                }
            },
            IsConclusion: {
                get: function () {
                    return this._proposition.Proposition$IProposition$IsConclusion;
                },
                set: function (value) {
                    this._proposition.Proposition$IProposition$IsConclusion = value;
                    this._messenger.Messaging$IMessenger$Send(Messaging.MessengerToken.SelectedPropositionChanged);
                }
            },
            AssertThatItIs: {
                get: function () {
                    return this._proposition.Proposition$IProposition$AssertThatItIs;
                },
                set: function (value) {
                    this._proposition.Proposition$IProposition$AssertThatItIs = value;
                    this._messenger.Messaging$IMessenger$Send(Messaging.MessengerToken.SelectedPropositionChanged);
                }
            },
            SelectedItemBackgroundColor: {
                get: function () {
                    if (System.Uri.equals(this.AppearanceManagerWrapper.AppearanceManager$IAppearanceManagerWrapper$GetCurrentThemeSource(), this.AppearanceManagerWrapper.AppearanceManager$IAppearanceManagerWrapper$GetDarkThemeSource())) {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Black;
                    } else {
                        return SocraLogicHtml5.Common.ColorDepot.Brushes.Gainsboro;
                    }
                }
            },
            SaveAndAddNewPropositionToTheNextLineCommand: {
                get: function () {
                    return this._saveAndAddNewPropositionToTheNextLineCommand || ((this._saveAndAddNewPropositionToTheNextLineCommand = new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.SaveAndAddNewPropositionToTheNextLine), this.CommandsCanExecute)));
                }
            }
        },
        alias: [
            "RawSentence", "PropositionVm$IPropositionViewModel$RawSentence",
            "QuantifierText", "PropositionVm$IPropositionViewModel$QuantifierText",
            "SubjectText", "PropositionVm$IPropositionViewModel$SubjectText",
            "CopulaText", "PropositionVm$IPropositionViewModel$CopulaText",
            "PredicateText", "PropositionVm$IPropositionViewModel$PredicateText",
            "StylizedSentence", "PropositionVm$IPropositionViewModel$StylizedSentence",
            "IsSyntaxValid", "PropositionVm$IPropositionViewModel$IsSyntaxValid",
            "Category", "PropositionVm$IPropositionViewModel$Category",
            "IsPremise", "PropositionVm$IPropositionViewModel$IsPremise",
            "IsConclusion", "PropositionVm$IPropositionViewModel$IsConclusion",
            "AssertThatItIs", "PropositionVm$IPropositionViewModel$AssertThatItIs",
            "SelectedItemBackgroundColor", "PropositionVm$IPropositionViewModel$SelectedItemBackgroundColor",
            "SaveAndAddNewPropositionToTheNextLineCommand", "PropositionVm$IPropositionViewModel$SaveAndAddNewPropositionToTheNextLineCommand",
            "GetProposition", "PropositionVm$IPropositionViewModel$GetProposition"
        ],
        ctors: {
            ctor: function (proposition, propositionFactory, messenger, appearanceManagerWrapper) {
                this.$initialize();
                Items.Item.ctor.call(this, appearanceManagerWrapper);
                this._proposition = proposition;
                this._propositionFactory = propositionFactory;
                this._messenger = messenger;
                this._messenger.Messaging$IMessenger$Register(this, Bridge.box(Messaging.MessengerToken.ThemeChanged, Messaging.MessengerToken, System.Enum.toStringFn(Messaging.MessengerToken)), Bridge.fn.bind(this, function (messengerToken) {
                    this.UpdateStylizedText();
                }));
            }
        },
        methods: {
            UpdateStylizedText: function () {
                this.FireOnPropertyChangedForAllProperties();
            },
            BacktoReadOnlyMode: function () {
                var newUpdatedProposition = this._propositionFactory.Proposition$Factory$IPropositionFactory$Create(this._proposition.Proposition$IProposition$RawSentence, this._proposition.Proposition$IProposition$IsPremise, this._proposition.Proposition$IProposition$AssertThatItIs);
                this._proposition = newUpdatedProposition;
                this.FireOnPropertyChangedForAllProperties();
                this.ChangeAccessModeTo(Items.AccessMode.ItemAccessMode.ReadOnly);
                this.FireOnPropertyChangedForAllProperties();
                this.IsTextBoxFocused = false;
            },
            SetToEditMode: function () {
                this.ChangeAccessModeTo(Items.AccessMode.ItemAccessMode.Edit);
                this.FireOnPropertyChangedForAllProperties();
                this.IsTextBoxFocused = true;
            },
            SaveAndAddNewPropositionToTheNextLine: function () {
                this.BacktoReadOnlyMode();
                this._messenger.Messaging$IMessenger$Send(Messaging.MessengerToken.AddProposition);
            },
            FireOnPropertyChangedForAllProperties: function () {
                this.OnPropertyChanged("IsInEditMode");
                this.OnPropertyChanged("IsInReadOnlyMode");
                this.OnPropertyChanged("IsSyntaxValid");
                this.OnPropertyChanged("IsTextBoxFocused");
                this.OnPropertyChanged("RawSentence");
                this.OnPropertyChanged("SubjectText");
                this.OnPropertyChanged("PredicateText");
                this.OnPropertyChanged("CopulaText");
                this.OnPropertyChanged("QuantifierText");
                this.OnPropertyChanged("StylizedSentence");
                this.OnPropertyChanged("SelectedItemBackgroundColor");
                this._messenger.Messaging$IMessenger$Send(Messaging.MessengerToken.SelectedPropositionChanged);
            },
            GetProposition: function () {
                return this._proposition;
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourCategoricalPropositions.FourCategoricalPropositionsContentStepFactory", {
        inherits: [Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourCategoricalPropositions.IFourCategoricalPropositionsContentStepFactory],
        alias: ["Create", "Tutorial$TutorialStep$ContentStep$IOffTheShelfContentStepFactory$Create"],
        methods: {
            Create: function () {
                var contentStepFactory = new Tutorial.TutorialStep.ContentStep.ContentStepFactory();
                var title = "Four Categories";
                var textContent = "Universal Affirmative (A): All S is P \nUniversal Negative (E): No S is P \nParticular Affirmative (I): Some S is P \nParticular Negative (O): Some S is not P";

                return contentStepFactory.Create(title, textContent);
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourPartsOfACategoricalProposition.FourPartsOfACategoricalPropositionContentStepFactory", {
        inherits: [Tutorial.TutorialStep.CategoricalLogicSyntaxSteps.Content.FourPartsOfACategoricalProposition.IFourPartsOfACategoricalPropositionContentStepFactory],
        alias: ["Create", "Tutorial$TutorialStep$ContentStep$IOffTheShelfContentStepFactory$Create"],
        methods: {
            Create: function () {
                var contentStepFactory = new Tutorial.TutorialStep.ContentStep.ContentStepFactory();
                var title = "Parts of a Proposition";
                var textContent = "For the proposition 'All horses are black,' here are the parts... \n\nQuantifier: All \nSubject: horses \nCopula: are \nPredicate: black \n\nQuantifier refers to quantity = how much (all, some, no)\nCopula refers to quality = affirmative (are) or negative (are not)";
                return contentStepFactory.Create(title, textContent);
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.CommonAnswerCheckers.PropositionAnswerChecker", {
        inherits: [Tutorial.TutorialStep.QuestionSteps.QuestionAnswerChecker],
        fields: {
            _propositionAnalysisEngineFactory: null
        },
        ctors: {
            ctor: function (validSyllogismQuestion, propositionAnalysisEngineFactory) {
                this.$initialize();
                Tutorial.TutorialStep.QuestionSteps.QuestionAnswerChecker.ctor.call(this, validSyllogismQuestion);
                this._propositionAnalysisEngineFactory = propositionAnalysisEngineFactory;
            }
        },
        methods: {
            CreateLogicalAnalysisEngine: function (studentsAnswer) {
                var submittedAnswerRawPropositionSentence = Bridge.cast(studentsAnswer, System.String);
                this.LogicalAnalysisEngine = this._propositionAnalysisEngineFactory.Create(submittedAnswerRawPropositionSentence);
            }
        }
    });

    Bridge.define("Tutorial.TutorialStep.QuestionStep.SyllogismSteps.CheckAnswerForValidSyllogismQuestion.ValidSyllogismAnswerChecker", {
        inherits: [Tutorial.TutorialStep.QuestionSteps.QuestionAnswerChecker],
        fields: {
            _syllogismLogicalAnalysisEngineFactory: null
        },
        ctors: {
            ctor: function (validSyllogismQuestion, validAaaSyllogismLogicalAnalysisEngineFactory) {
                this.$initialize();
                Tutorial.TutorialStep.QuestionSteps.QuestionAnswerChecker.ctor.call(this, validSyllogismQuestion);
                this._syllogismLogicalAnalysisEngineFactory = validAaaSyllogismLogicalAnalysisEngineFactory;
            }
        },
        methods: {
            CreateLogicalAnalysisEngine: function (studentsAnswer) {
                var argumentAnswer = Bridge.cast(studentsAnswer, Argument.IArgument);
                this.LogicalAnalysisEngine = this._syllogismLogicalAnalysisEngineFactory.LogicalAnalysisEngine$ArgumentAnalysis$Syllogisms$IValidSyllogismLogicalAnalysisEngineFactory$Create(argumentAnswer);
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedDataIntoStepsNullObject", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedDataIntoSteps],
        methods: {
            GetTutorialDataObject: function (factoryData) { },
            GetTutorialDataObjectsSelectedStep: function () {
                return 0;
            },
            LoadAnalysisStatus: function (i) { },
            LoadAnswerQuestionAttempts: function (i) { },
            LoadCompletedStatus: function (i) { },
            LoadDataObjectsStepDataIntoLists: function () { },
            LoadSubmittedAnswer: function (i) { }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedHtml5DataIntoSteps", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedDataIntoSteps],
        fields: {
            _tutorialDataObject: null,
            _analysisStatuses: null,
            _submittedAnswers: null,
            _completedStatuses: null,
            _answerQuestionAttempts: null
        },
        methods: {
            GetTutorialDataObject: function (factoryData) {
                this._tutorialDataObject = Bridge.cast(factoryData.TutorialDataObject, TutorialPersistence.DataObject.TutorialDataObjectHtml5);
            },
            GetTutorialDataObjectsSelectedStep: function () {
                return this._tutorialDataObject.SelectedStep;
            },
            LoadDataObjectsStepDataIntoLists: function () {
                var dataWithNewLinesRemoved = "";

                dataWithNewLinesRemoved = System.String.replaceAll(this._tutorialDataObject.AnalysisStatuses, "\n", "");
                this._analysisStatuses = System.String.split(dataWithNewLinesRemoved, [59].map(function (i) {{ return String.fromCharCode(i); }}));

                dataWithNewLinesRemoved = System.String.replaceAll(this._tutorialDataObject.SubmittedAnswers, "\n", "");
                this._submittedAnswers = System.String.split(dataWithNewLinesRemoved, [59].map(function (i) {{ return String.fromCharCode(i); }}));

                dataWithNewLinesRemoved = System.String.replaceAll(this._tutorialDataObject.CompletedStatuses, "\n", "");
                this._completedStatuses = System.String.split(dataWithNewLinesRemoved, [59].map(function (i) {{ return String.fromCharCode(i); }}));

                dataWithNewLinesRemoved = System.String.replaceAll(this._tutorialDataObject.AnswerQuestionAttempts, "\n", "");
                this._answerQuestionAttempts = System.String.split(dataWithNewLinesRemoved, [59].map(function (i) {{ return String.fromCharCode(i); }}));
            },
            LoadSubmittedAnswer: function (i) {
                var answer = this._submittedAnswers[System.Array.index(i, this._submittedAnswers)];
                if (System.String.contains(answer,",")) {
                    var argument = System.Linq.Enumerable.from(System.String.split(this._submittedAnswers[System.Array.index(i, this._submittedAnswers)], [44].map(function (i) {{ return String.fromCharCode(i); }}))).toList(System.String);
                    this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw = argument.getItem(0);
                    this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw = argument.getItem(1);
                    this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw = argument.getItem(2);
                } else {
                    this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw = answer;
                }
            },
            LoadAnalysisStatus: function (i) {
                this.RawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnalysisStatus, Bridge.box(LogicalAnalysisEngine.Status.StringToStatusTranslator.GetLogicalAnalysisStatus(this._analysisStatuses[System.Array.index(i, this._analysisStatuses)]), LogicalAnalysisEngine.Status.LogicalAnalysisStatus, System.Enum.toStringFn(LogicalAnalysisEngine.Status.LogicalAnalysisStatus)));
            },
            LoadCompletedStatus: function (i) {
                this.RawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.IsCompleted, Bridge.box(TutorialPersistence.Deserializer.Utilities.StringTranslator.GetBool(this._completedStatuses[System.Array.index(i, this._completedStatuses)]), System.Boolean, System.Boolean.toString));
            },
            LoadAnswerQuestionAttempts: function (i) {
                this.RawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts, Bridge.box(System.Convert.toInt32(this._answerQuestionAttempts[System.Array.index(i, this._answerQuestionAttempts)]), System.Int32));
            }
        }
    });

    Bridge.define("TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedWpfDataIntoSteps", {
        inherits: [TutorialVm.Factory.SetupVmDataAction.LoadDeserializedDataIntoSteps.LoadDeserializedDataIntoSteps],
        fields: {
            _tutorialDataObject: null
        },
        methods: {
            GetTutorialDataObject: function (factoryData) {
                this._tutorialDataObject = Bridge.cast(factoryData.TutorialDataObject, TutorialPersistence.DataObject.TutorialDataObjectWpf);
            },
            GetTutorialDataObjectsSelectedStep: function () {
                return this._tutorialDataObject.SelectedStep;
            },
            LoadDataObjectsStepDataIntoLists: function () { },
            LoadSubmittedAnswer: function (i) {
                this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw = this._tutorialDataObject.SubmittedAnswers.getItem(i).getItem(0);
                if (this._tutorialDataObject.SubmittedAnswers.getItem(i).Count >= 2) {
                    this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw = this._tutorialDataObject.SubmittedAnswers.getItem(i).getItem(1);
                }
                if (this._tutorialDataObject.SubmittedAnswers.getItem(i).Count >= 3) {
                    this.StepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$Raw = this._tutorialDataObject.SubmittedAnswers.getItem(i).getItem(2);
                }
            },
            LoadAnalysisStatus: function (i) {
                this.RawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnalysisStatus, Bridge.box(this._tutorialDataObject.AnalysisStatuses.getItem(i), LogicalAnalysisEngine.Status.LogicalAnalysisStatus, System.Enum.toStringFn(LogicalAnalysisEngine.Status.LogicalAnalysisStatus)));
            },
            LoadCompletedStatus: function (i) {
                this.RawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.IsCompleted, Bridge.box(this._tutorialDataObject.CompletedStatuses.getItem(i), System.Boolean, System.Boolean.toString));
            },
            LoadAnswerQuestionAttempts: function (i) {
                this.RawTutorialStep.Tutorial$TutorialStep$ITutorialStep$DataDecorator.setItem(Tutorial.TutorialStep.Data.AnswerQuestionAttempts, Bridge.box(this._tutorialDataObject.AnswerQuestionAttempts.getItem(i), System.Int32));
            }
        }
    });

    Bridge.define("TutorialVm.StepList.TutorialStepListViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.StepList.ITutorialStepListViewModel],
        fields: {
            _tutorial: null,
            _steps: null,
            _selectedStep: null,
            _visible: false,
            _hideButtonVisible: false,
            _showButtonVisible: false,
            _commandsCanExecute: false,
            TutorialVM: null
        },
        props: {
            Steps: {
                get: function () {
                    return this._steps;
                }
            },
            SelectedStep: {
                get: function () {
                    return this._selectedStep;
                },
                set: function (value) {
                    this._selectedStep = value;
                    this.OnPropertyChanged("SelectedStep");
                }
            },
            Visible: {
                get: function () {
                    return this._visible;
                },
                set: function (value) {
                    this._visible = value;
                    this.OnPropertyChanged("Visible");
                }
            },
            HideButtonVisible: {
                get: function () {
                    return this._hideButtonVisible;
                },
                set: function (value) {
                    this._hideButtonVisible = value;
                    this.OnPropertyChanged("HideButtonVisible");
                }
            },
            ShowButtonVisible: {
                get: function () {
                    return this._showButtonVisible;
                },
                set: function (value) {
                    this._showButtonVisible = value;
                    this.OnPropertyChanged("ShowButtonVisible");
                }
            },
            Hide: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.HideCommandHandler), this._commandsCanExecute);
                }
            },
            Show: {
                get: function () {
                    return new CommandHandlers.CommandHandler(Bridge.fn.cacheBind(this, this.ShowCommandHandler), this._commandsCanExecute);
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$StepList$ITutorialStepListViewModel$UpdateAllProperties",
            "UpdateAllPropertiesOfSelectedStep", "TutorialVm$StepList$ITutorialStepListViewModel$UpdateAllPropertiesOfSelectedStep",
            "Steps", "TutorialVm$StepList$ITutorialStepListViewModel$Steps",
            "SelectedStep", "TutorialVm$StepList$ITutorialStepListViewModel$SelectedStep",
            "Visible", "TutorialVm$StepList$ITutorialStepListViewModel$Visible",
            "HideButtonVisible", "TutorialVm$StepList$ITutorialStepListViewModel$HideButtonVisible",
            "ShowButtonVisible", "TutorialVm$StepList$ITutorialStepListViewModel$ShowButtonVisible",
            "TutorialVM", "TutorialVm$StepList$ITutorialStepListViewModel$TutorialVM",
            "Hide", "TutorialVm$StepList$ITutorialStepListViewModel$Hide",
            "Show", "TutorialVm$StepList$ITutorialStepListViewModel$Show",
            "SetInitialStepSelection", "TutorialVm$StepList$ITutorialStepListViewModel$SetInitialStepSelection",
            "DeselectCurrentStep", "TutorialVm$StepList$ITutorialStepListViewModel$DeselectCurrentStep",
            "SelectThisStep", "TutorialVm$StepList$ITutorialStepListViewModel$SelectThisStep",
            "SetTutorialParentForAllSteps", "TutorialVm$StepList$ITutorialStepListViewModel$SetTutorialParentForAllSteps",
            "Accept", "TutorialVm$StepList$Visitors$INewStepSelectionVisitable$Accept",
            "CompleteCurrentStepIfItsAContentStep", "TutorialVm$StepList$ITutorialStepListViewModel$CompleteCurrentStepIfItsAContentStep",
            "ToggleCurrentStepsRetryAnswerFocusToTrue", "TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRetryAnswerFocusToTrue",
            "ToggleCurrentStepsRetryAnswerFocusToFalse", "TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRetryAnswerFocusToFalse",
            "ToggleCurrentStepsRawStudentAnswersFocusToTrue", "TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRawStudentAnswersFocusToTrue",
            "ToggleCurrentStepsRawStudentAnswersFocusToFalse", "TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRawStudentAnswersFocusToFalse",
            "SelectTheNextStep", "TutorialVm$StepList$ITutorialStepListViewModel$SelectTheNextStep",
            "SelectThePreviousStep", "TutorialVm$StepList$ITutorialStepListViewModel$SelectThePreviousStep",
            "CurrentlySelectedStepIndex", "TutorialVm$StepList$ITutorialStepListViewModel$CurrentlySelectedStepIndex",
            "CountOfSteps", "TutorialVm$StepList$ITutorialStepListViewModel$CountOfSteps",
            "SelectedStepIsAnswerable", "TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsAnswerable",
            "CurrentStepsIsAnsweredCorrectly", "TutorialVm$StepList$ITutorialStepListViewModel$CurrentStepsIsAnsweredCorrectly",
            "CurrentStepsRawAnswerTextBoxIsVisible", "TutorialVm$StepList$ITutorialStepListViewModel$CurrentStepsRawAnswerTextBoxIsVisible",
            "SelectedStepIsCompleted", "TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsCompleted",
            "SelectedStepIsTheLastStep", "TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsTheLastStep",
            "SelectedStepIsTheFirstStep", "TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsTheFirstStep"
        ],
        ctors: {
            ctor: function (steps, tutorial) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._steps = steps;
                this._tutorial = tutorial;
                this._visible = false;
                this._hideButtonVisible = false;
                this._showButtonVisible = true;
                this._commandsCanExecute = true;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Steps");
                this.OnPropertyChanged("SelectedStep");
                this.OnPropertyChanged("Visible");
                this.OnPropertyChanged("HideButtonVisible");
                this.OnPropertyChanged("ShowButtonVisible");
            },
            UpdateAllPropertiesOfSelectedStep: function () {
                this.OnPropertyChanged("SelectedStep");
                this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$UpdateAllProperties();
            },
            HideCommandHandler: function () {
                this.Visible = false;
                this.HideButtonVisible = false;
                this.ShowButtonVisible = true;
            },
            ShowCommandHandler: function () {
                this.Visible = true;
                this.HideButtonVisible = true;
                this.ShowButtonVisible = false;
            },
            SetInitialStepSelection: function () {
                this.SelectedStep = this.Steps.getItem(0);
                this.Steps.getItem(0).TutorialVm$TutorialStep$ITutorialStepViewModel$SetIsSelectedTo(true);
            },
            DeselectCurrentStep: function () {
                this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$SetIsSelectedTo(false);
                this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$UpdateAllProperties();
            },
            SelectThisStep: function (stepIndex) {
                this.Steps.getItem(stepIndex).TutorialVm$TutorialStep$ITutorialStepViewModel$SetIsSelectedTo(true);
                this.SelectedStep = this.Steps.getItem(stepIndex);
            },
            SetTutorialParentForAllSteps: function (parentTutorial) {
                var $t;
                $t = Bridge.getEnumerator(this.Steps);
                try {
                    while ($t.moveNext()) {
                        var step = $t.Current;
                        step.TutorialVm$TutorialStep$ITutorialStepViewModel$ParentTutorial = parentTutorial;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            Accept: function (visitor, listOfNewlySelectedItems) {
                visitor.TutorialVm$StepList$Visitors$INewStepSelectionVisitor$Visit(this, listOfNewlySelectedItems);
            },
            CompleteCurrentStepIfItsAContentStep: function () {
                if (this.SelectedStepIsAContentStep()) {
                    this.CompleteCurrentStep();
                }
            },
            ToggleCurrentStepsRetryAnswerFocusToTrue: function () {
                this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRetryAnswerFocusToTrue();
            },
            ToggleCurrentStepsRetryAnswerFocusToFalse: function () {
                this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRetryAnswerFocusToFalse();
            },
            ToggleCurrentStepsRawStudentAnswersFocusToTrue: function () {
                this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRawStudentAnswersFocusToTrue();
            },
            ToggleCurrentStepsRawStudentAnswersFocusToFalse: function () {
                this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$ToggleRawStudentAnswersFocusToFalse();
            },
            SelectTheNextStep: function () {
                this.SelectThisStep(((this.CurrentlySelectedStepIndex() + 1) | 0));
            },
            SelectThePreviousStep: function () {
                this.SelectThisStep(((this.CurrentlySelectedStepIndex() - 1) | 0));
            },
            CompleteCurrentStep: function () {
                this._tutorial.Tutorial$ITutorial$CompleteThisStep(this.CurrentlySelectedStepIndex());
            },
            CurrentlySelectedStepIndex: function () {
                return this.Steps.indexOf(this.SelectedStep);
            },
            CountOfSteps: function () {
                return this.Steps.Count;
            },
            TheIndexOfTheLastStep: function () {
                return ((this.Steps.Count - 1) | 0);
            },
            SelectedStepIsAnswerable: function () {
                return this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$IsAnswerable();
            },
            CurrentStepsIsAnsweredCorrectly: function () {
                return this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$IsAnsweredCorrectly();
            },
            CurrentStepsRawAnswerTextBoxIsVisible: function () {
                return this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$RawAnswerTextBoxIsVisible();
            },
            SelectedStepIsCompleted: function () {
                return this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$IsCompleted;
            },
            SelectedStepIsTheLastStep: function () {
                return this.CurrentlySelectedStepIndex() === this.TheIndexOfTheLastStep();
            },
            SelectedStepIsTheFirstStep: function () {
                return this.CurrentlySelectedStepIndex() === 0;
            },
            SelectedStepIsAContentStep: function () {
                return !this.SelectedStepIsAnswerable() && !this.SelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$AreStatsVisible();
            }
        }
    });

    Bridge.define("TutorialVm.StepList.Visitors.HandleNewStepSelected.HandleNewStepVMSelectedVisitor", {
        inherits: [TutorialVm.StepList.Visitors.HandleNewStepSelected.IHandleNewStepVMSelectedVisitor],
        fields: {
            _stepListVM: null,
            _setInitialFocusForCurrentStepVisitor: null,
            _updateAllPropertiesOfTutorialAndSelectedStepVisitor: null,
            _persistTutorialVisitor: null
        },
        alias: ["Visit", "TutorialVm$StepList$Visitors$INewStepSelectionVisitor$Visit"],
        ctors: {
            ctor: function (setInitialFocusForCurrentStepVisitor, updateAllPropertiesOfTutorialAndSelectedStepVisitor, persistTutorialVisitor) {
                this.$initialize();
                this._setInitialFocusForCurrentStepVisitor = setInitialFocusForCurrentStepVisitor;
                this._updateAllPropertiesOfTutorialAndSelectedStepVisitor = updateAllPropertiesOfTutorialAndSelectedStepVisitor;
                this._persistTutorialVisitor = persistTutorialVisitor;
            }
        },
        methods: {
            Visit: function (stepListVM, listOfNewlySelectedItems) {
                this._stepListVM = stepListVM;

                this.SelectThisIfAllowed(this.GetNewlySelectedStep(listOfNewlySelectedItems));
                this.UpdateTutorialAndSelectedStep();
                this.SetTutorialsInitialFocusForCurrentStep();
                this.PersistTutorial();
            },
            GetNewlySelectedStep: function (newlySelectedItems) {
                var list = this.ConvertToListOf(System.Object, newlySelectedItems);
                var newlySelectedItemsCollection = new (System.Collections.ObjectModel.Collection$1(System.Object)).$ctor1(list);
                return Bridge.cast(System.Linq.Enumerable.from(newlySelectedItemsCollection).first(), TutorialVm.TutorialStep.ITutorialStepViewModel);
            },
            ConvertToListOf: function (T, iList) {
                var $t;
                var result = new (System.Collections.Generic.List$1(T)).ctor();
                $t = Bridge.getEnumerator(iList);
                try {
                    while ($t.moveNext()) {
                        var value = Bridge.cast($t.Current, T);
                        System.Array.add(result, value, T);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return result;
            },
            SelectThisIfAllowed: function (newlySelectedStep) {
                if (this.AnyOfConditionsAreMetToAllowThisStepToBeSelected(newlySelectedStep)) {
                    this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$DeselectCurrentStep();
                    this.SelectThisStep(newlySelectedStep);
                }
            },
            SelectThisStep: function (step) {
                this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$SelectThisStep(this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$Steps.indexOf(step));
            },
            AnyOfConditionsAreMetToAllowThisStepToBeSelected: function (newlySelectedStep) {
                return this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$TutorialVM.TutorialVm$ITutorialViewModel$IsCompleted || newlySelectedStep.TutorialVm$TutorialStep$ITutorialStepViewModel$IsCompleted || this.NewlySelectedStepIsRightAfterLastCompletedStep(newlySelectedStep);
            },
            NewlySelectedStepIsRightAfterLastCompletedStep: function (newSelectedTutorialStepVm) {
                if (this.NoStepsAreCompleted()) {
                    return false;
                }
                if (this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$Steps.indexOf(newSelectedTutorialStepVm) === this.IndexOfStepRightAfterLastCompletedStep()) {
                    return true;
                } else {
                    return false;
                }
            },
            NoStepsAreCompleted: function () {
                return System.Linq.Enumerable.from(System.Linq.Enumerable.from(this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$Steps).where(function (x) {
                            return x.TutorialVm$TutorialStep$ITutorialStepViewModel$IsCompleted;
                        })).count() === 0;
            },
            IndexOfStepRightAfterLastCompletedStep: function () {
                return ((this.IndexOfLastCompletedStep() + 1) | 0);
            },
            IndexOfLastCompletedStep: function () {
                return this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$Steps.indexOf(System.Linq.Enumerable.from(this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$Steps).last(function (x) {
                        return x.TutorialVm$TutorialStep$ITutorialStepViewModel$IsCompleted;
                    }));
            },
            UpdateTutorialAndSelectedStep: function () {
                this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._updateAllPropertiesOfTutorialAndSelectedStepVisitor);
            },
            SetTutorialsInitialFocusForCurrentStep: function () {
                this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._setInitialFocusForCurrentStepVisitor);
            },
            PersistTutorial: function () {
                this._stepListVM.TutorialVm$StepList$ITutorialStepListViewModel$TutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._persistTutorialVisitor);
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.PassStepVMToNeededSubParts.InitializeVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.PassStepVMToNeededSubParts.IInitializeVisitor],
        fields: {
            _checkAnswer: null,
            _retryAnswer: null,
            _studentAnswer: null,
            _studentAnswer2: null,
            _studentAnswer3: null,
            _propositionInspector: null,
            _listItem: null
        },
        alias: ["Visit", "TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialStepVM) {
                this.SetMembers(tutorialStepVM);
                this.PassStepVMToNeededSubParts(tutorialStepVM);
                this.PassAroundNeededSubPartsToOtherSubParts();
            },
            SetMembers: function (tutorialStepVM) {
                this._checkAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer;
                this._retryAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$RetryAnswer;
                this._studentAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer;
                this._studentAnswer2 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer2;
                this._studentAnswer3 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer3;
                this._propositionInspector = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$PropositionInspector;
                this._listItem = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$ListItem;
            },
            PassStepVMToNeededSubParts: function (tutorialStepVM) {
                this._retryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$TutorialStepVM = tutorialStepVM;
                this._checkAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$TutorialStepVM = tutorialStepVM;
                this._studentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$TutorialStepVM = tutorialStepVM;
                this._studentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$TutorialStepVM = tutorialStepVM;
                this._studentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$TutorialStepVM = tutorialStepVM;
                this._propositionInspector.TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$TutorialStepVM = tutorialStepVM;
                this._listItem.TutorialVm$TutorialStep$ListItem$IListItemViewModel$TutorialStepVM = tutorialStepVM;
            },
            PassAroundNeededSubPartsToOtherSubParts: function () {
                this._checkAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$StudentAnswer = this._studentAnswer;
                this._checkAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$StudentAnswer2 = this._studentAnswer2;
                this._checkAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$StudentAnswer3 = this._studentAnswer3;
                this._studentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$CheckAnswer = this._checkAnswer;
                this._studentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$CheckAnswer = this._checkAnswer;
                this._studentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$CheckAnswer = this._checkAnswer;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateAllPropertiesOfMeAndMyParent.UpdateAllPropertiesOfMeAndMyParentVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.UpdateAllPropertiesOfMeAndMyParent.IUpdateAllPropertiesOfMeAndMyParentVisitor],
        fields: {
            _parentTutorial: null,
            _tutorialStepVM: null
        },
        alias: ["Visit", "TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialStepVM) {
                this.SetMembers(tutorialStepVM);

                this._tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$UpdateAllProperties();
                this._parentTutorial.TutorialVm$ITutorialViewModel$UpdateAllProperties();
            },
            SetMembers: function (tutorialStepVM) {
                this._parentTutorial = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$ParentTutorial;
                this._tutorialStepVM = tutorialStepVM;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateFocusToAnswerSubmissionState.UpdateFocusToAnswerSubmissionStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.UpdateFocusToAnswerSubmissionState.IUpdateFocusToAnswerSubmissionStateVisitor],
        fields: {
            _retryAnswer: null,
            _studentAnswer: null,
            _parentTutorial: null
        },
        alias: ["Visit", "TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialStepVM) {
                this.SetMembers(tutorialStepVM);
                this._retryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$ToggleFocusToFalse();
                this._parentTutorial.TutorialVm$ITutorialViewModel$ToggleFocusOnNextButtonToFalse();
                this._studentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToTrue();
            },
            SetMembers: function (tutorialStepVM) {
                this._retryAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$RetryAnswer;
                this._studentAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer;
                this._parentTutorial = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$ParentTutorial;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateFocusToPostAnswerState.UpdateFocusToPostAnswerStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.UpdateFocusToPostAnswerState.IUpdateFocusToPostAnswerStateVisitor],
        fields: {
            _retryAnswer: null,
            _studentAnswer: null,
            _studentAnswer2: null,
            _studentAnswer3: null,
            _tutorialStepVM: null,
            _parentTutorial: null,
            _mainFeedback: null
        },
        alias: ["Visit", "TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialStepVM) {
                this.SetMembers(tutorialStepVM);

                this._studentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToFalse();
                this._studentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToFalse();
                this._studentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$ToggleRawFocusToFalse();

                if (this._mainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Fail) {
                    this._parentTutorial.TutorialVm$ITutorialViewModel$ToggleFocusOnNextButtonToFalse();
                    this._retryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$ToggleFocusToTrue();
                }
                if (this._mainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass) {
                    this._retryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$ToggleFocusToFalse();
                    this._parentTutorial.TutorialVm$ITutorialViewModel$ToggleFocusOnNextButtonToTrue();
                }
            },
            SetMembers: function (tutorialStepVM) {
                this._retryAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$RetryAnswer;
                this._studentAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer;
                this._studentAnswer2 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer2;
                this._studentAnswer3 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer3;
                this._parentTutorial = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$ParentTutorial;
                this._mainFeedback = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$MainFeedback;
                this._tutorialStepVM = tutorialStepVM;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateToAnswerSubmissionState.UpdateToAnswerSubmissionStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.UpdateToAnswerSubmissionState.IUpdateToAnswerSubmissionStateVisitor],
        fields: {
            _checksASyllogismAnswer: false,
            _checkAnswer: null,
            _retryAnswer: null,
            _studentAnswer: null,
            _studentAnswer2: null,
            _studentAnswer3: null,
            _feedbackdetail: null,
            _propositionInspector: null
        },
        alias: ["Visit", "TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialStepVM) {
                this.SetMembers(tutorialStepVM);
                this._checkAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateToAnswerSubmissionState();
                this._retryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$UpdateToAnswerSubmissionState();
                this._feedbackdetail.TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$UpdateToAnswerSubmissionState();
                this.UpdateStudentAnswers();
                this._propositionInspector.TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$UpdateToTbdState();
            },
            UpdateStudentAnswers: function () {
                this._studentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToAnswerSubmissionState();
                if (this._checksASyllogismAnswer) {
                    this._studentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToAnswerSubmissionState();
                    this._studentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToAnswerSubmissionState();
                } else {
                    this._studentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToInvisibleState();
                    this._studentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToInvisibleState();
                }
            },
            SetMembers: function (tutorialStepVM) {
                this._checksASyllogismAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawTutorialStep().Tutorial$TutorialStep$ITutorialStep$Abilities.contains(Tutorial.TutorialStep.Ability.ChecksASyllogismAnswer);
                this._checkAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer;
                this._retryAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$RetryAnswer;
                this._studentAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer;
                this._studentAnswer2 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer2;
                this._studentAnswer3 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer3;
                this._feedbackdetail = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$FeedbackDetail;
                this._propositionInspector = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$PropositionInspector;
            }
        }
    });

    Bridge.define("TutorialVm.TutorialStep.Visitors.UpdateToPostAnswerState.UpdateToPostAnswerStateVisitor", {
        inherits: [TutorialVm.TutorialStep.Visitors.UpdateToPostAnswerState.IUpdateToPostAnswerStateVisitor],
        fields: {
            _checksASyllogismAnswer: false,
            _checkAnswer: null,
            _retryAnswer: null,
            _studentAnswer: null,
            _studentAnswer2: null,
            _studentAnswer3: null,
            _mainFeedback: null,
            _feedbackdetail: null,
            _propositionInspector: null,
            _listItem: null
        },
        alias: ["Visit", "TutorialVm$TutorialStep$Visitors$ITutorialStepViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialStepVM) {
                this.SetMembers(tutorialStepVM);

                this._checkAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$UpdateToPostAnswerState();
                this.UpdateStudentAnswers();
                this._retryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$UpdateToPostAnswerState(this._mainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus);
                this._feedbackdetail.TutorialVm$TutorialStep$FeedbackDetail$IFeedbackDetailViewModel$UpdateToPostAnswerState();
                this._listItem.TutorialVm$TutorialStep$ListItem$IListItemViewModel$UpdateStepListToPostAnswerState(this._mainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus);
                this._mainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$UpdateToPostAnswerState(this._mainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus);
                this.UpdateCommandsCanExecuteToPostAnswerState();
                this._propositionInspector.TutorialVm$TutorialStep$PropositionInspector$IPropositionInspectorViewModel$UpdateToPostAnswerState();
            },
            UpdateStudentAnswers: function () {
                this._studentAnswer.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToPostAnswerState();

                if (this._checksASyllogismAnswer) {
                    this._studentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToPostAnswerState();
                    this._studentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToPostAnswerState();
                } else {
                    this._studentAnswer2.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToInvisibleState();
                    this._studentAnswer3.TutorialVm$TutorialStep$StudentAnswer$IStudentAnswerViewModel$UpdateToInvisibleState();
                }
            },
            SetMembers: function (tutorialStepVM) {
                this._checksASyllogismAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$GetRawTutorialStep().Tutorial$TutorialStep$ITutorialStep$Abilities.contains(Tutorial.TutorialStep.Ability.ChecksASyllogismAnswer);
                this._checkAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$CheckAnswer;
                this._retryAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$RetryAnswer;
                this._studentAnswer = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer;
                this._studentAnswer2 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer2;
                this._studentAnswer3 = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$StudentAnswer3;
                this._mainFeedback = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$MainFeedback;
                this._feedbackdetail = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$FeedbackDetail;
                this._propositionInspector = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$PropositionInspector;
                this._listItem = tutorialStepVM.TutorialVm$TutorialStep$ITutorialStepViewModel$ListItem;
            },
            UpdateCommandsCanExecuteToPostAnswerState: function () {
                if (this._mainFeedback.TutorialVm$TutorialStep$MainFeedback$IMainFeedbackViewModel$RawStepAnalysisStatus === LogicalAnalysisEngine.Status.LogicalAnalysisStatus.Pass) {
                    this._retryAnswer.TutorialVm$TutorialStep$RetryAnswer$IRetryAnswerViewModel$CommandsCanExecute = false;
                    this._checkAnswer.TutorialVm$TutorialStep$CheckAnswer$ICheckAnswerViewModel$CommandsCanExecute = false;
                }
            }
        }
    });

    Bridge.define("TutorialVm.TutorialViewModel", {
        inherits: [SocraLogicHtml5.Pages.NotifyPropertyChanged,TutorialVm.ITutorialViewModel],
        fields: {
            _tutorial: null,
            _selectNextStep: null,
            _selectPreviousStep: null,
            _progressBar: null,
            _propositionInspector: null,
            _stepList: null,
            _handleNewStepVMSelectedVisitor: null
        },
        props: {
            Name: {
                get: function () {
                    return this._tutorial.Tutorial$ITutorial$Name;
                }
            },
            IsCompleted: {
                get: function () {
                    return this._tutorial.Tutorial$ITutorial$IsCompleted;
                }
            },
            SelectNextStep: {
                get: function () {
                    return this._selectNextStep;
                }
            },
            SelectPreviousStep: {
                get: function () {
                    return this._selectPreviousStep;
                }
            },
            ProgressBar: {
                get: function () {
                    return this._progressBar;
                }
            },
            PropositionInspector: {
                get: function () {
                    return this._propositionInspector;
                }
            },
            StepList: {
                get: function () {
                    return this._stepList;
                }
            }
        },
        alias: [
            "UpdateAllProperties", "TutorialVm$ITutorialViewModel$UpdateAllProperties",
            "Name", "TutorialVm$ITutorialViewModel$Name",
            "IsCompleted", "TutorialVm$ITutorialViewModel$IsCompleted",
            "SelectNextStep", "TutorialVm$ITutorialViewModel$SelectNextStep",
            "SelectPreviousStep", "TutorialVm$ITutorialViewModel$SelectPreviousStep",
            "ProgressBar", "TutorialVm$ITutorialViewModel$ProgressBar",
            "PropositionInspector", "TutorialVm$ITutorialViewModel$PropositionInspector",
            "StepList", "TutorialVm$ITutorialViewModel$StepList",
            "CurrentlySelectedStepIndex", "TutorialVm$ITutorialViewModel$CurrentlySelectedStepIndex",
            "Accept", "TutorialVm$Visitors$ITutorialViewModelVisitable$Accept",
            "ToggleFocusOnNextButtonToFalse", "TutorialVm$ITutorialViewModel$ToggleFocusOnNextButtonToFalse",
            "ToggleFocusOnNextButtonToTrue", "TutorialVm$ITutorialViewModel$ToggleFocusOnNextButtonToTrue",
            "HandleNewTutorialStepSelected", "TutorialVm$ITutorialViewModel$HandleNewTutorialStepSelected",
            "GetTutorialStepViewModels", "TutorialVm$ITutorialViewModel$GetTutorialStepViewModels"
        ],
        ctors: {
            ctor: function (TutorialViewModelData) {
                this.$initialize();
                SocraLogicHtml5.Pages.NotifyPropertyChanged.ctor.call(this);
                this._tutorial = TutorialViewModelData.Tutorial;
                this._stepList = TutorialViewModelData.StepList;
                this._handleNewStepVMSelectedVisitor = TutorialViewModelData.HandleNewStepVMSelectedVisitor;
                this._selectNextStep = TutorialViewModelData.SelectNextStep;
                this._selectPreviousStep = TutorialViewModelData.SelectPreviousStep;
                this._progressBar = TutorialViewModelData.ProgressBar;
                this._propositionInspector = TutorialViewModelData.PropositionInspector;
            }
        },
        methods: {
            UpdateAllProperties: function () {
                this.OnPropertyChanged("Name");
                this.OnPropertyChanged("IsCompleted");
                this.OnPropertyChanged("StepList");
                this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$UpdateAllProperties();
                this.OnPropertyChanged("SelectNextStep");
                this.SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$UpdateAllProperties();
                this.OnPropertyChanged("SelectPreviousStep");
                this.SelectPreviousStep.TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$UpdateAllProperties();
                this.OnPropertyChanged("ProgressBar");
                this.ProgressBar.TutorialVm$ProgressBar$IProgressBarViewModel$UpdateAllProperties();
                this.OnPropertyChanged("PropositionInspector");
                this.PropositionInspector.TutorialVm$PropositionInspector$IPropositionInspectorVisibilityViewModel$UpdateAllProperties();
            },
            CurrentlySelectedStepIndex: function () {
                return this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$CurrentlySelectedStepIndex();
            },
            Accept: function (visitor) {
                visitor.TutorialVm$Visitors$ITutorialViewModelVisitor$Visit(this);
            },
            ToggleFocusOnNextButtonToFalse: function () {
                this.SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$ToggleFocusToFalse();
            },
            ToggleFocusOnNextButtonToTrue: function () {
                this.SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$ToggleFocusToTrue();
            },
            HandleNewTutorialStepSelected: function (newlySelectedItems) {
                this.StepList.TutorialVm$StepList$Visitors$INewStepSelectionVisitable$Accept(this._handleNewStepVMSelectedVisitor, newlySelectedItems);
            },
            GetTutorialStepViewModels: function () {
                return this.StepList.TutorialVm$StepList$ITutorialStepListViewModel$Steps;
            }
        }
    });

    Bridge.define("TutorialVm.Visitors.Initialize.InitializeTutorialVMVisitor", {
        inherits: [TutorialVm.Visitors.Initialize.IInitializeTutorialVMVisitor],
        fields: {
            _setInitialFocusForCurrentStepVisitor: null,
            _tutorialVM: null
        },
        alias: ["Visit", "TutorialVm$Visitors$ITutorialViewModelVisitor$Visit"],
        ctors: {
            ctor: function (setInitialFocusForCurrentStepVisitor) {
                this.$initialize();
                this._setInitialFocusForCurrentStepVisitor = setInitialFocusForCurrentStepVisitor;
            }
        },
        methods: {
            Visit: function (tutorialVM) {
                this._tutorialVM = tutorialVM;

                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$SetTutorialParentForAllSteps(this._tutorialVM);
                this.PassTutorialVMToSubPartsThatNeedIt();
                this.PassAroundNeededSubPartsToOtherSubParts();
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$SetInitialStepSelection();
                this._tutorialVM.TutorialVm$Visitors$ITutorialViewModelVisitable$Accept(this._setInitialFocusForCurrentStepVisitor);
            },
            PassTutorialVMToSubPartsThatNeedIt: function () {
                this._tutorialVM.TutorialVm$ITutorialViewModel$SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$TutorialVM = this._tutorialVM;
                this._tutorialVM.TutorialVm$ITutorialViewModel$SelectPreviousStep.TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$TutorialVM = this._tutorialVM;
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$TutorialVM = this._tutorialVM;
            },
            PassAroundNeededSubPartsToOtherSubParts: function () {
                this._tutorialVM.TutorialVm$ITutorialViewModel$SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$StepList = this._tutorialVM.TutorialVm$ITutorialViewModel$StepList;
                this._tutorialVM.TutorialVm$ITutorialViewModel$SelectPreviousStep.TutorialVm$SelectPreviousStep$ISelectPreviousStepViewModel$StepList = this._tutorialVM.TutorialVm$ITutorialViewModel$StepList;
                this._tutorialVM.TutorialVm$ITutorialViewModel$ProgressBar.TutorialVm$ProgressBar$IProgressBarViewModel$StepList = this._tutorialVM.TutorialVm$ITutorialViewModel$StepList;
            }
        }
    });

    Bridge.define("TutorialVm.Visitors.PersistTutorial.PersistTutorialVisitorNullObject", {
        inherits: [TutorialVm.Visitors.PersistTutorial.IPersistTutorialVisitor],
        alias: [
            "Visit", "TutorialVm$Visitors$ITutorialViewModelVisitor$Visit",
            "GetTutorialDataXmlString", "TutorialVm$Visitors$PersistTutorial$IPersistTutorialVisitor$GetTutorialDataXmlString",
            "GetTutorialDataObject", "TutorialVm$Visitors$PersistTutorial$IPersistTutorialVisitor$GetTutorialDataObject"
        ],
        methods: {
            Visit: function (tutorialVM) { },
            GetTutorialDataXmlString: function () {
                return "";
            },
            GetTutorialDataObject: function () {
                return null;
            }
        }
    });

    Bridge.define("TutorialVm.Visitors.PersistTutorial.Xml.PersistTutorialToXmlVisitor", {
        inherits: [TutorialVm.Visitors.PersistTutorial.IPersistTutorialVisitor],
        fields: {
            _tutorialDataObjectFactory: null,
            _tutorialXmlFileSaver: null,
            _filePath: null,
            _tutorialXmlSerializer: null,
            _tutorialDataXmlString: null,
            _tutorialDataObject: null
        },
        alias: [
            "Visit", "TutorialVm$Visitors$ITutorialViewModelVisitor$Visit",
            "GetTutorialDataXmlString", "TutorialVm$Visitors$PersistTutorial$IPersistTutorialVisitor$GetTutorialDataXmlString",
            "GetTutorialDataObject", "TutorialVm$Visitors$PersistTutorial$IPersistTutorialVisitor$GetTutorialDataObject"
        ],
        ctors: {
            ctor: function (tutorialDataObjectFactory, tutorialXmlSerializer, tutorialXmlFileSaver, filePath) {
                this.$initialize();
                this._tutorialDataObjectFactory = tutorialDataObjectFactory;
                this._tutorialXmlSerializer = tutorialXmlSerializer;
                this._tutorialXmlFileSaver = tutorialXmlFileSaver;
                this._filePath = filePath;
                this._tutorialDataXmlString = "TBD";
            }
        },
        methods: {
            Visit: function (tutorialVM) {
                this._tutorialDataObject = this._tutorialDataObjectFactory.Create(tutorialVM);
                this._tutorialDataXmlString = this._tutorialXmlSerializer.TutorialPersistence$Serializers$Xml$TutorialXmlSerializer$ITutorialXmlSerializer$Serialize(this._tutorialDataObject);
                this._tutorialXmlFileSaver.TutorialPersistence$Serializers$Xml$XmlFileSaver$ITutorialFileSaver$Save(this._tutorialDataXmlString, this._filePath);
            },
            GetTutorialDataXmlString: function () {
                return this._tutorialDataXmlString;
            },
            GetTutorialDataObject: function () {
                return this._tutorialDataObject;
            }
        }
    });

    Bridge.define("TutorialVm.Visitors.SetInitialFocusForSelectedStep.SetInitialFocusForCurrentStepVisitor", {
        inherits: [TutorialVm.Visitors.SetInitialFocusForSelectedStep.ISetInitialFocusForCurrentStepVisitor],
        fields: {
            _tutorialVM: null
        },
        alias: ["Visit", "TutorialVm$Visitors$ITutorialViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialVM) {
                this._tutorialVM = tutorialVM;

                if (tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$SelectedStepIsAnswerable()) {
                    this.SetFocusForAnswerableStep();
                } else {
                    this.SetFocusToNextStepButton();
                }
            },
            SetFocusForAnswerableStep: function () {
                if (this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$CurrentStepsRawAnswerTextBoxIsVisible()) {
                    this.SetFocusToRawStudentAnswerTextbox();
                } else {
                    this.SetFocusForAlreadyAnsweredStep();
                }
            },
            SetFocusForAlreadyAnsweredStep: function () {
                if (this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$CurrentStepsIsAnsweredCorrectly()) {
                    this.SetFocusToNextStepButton();
                } else {
                    this.SetFocusToRetryAnswerButton();
                }
            },
            SetFocusToNextStepButton: function () {
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRawStudentAnswersFocusToFalse();
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRetryAnswerFocusToFalse();
                this._tutorialVM.TutorialVm$ITutorialViewModel$SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$ToggleFocusToTrue();
            },
            SetFocusToRawStudentAnswerTextbox: function () {
                this._tutorialVM.TutorialVm$ITutorialViewModel$SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$ToggleFocusToFalse();
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRetryAnswerFocusToFalse();
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRawStudentAnswersFocusToTrue();
            },
            SetFocusToRetryAnswerButton: function () {
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRawStudentAnswersFocusToFalse();
                this._tutorialVM.TutorialVm$ITutorialViewModel$SelectNextStep.TutorialVm$SelectNextStep$ISelectNextStepViewModel$ToggleFocusToFalse();
                this._tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$ToggleCurrentStepsRetryAnswerFocusToTrue();
            }
        }
    });

    Bridge.define("TutorialVm.Visitors.UpdateAllPropertiesOfTutorialAndSelectedStep.UpdateAllPropertiesOfTutorialAndSelectedStepVisitor", {
        inherits: [TutorialVm.Visitors.UpdateAllPropertiesOfTutorialAndSelectedStep.IUpdateAllPropertiesOfTutorialAndSelectedStepVisitor],
        alias: ["Visit", "TutorialVm$Visitors$ITutorialViewModelVisitor$Visit"],
        methods: {
            Visit: function (tutorialVM) {
                tutorialVM.TutorialVm$ITutorialViewModel$StepList.TutorialVm$StepList$ITutorialStepListViewModel$UpdateAllPropertiesOfSelectedStep();
                tutorialVM.TutorialVm$ITutorialViewModel$UpdateAllProperties();
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
